const { onDocumentUpdated } = require("firebase-functions/v2/firestore");
const logger = require("firebase-functions/logger");
const apn = require("node-apn");
const admin = require('firebase-admin');
const certificateHelper = require('./certificateHelperSimple');

// Zajist√≠me si p≈ô√≠stup k Firestore
const db = admin.firestore();

// Pass Type Identifier
// passTypeIdentifier se nyn√≠ naƒç√≠t√° dynamicky z Firestore v sendPassUpdateNotification

/**
 * Spust√≠ se p≈ôi ka≈æd√© aktualizaci dokumentu v kolekci emails.
 * Ode≈°le tichou push notifikaci na za≈ô√≠zen√≠, aby si vy≈æ√°dalo novou verzi karty.
 */
exports.sendPassUpdateNotification = onDocumentUpdated("users/{cafeId}/emails/{emailId}", async (event) => {
  logger.info("--- FUNKCE SPU≈†TƒöNA --- Trigger pro sendPassUpdateNotification byl aktivov√°n.");
  // Zkontrolujeme, zda v≈Øbec existuj√≠ nƒõjak√° data po zmƒõnƒõ
  if (!event.data || !event.data.after) {
    logger.log("≈Ω√°dn√° data po zmƒõnƒõ, konƒç√≠m.");
    return;
  }

  const data = event.data.after.data();
  const pushToken = data.pushToken;

  if (!pushToken) {
    logger.log(`Dokument ${event.params.emailId} byl aktualizov√°n, ale neobsahuje pushToken. Notifikace se neodes√≠l√°.`);
    return;
  }

  const { cafeId, emailId } = event.params;
  logger.info(`Detekov√°na zmƒõna pro cafeId: ${cafeId}, u≈æivatele: ${emailId}. Pokou≈°√≠m se odeslat notifikaci na token: ${pushToken}`);

  try {
    // Inicializace APN provideru s lok√°ln√≠mi certifik√°ty (pro nasazen√≠)
    logger.info(`üîê Initializing APN provider for cafeId: ${cafeId}`);
    
    // KROK 1: Naƒçten√≠ dokumentu z cardzapier pro z√≠sk√°n√≠ cest k certifik√°t≈Øm
    const docRef = db.collection('cardzapier').doc(cafeId); // cafeId je zde fullId
    const docSnap = await docRef.get();

    if (!docSnap.exists) {
      logger.error(`‚ùå CRITICAL: Dokument s ID ${cafeId} nebyl nalezen v kolekci cardzapier. Notifikace se neodes√≠l√°.`);
      return;
    }

    const cardData = docSnap.data();
    const pemPath = cardData.pempath;
    const keyPath = cardData.keypath;
    const passTypeIdentifier = cardData.passTypeIdentifier;

    if (!pemPath || !keyPath) {
      logger.error(`‚ùå CRITICAL: V dokumentu ${cafeId} chyb√≠ pempath nebo keypath. Notifikace se neodes√≠l√°.`);
      return;
    }
    if (!passTypeIdentifier) {
      logger.error(`‚ùå CRITICAL: V dokumentu ${cafeId} chyb√≠ passTypeIdentifier. Notifikace se neodes√≠l√°.`);
      return;
    }

    logger.info(`VERIFICATION: Pro notifikaci se pou≈æij√≠ cesty: PEM='${pemPath}', KEY='${keyPath}'`);
    logger.info(`VERIFICATION: Pro notifikaci se pou≈æije passTypeIdentifier='${passTypeIdentifier}'`);

    // KROK 2: Naƒçten√≠ samotn√Ωch certifik√°t≈Ø z Cloud Storage pomoc√≠ cest
    const certificates = await certificateHelper.getAppleCertificateBuffers(pemPath, keyPath);

    const apnProvider = new apn.Provider({
      cert: certificates.signerCert, // Buffer s PEM certifik√°tem
      key: certificates.signerKey,   // Buffer s priv√°tn√≠m kl√≠ƒçem
      production: true
    });
    
    // Vytvo≈ô√≠me pr√°zdnou notifikaci. To je sign√°l pro Wallet, aby si st√°hla nov√° data.
    const notification = new apn.Notification();
    
    // D≈Øle≈æit√©: 'topic' mus√≠ b√Ωt p≈ôesnƒõ v√°≈° passTypeIdentifier
    notification.topic = passTypeIdentifier;

    const result = await apnProvider.send(notification, pushToken);
    
    // Zalogujeme v√Ωsledek
    if (result.sent.length > 0) {
      logger.info("Push notifikace √∫spƒõ≈°nƒõ odesl√°na:", result.sent);
    } 
    
    if (result.failed.length > 0) {
      logger.error("Chyba p≈ôi odes√≠l√°n√≠ push notifikace:", JSON.stringify(result.failed, null, 2));
    }

  } catch (err) {
    logger.error("Fat√°ln√≠ chyba p≈ôi odes√≠l√°n√≠ notifikace p≈ôes APN:", err);
  }
});
