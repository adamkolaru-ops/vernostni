const { Datastore } = require('@google-cloud/datastore');
const admin = require('firebase-admin');

// Lazy initialization - inicializace a≈æ p≈ôi prvn√≠m vol√°n√≠ funkce
let datastore = null;
let db = null;

function initializeServices() {
  if (!datastore) {
    // Pou≈æijeme defaultn√≠ kredenci√°ly (funguje jak lok√°lnƒõ s gcloud auth, tak v Cloud Functions)
    datastore = new Datastore({ projectId: 'vernostkarty-db' });
  }
  
  if (!db) {
    // Inicializace Firebase Admin pouze pokud je≈°tƒõ nen√≠ inicializov√°n
    if (!admin.apps.length) {
      admin.initializeApp();
    }
    db = admin.firestore();
  }
}

/**
 * Cloud Function pro p≈ôi≈ôazen√≠ certifik√°tu k √∫ƒçtu
 * Najde prvn√≠ voln√Ω z√°znam v tabulce certificates a p≈ôi≈ôad√≠ ho k fullId
 */
async function assignCertificate(req, res) {
  // CORS headers - enhanced for WIX frontend
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Origin, Accept');
  res.set('Access-Control-Max-Age', '3600');

  if (req.method === 'OPTIONS') {
    res.status(200).send('');
    return;
  }

  try {
    // Inicializace slu≈æeb p≈ôi prvn√≠m vol√°n√≠
    initializeServices();
    
    console.log('üöÄ Zaƒç√≠n√°m p≈ôi≈ôazov√°n√≠ certifik√°tu...');
    
    const { fullId } = req.body;
    
    if (!fullId) {
      return res.status(400).json({
        success: false,
        error: 'Chyb√≠ parametr fullId'
      });
    }

    // Ovƒõ≈ôen√≠ form√°tu fullId (36 znak≈Ø UUID)
    if (!fullId.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)) {
      return res.status(400).json({
        success: false,
        error: 'Neplatn√Ω form√°t fullId'
      });
    }

    console.log(`üìã Hled√°m voln√Ω certifik√°t pro fullId: ${fullId}`);

    // 0. Nejprve zkontrolujeme, zda u≈æivatel u≈æ nem√° p≈ôi≈ôazen√Ω certifik√°t
    const existingQuery = datastore.createQuery('certificates')
      .filter('fullId', '=', fullId);
    
    const [existingResults] = await existingQuery.run();
    
    if (existingResults.length > 0) {
      const existingCertificate = existingResults[0];
      console.log(`üîç U≈æivatel s fullId ${fullId} ji≈æ m√° p≈ôi≈ôazen√Ω certifik√°t: ${existingCertificate.name}`);
      
      // Z√≠skat hodnoty z existuj√≠c√≠ho z√°znamu
      const keypath = existingCertificate.keypath || null;
      const pempath = existingCertificate.pempath || null;
      const passTypeIdentifier = existingCertificate.passTypeIdentifier || null;
      
      return res.status(200).json({
        success: true,
        certificateName: existingCertificate.name,
        fullId,
        data: {
          keypath,
          pempath,
          passTypeIdentifier
        },
        message: 'Certifik√°t ji≈æ byl p≈ôi≈ôazen d≈ô√≠ve'
      });
    }

    // 1. Naj√≠t prvn√≠ voln√Ω z√°znam v tabulce certificates (fullId == null)
    const query = datastore.createQuery('certificates')
      .filter('fullId', '=', null)
      .order('name')
      .limit(1);

    const [results] = await query.run();

    if (results.length === 0) {
      return res.status(404).json({
        success: false,
        error: '≈Ω√°dn√Ω voln√Ω certifik√°t nebyl nalezen'
      });
    }

    const certificate = results[0];
    const certificateName = certificate.name;
    
    console.log(`‚úÖ Nalezen voln√Ω certifik√°t: ${certificateName}`);

    // 2. Aktualizovat z√°znam - nastavit fullId
    const key = datastore.key(['certificates', certificateName]);
    const updatedCertificate = {
      ...certificate,
      fullId: fullId
    };

    await datastore.save({
      key,
      data: updatedCertificate
    });

    console.log(`üíæ Certifik√°t ${certificateName} p≈ôi≈ôazen k fullId: ${fullId}`);

    // 3. Z√≠skat hodnoty keypath, pempath a passTypeIdentifier z aktualizovan√©ho z√°znamu
    const keypath = certificate.keypath || null;
    const pempath = certificate.pempath || null;
    const passTypeIdentifier = certificate.passTypeIdentifier || null;

    console.log(`üìù Hodnoty k ulo≈æen√≠ do Firebase:`, {
      keypath,
      pempath,
      passTypeIdentifier
    });

    // 4. Zapsat hodnoty do Firebase cardzapier/{fullId}
    const cardzapierRef = db.collection('cardzapier').doc(fullId);
    
    // Nejprve zkontrolujeme, zda dokument existuje
    const docSnapshot = await cardzapierRef.get();
    
    const updateData = {};
    if (keypath !== null) updateData.keypath = keypath;
    if (pempath !== null) updateData.pempath = pempath;
    if (passTypeIdentifier !== null) updateData.passTypeIdentifier = passTypeIdentifier;

    if (docSnapshot.exists) {
      // Dokument existuje - aktualizujeme ho
      await cardzapierRef.update(updateData);
      console.log(`üîÑ Aktualizov√°n existuj√≠c√≠ dokument cardzapier/${fullId}`);
    } else {
      // Dokument neexistuje - vytvo≈ô√≠me ho
      await cardzapierRef.set(updateData);
      console.log(`üìÑ Vytvo≈ôen nov√Ω dokument cardzapier/${fullId}`);
    }

    console.log('üéâ P≈ôi≈ôazen√≠ certifik√°tu dokonƒçeno √∫spƒõ≈°nƒõ!');

    return res.status(200).json({
      success: true,
      certificateName,
      fullId,
      data: {
        keypath,
        pempath,
        passTypeIdentifier
      }
    });

  } catch (error) {
    console.error('‚ùå Chyba p≈ôi p≈ôi≈ôazov√°n√≠ certifik√°tu:', error);
    return res.status(500).json({
      success: false,
      error: error.message
    });
  }
}

module.exports = { assignCertificate };
