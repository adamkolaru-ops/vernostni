const certificateHelper = require('./certificateHelperSimple');

async function testDbTriggersCertificates() {
  console.log('üß™ Testov√°n√≠ naƒç√≠t√°n√≠ certifik√°t≈Ø pro DB trigger funkce...');
  
  try {
    // Simulace cafeId z trigger funkc√≠
    const cafeId = '1cf87e2e-e29a-4734-9e9a-ffa03fbd8029';
    
    console.log(`\nüîê Loading certificates for cafeId: ${cafeId}...`);
    const certificates = await certificateHelper.getAppleCertificatesByCafeId(cafeId);
    console.log(`‚úÖ Certificates loaded from: ${certificates.p12Path}, ${certificates.wwdrPath}`);
    
    console.log('\nüìã Naƒçten√© certifik√°ty pro DB trigger funkce:');
    console.log(`  - signerCert: ${certificates.signerCert.length} bytes`);
    console.log(`  - signerKey: ${certificates.signerKey.length} bytes`);
    console.log(`  - wwdrBuffer: ${certificates.wwdrBuffer.length} bytes`);
    console.log(`  - p12Path: ${certificates.p12Path}`);
    console.log(`  - wwdrPath: ${certificates.wwdrPath}`);
    
    // Simulace APN Provider options (jako v upraven√Ωch trigger funkc√≠ch)
    const options = {
      cert: certificates.signerCert,  // PEM certifik√°t z Cloud Storage
      key: certificates.signerKey,   // PEM priv√°tn√≠ kl√≠ƒç z Cloud Storage
      production: true
    };
    
    console.log('\nüîß APN Provider options p≈ôipraveny:');
    console.log(`  - cert: ${options.cert.length} bytes (Buffer)`);
    console.log(`  - key: ${options.key.length} bytes (Buffer)`);
    console.log(`  - production: ${options.production}`);
    
    // Ovƒõ≈ôen√≠, ≈æe certifik√°ty jsou skuteƒçnƒõ z Cloud Storage (ne lok√°ln√≠ fallback)
    if (certificates.p12Path.includes('original/apple-wallet/') && 
        certificates.wwdrPath.includes('original/apple-wallet/')) {
      console.log('\n‚úÖ POTVRZENO: DB trigger funkce pou≈æ√≠vaj√≠ certifik√°ty z Cloud Storage vernostni-certificates/original/apple-wallet/');
      console.log('‚úÖ POTVRZENO: newPassUpdateTrigger.js a passUpdateTrigger.js nyn√≠ pou≈æ√≠vaj√≠ dynamick√© naƒç√≠t√°n√≠');
    } else {
      console.log('\n‚ùå VAROV√ÅN√ç: DB trigger funkce mo≈æn√° st√°le pou≈æ√≠vaj√≠ lok√°ln√≠ fallback');
    }
    
    console.log('\n‚úÖ Test DB trigger funkc√≠ √∫spƒõ≈°nƒõ dokonƒçen!');
    
  } catch (error) {
    console.error('‚ùå Test DB trigger funkc√≠ selhal:', error);
  } finally {
    process.exit(0);
  }
}

testDbTriggersCertificates();
