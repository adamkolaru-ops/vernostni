const { onDocumentUpdated } = require("firebase-functions/v2/firestore");
const logger = require("firebase-functions/logger");
const apn = require("@parse/node-apn");
const path = require("path");
const fs = require("fs");
const https = require("https");
const admin = require('firebase-admin');
const certificateHelper = require('./certificateHelperSimple');

const db = admin.firestore();

// Pass Type Identifier
// passTypeIdentifier se nyn√≠ naƒç√≠t√° dynamicky z Firestore v notifyDeviceOnPassUpdate

exports.notifyDeviceOnPassUpdate = onDocumentUpdated("users/{fullId}/emails/{emailId}", async (event) => {
  logger.info("--- APN TRIGGER SPU≈†TƒöN (simplified version) ---");
  logger.info(`üîç Trigger path: users/${event.params.fullId}/emails/${event.params.emailId}`);
  logger.info(`üîç fullId: ${event.params.fullId}, emailId: ${event.params.emailId}`);
  
  // Logov√°n√≠ v≈°ech parametr≈Ø triggeru
  logger.info('üìã Trigger params:', event.params);
  
  if (!event.data || !event.data.after) {
    logger.log("≈Ω√°dn√° data po zmƒõnƒõ, konƒç√≠m.");
    return;
  }
  
  // Logov√°n√≠ dat p≈ôed a po zmƒõnƒõ
  const beforeData = event.data.before ? event.data.before.data() : null;
  const afterData = event.data.after.data();
  
  logger.info('üìã Data p≈ôed zmƒõnou:', beforeData ? JSON.stringify(beforeData) : '≈æ√°dn√°');
  logger.info('üìã Data po zmƒõnƒõ:', JSON.stringify(afterData));
  
  // Kontrola, zda do≈°lo ke zmƒõnƒõ relevantn√≠ch pol√≠
  const relevantFields = ['stampCount', 'level1_status', 'level1_sleva', 'level1_zustatek', 
                          'level2_status', 'level2_sleva', 'level2_zustatek',
                          'level3_status', 'level3_sleva', 'level3_zustatek',
                          'cardType', 'bodyValInput', 'bodyLabel1Input', 'bodyBottomTopInput', 
                          'bodyBottomBotInput', 'bodyKonverze', 'stampValInput',
                          // P≈ôid√°n√≠ dal≈°√≠ch d≈Øle≈æit√Ωch pol√≠ (bez dateUpdated - technick√© pole)
                          'lastUpdated', 'name', 'surname', 'phone', 'email',
                          'pushToken', 'deviceLibraryIdentifier', 'serialNumber'];
  
  let hasRelevantChanges = false;
  if (beforeData) {
    for (const field of relevantFields) {
      if (beforeData[field] !== afterData[field]) {
        logger.info(`üîÑ Zmƒõna v poli ${field}: ${beforeData[field]} -> ${afterData[field]}`);
        hasRelevantChanges = true;
      }
    }
  } else {
    // Pokud nem√°me p≈ôedchoz√≠ data, p≈ôedpokl√°d√°me, ≈æe jde o nov√Ω dokument
    hasRelevantChanges = true;
  }
  
  if (!hasRelevantChanges) {
    logger.info('‚ùå ≈Ω√°dn√© relevantn√≠ zmƒõny, kter√© by vy≈æadovaly notifikaci. Konƒç√≠m.');
    return;
  }

  const data = event.data.after.data();
  const { fullId, emailId: originalEmailId } = event.params;
  
  // Extrahujeme cafeId z fullId (posledn√≠ch 12 znak≈Ø)
  const cafeId = fullId.slice(-12);
  
  // Normalizace emailId - odstranƒõn√≠ prefixu "ID=" pokud existuje
  let emailId = originalEmailId;
  if (emailId && emailId.startsWith('ID=')) {
    emailId = emailId.substring(3);
    logger.info(`üîç DEBUG: Normalizov√°n emailId z ${originalEmailId} na ${emailId}`);
  }
  
  // Z√≠sk√°me data p≈ô√≠mo z Firestore dokumentu (bez passTypeIdentifier - ten se naƒç√≠t√° z cardzapier)
  let pushToken = data.pushToken;
  let deviceLibraryIdentifier = data.deviceLibraryIdentifier;
  let serialNumber = data.serialNumber || emailId; // serialNumber je email
  
  logger.info(`üìã Data z Firestore dokumentu:`);
  logger.info(`  - pushToken: ${pushToken || 'CHYB√ç'}`);
  logger.info(`  - deviceLibraryIdentifier: ${deviceLibraryIdentifier || 'CHYB√ç'}`);
  logger.info(`  - serialNumber: ${serialNumber || 'CHYB√ç'}`);
  logger.info(`  - emailId: ${emailId}`);
  
  // OPRAVA: passTypeIdentifier se V≈ΩDY naƒç√≠t√° z cardzapier/{fullId}, ne z user dokumentu
  let passTypeIdentifier = null;
  logger.info(`üîç Naƒç√≠t√°m passTypeIdentifier z cardzapier podle fullId: ${fullId}`);
  try {
    const docRef = db.collection('cardzapier').doc(fullId);
    const docSnap = await docRef.get();
    
    if (!docSnap.exists) {
      logger.error(`‚ùå CRITICAL: Dokument s ID ${fullId} nebyl nalezen v kolekci cardzapier. Notifikace se neodes√≠l√°.`);
      return;
    }
    
    const cardData = docSnap.data();
    passTypeIdentifier = cardData.passTypeIdentifier;
    
    if (!passTypeIdentifier) {
      logger.error(`‚ùå CRITICAL: V dokumentu ${fullId} chyb√≠ passTypeIdentifier. Notifikace se neodes√≠l√°.`);
      return;
    }
    
    logger.info(`‚úÖ Naƒçten passTypeIdentifier z cardzapier: ${passTypeIdentifier}`);
  } catch (error) {
    logger.error(`‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ passTypeIdentifier z cardzapier:`, error);
    return;
  }

  if (!pushToken) {
    logger.log(`Dokument ${emailId} byl aktualizov√°n, ale chyb√≠ pushToken.`);
    return;
  }

  if (!deviceLibraryIdentifier) {
    logger.log(`Dokument ${emailId} byl aktualizov√°n, ale chyb√≠ deviceLibraryIdentifier.`);
    return;
  }

  logger.info(`üîç DEBUG: Zpracov√°v√°m aktualizaci pro emailId: ${emailId}, deviceLibraryIdentifier: ${deviceLibraryIdentifier}`);

  logger.info(`Trigger spu≈°tƒõn pro cafeId: ${cafeId}, email: ${emailId}`);
  logger.info(`DeviceLibraryIdentifier: ${deviceLibraryIdentifier}, pushToken: ${pushToken}`);

  try {
    // OPRAVA: Neaktualizujeme v≈°echny karty p≈ôes updateCardsTimestamp, ale pos√≠l√°me notifikaci pouze pro konkr√©tn√≠ email/pass
    logger.info(`üîî P≈ôipravuji APN notifikaci pro konkr√©tn√≠ email/pass: ${emailId}`);
    logger.info(`üìã Data pro notifikaci:`);
    logger.info(`  - fullId: ${fullId}`);
    logger.info(`  - emailId: ${emailId}`);
    logger.info(`  - serialNumber: ${serialNumber}`);
    logger.info(`  - deviceLibraryIdentifier: ${deviceLibraryIdentifier}`);
    logger.info(`  - pushToken: ${pushToken}`);
    logger.info(`  - passTypeIdentifier: ${passTypeIdentifier || 'bude naƒçten z cardzapier'}`);
    
    // Neaktualizujeme v≈°echny karty, ale pos√≠l√°me notifikaci pouze pro tento konkr√©tn√≠ email/pass
    
    // KROK 2: Inicializace APN provideru s lok√°ln√≠mi certifik√°ty (pro nasazen√≠)
    logger.info(`üîê Initializing APN provider for cafeId: ${cafeId}`);
    
    // KROK 2: Dynamick√© naƒç√≠t√°n√≠ certifik√°t≈Ø z Cloud Storage
    // Normalizace cafeId - odstranƒõn√≠ prefixu "ID=" pokud existuje
    let normalizedCafeId = cafeId;
    if (normalizedCafeId && normalizedCafeId.startsWith('ID=')) {
      normalizedCafeId = normalizedCafeId.substring(3);
      logger.info(`üîç DEBUG: Normalizov√°n cafeId z ${cafeId} na ${normalizedCafeId}`);
    }
    
    // passTypeIdentifier je ji≈æ naƒçten v√Ω≈°e z cardzapier/{fullId}

    // Pou≈æit√≠ getAppleCertificatesByCafeId m√≠sto getAppleCertificateBuffers
    // Tato funkce m√° fallback na lok√°ln√≠ certifik√°ty a nepot≈ôebuje cesty pempath a keypath
    logger.info(`Naƒç√≠t√°m certifik√°ty pomoc√≠ getAppleCertificatesByCafeId pro cafeId: ${cafeId}`);
    const certificates = await certificateHelper.getAppleCertificatesByCafeId(cafeId);

    const options = {
      cert: certificates.signerCert, // Buffer s PEM certifik√°tem
      key: certificates.signerKey,   // Buffer s priv√°tn√≠m kl√≠ƒçem
      production: true
    };
    
    const apnProvider = new apn.Provider(options);
    
    // KROK 3: Odeslat APN notifikaci
    logger.info(`üì± Odes√≠l√°m notifikaci - DeviceLibraryIdentifier: ${deviceLibraryIdentifier}, EmailId: ${emailId}, Token: ${pushToken}, Topic: ${passTypeIdentifier}`);
    logger.info(`üì± SerialNumber: ${serialNumber || 'nen√≠ k dispozici'}`);
    
    const notification = new apn.Notification();
    notification.topic = passTypeIdentifier;
    
    const result = await apnProvider.send(notification, pushToken);
    
    if (result.sent.length > 0) {
      logger.info(`‚úÖ APN notifikace √∫spƒõ≈°nƒõ odesl√°na pro DeviceLibraryIdentifier: ${deviceLibraryIdentifier}, EmailId: ${emailId}`);
    }
    if (result.failed.length > 0) {
      logger.error(`‚ùå Chyba p≈ôi odes√≠l√°n√≠ APN notifikace pro DeviceLibraryIdentifier: ${deviceLibraryIdentifier}:`, JSON.stringify(result.failed, null, 2));
    }
    
  } catch (err) {
    logger.error("Fat√°ln√≠ chyba p≈ôi zpracov√°n√≠ triggeru:", err);
  }
});
