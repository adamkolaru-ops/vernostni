const admin = require('firebase-admin');
const GoogleWalletHelper = require('./googleWalletHelper');

// Inicializace Firestore
const db = admin.firestore();

/**
 * Cloud Function pro vytvo≈ôen√≠ Google Wallet ≈°ablony
 * P≈ôij√≠m√° data z HTML formul√°≈ôe, ukl√°d√° do Firestore a vytv√°≈ô√≠ ≈°ablonu v Google API
 */
module.exports = async (req, res) => {
  // Explicitn√≠ CORS headers - stejnƒõ jako v assignCertificate.js
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Origin, Accept');
  res.set('Access-Control-Max-Age', '3600');

  if (req.method === 'OPTIONS') {
    res.status(200).send('');
    return;
  }

  if (req.method !== 'POST') {
    res.status(405).json({ error: 'Method not allowed. Use POST.' });
    return;
  }

  try {
    const googleWallet = new GoogleWalletHelper();

    // Validace vstupn√≠ch dat
    const {
      classId,
      issuerName,
      programName,
      programDescription,
      programLogo,
      hexBackgroundColor,
      localizedIssuerName,
      localizedProgramName,
      rewardsTier,
      businessId,
      timestamp,
      issuerId,
      fullClassId
    } = req.body;

    // Povinn√° pole
    if (!classId || !issuerName || !programName) {
      res.status(400).json({ 
        error: 'Chyb√≠ povinn√° pole: classId, issuerName, programName' 
      });
      return;
    }

    // Validace Class ID form√°tu
    const classIdRegex = /^[a-zA-Z0-9_]+$/;
    if (!classIdRegex.test(classId)) {
      res.status(400).json({ 
        error: 'Class ID m≈Ø≈æe obsahovat pouze p√≠smena, ƒç√≠sla a podtr≈æ√≠tka' 
      });
      return;
    }

    console.log(`üöÄ Processing Google Wallet template creation for: ${classId}`);

    // P≈ô√≠prava dat pro ulo≈æen√≠ do Firestore
    const firestoreData = {
      classId,
      fullClassId: fullClassId || `3388000000022981331.${classId}`,
      issuerName,
      programName,
      programDescription: programDescription || null,
      programLogo: programLogo || null,
      hexBackgroundColor: hexBackgroundColor || '#4285f4',
      localizedIssuerName: localizedIssuerName || issuerName,
      localizedProgramName: localizedProgramName || programName,
      rewardsTier: rewardsTier || null,
      businessId: businessId || null,
      issuerId: issuerId || '3388000000022981331',
      createdAt: timestamp || new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      status: 'creating',
      googleApiResponse: null,
      errors: []
    };

    // 1. Ulo≈æen√≠ do Firestore kolekce 'test-sablona'
    console.log('üíæ Saving to Firestore collection: test-sablona');
    const docRef = db.collection('test-sablona').doc(classId);
    
    // Kontrola, zda u≈æ dokument existuje
    const existingDoc = await docRef.get();
    if (existingDoc.exists) {
      res.status(409).json({ 
        error: `≈†ablona s ID '${classId}' ji≈æ existuje. Pou≈æijte jin√© ID.` 
      });
      return;
    }

    await docRef.set(firestoreData);
    console.log('‚úÖ Data saved to Firestore');

    // 2. Kontrola, zda t≈ô√≠da u≈æ existuje v Google API
    console.log('üîç Checking if Google Wallet class already exists');
    try {
      const existingClass = await googleWallet.getLoyaltyClass(classId);
      
      if (existingClass.exists) {
        // Aktualizace existuj√≠c√≠ t≈ô√≠dy
        console.log('üîÑ Class exists, updating...');
        const updateResult = await googleWallet.updateLoyaltyClass(classId, req.body);
        
        // Aktualizace Firestore s v√Ωsledkem
        await docRef.update({
          status: 'updated',
          updatedAt: new Date().toISOString(),
          googleApiResponse: updateResult.data
        });

        res.status(200).json({
          success: true,
          message: '≈†ablona byla √∫spƒõ≈°nƒõ aktualizov√°na',
          classId: updateResult.classId,
          action: 'updated',
          firestoreId: classId
        });
        return;
      }
    } catch (checkError) {
      console.warn('‚ö†Ô∏è Error checking existing class (will proceed with creation):', checkError.message);
    }

    // 3. Vytvo≈ôen√≠ nov√© t≈ô√≠dy v Google Wallet API
    console.log('üÜï Creating new Google Wallet class');
    try {
      const createResult = await googleWallet.createLoyaltyClass(req.body);
      
      // Aktualizace Firestore s √∫spƒõ≈°n√Ωm v√Ωsledkem
      await docRef.update({
        status: 'created',
        updatedAt: new Date().toISOString(),
        googleApiResponse: createResult.data
      });

      console.log('‚úÖ Google Wallet template created successfully');

      res.status(201).json({
        success: true,
        message: '≈†ablona byla √∫spƒõ≈°nƒõ vytvo≈ôena',
        classId: createResult.classId,
        action: 'created',
        firestoreId: classId
      });

    } catch (googleError) {
      console.error('‚ùå Google API Error:', googleError);
      
      // Aktualizace Firestore s chybou
      await docRef.update({
        status: 'error',
        updatedAt: new Date().toISOString(),
        errors: [googleError.message]
      });

      // Pokud je to chyba duplik√°tu, zkus√≠me aktualizaci
      if (googleError.message.includes('already exists') || googleError.message.includes('duplicate')) {
        try {
          console.log('üîÑ Class seems to exist, trying update...');
          const updateResult = await googleWallet.updateLoyaltyClass(classId, req.body);
          
          await docRef.update({
            status: 'updated',
            updatedAt: new Date().toISOString(),
            googleApiResponse: updateResult.data,
            errors: []
          });

          res.status(200).json({
            success: true,
            message: '≈†ablona byla √∫spƒõ≈°nƒõ aktualizov√°na (existovala v Google)',
            classId: updateResult.classId,
            action: 'updated',
            firestoreId: classId
          });
          return;
        } catch (updateError) {
          console.error('‚ùå Update also failed:', updateError);
        }
      }

      res.status(500).json({
        error: `Chyba p≈ôi vytv√°≈ôen√≠ Google Wallet ≈°ablony: ${googleError.message}`,
        firestoreId: classId
      });
    }

  } catch (error) {
    console.error('‚ùå Unexpected error in createGoogleWalletTemplate:', error);
    res.status(500).json({
      error: `Neoƒçek√°van√° chyba: ${error.message}`
    });
  }
};
