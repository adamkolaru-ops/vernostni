const admin = require('firebase-admin');
const fs = require('fs');

// Hled√°n√≠ spr√°vn√©ho souboru s p≈ôihla≈°ovac√≠mi √∫daji
let serviceAccount;
try {
  // Zkus√≠me naj√≠t soubor v r≈Øzn√Ωch um√≠stƒõn√≠ch
  if (fs.existsSync('./certificates/vernostkarty-firebase-adminsdk-2j135-d46f086885.json')) {
    serviceAccount = require('./certificates/vernostkarty-firebase-adminsdk-2j135-d46f086885.json');
    console.log('‚úÖ Nalezen soubor s p≈ôihla≈°ovac√≠mi √∫daji: ./certificates/vernostkarty-firebase-adminsdk-2j135-d46f086885.json');
  } else {
    console.error('‚ùå Nelze naj√≠t soubor s Firebase p≈ôihla≈°ovac√≠mi √∫daji!');
    process.exit(1);
  }
} catch (error) {
  console.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ Firebase p≈ôihla≈°ovac√≠ch √∫daj≈Ø:', error);
  process.exit(1);
}

// Inicializace Firebase
try {
  admin.app();
} catch (e) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
  });
}

const db = admin.firestore();

// Testovac√≠ parametry
const cafeId = '81e91ab5-2396-4490-b48f-9db043f90397';
const emailId = 'asdasdasdsdaads@adsadas.ccas';

async function updateUser() {
  try {
    console.log(`üîç Hled√°m u≈æivatele s cafeId: ${cafeId} a emailId: ${emailId}`);
    
    // Naƒçten√≠ aktu√°ln√≠ch dat u≈æivatele
    const userRef = db.collection('users').doc(cafeId).collection('emails').doc(emailId);
    const userDoc = await userRef.get();
    
    if (!userDoc.exists) {
      console.error(`‚ùå U≈æivatel s cafeId: ${cafeId} a emailId: ${emailId} nebyl nalezen!`);
      return;
    }
    
    const userData = userDoc.data();
    console.log(`‚úÖ U≈æivatel nalezen:`);
    console.log(JSON.stringify(userData, null, 2));
    
    // Kontrola, zda m√° u≈æivatel deviceLibraryIdentifier a pushToken
    if (!userData.deviceLibraryIdentifier || !userData.pushToken) {
      console.warn(`‚ö†Ô∏è U≈æivatel nem√° deviceLibraryIdentifier nebo pushToken! Notifikace nebude fungovat.`);
      console.log(`deviceLibraryIdentifier: ${userData.deviceLibraryIdentifier || 'chyb√≠'}`);
      console.log(`pushToken: ${userData.pushToken || 'chyb√≠'}`);
    } else {
      console.log(`‚úÖ U≈æivatel m√° deviceLibraryIdentifier: ${userData.deviceLibraryIdentifier}`);
      console.log(`‚úÖ U≈æivatel m√° pushToken: ${userData.pushToken}`);
    }
    
    // Aktualizace u≈æivatele - zmƒõna hodnoty stampCount a stampValInput
    const currentStampCount = userData.stampCount || '0';
    const newStampCount = String(parseInt(currentStampCount) + 1);
    const currentStampValInput = userData.stampValInput || '0';
    const newStampValInput = String(parseInt(currentStampValInput) + 1);
    
    console.log(`üîÑ Aktualizuji stampCount z ${currentStampCount} na ${newStampCount}`);
    console.log(`üîÑ Aktualizuji stampValInput z ${currentStampValInput} na ${newStampValInput}`);
    
    // Aktualizace dokumentu s ƒçasov√Ωm raz√≠tkem pro lep≈°√≠ sledov√°n√≠ v logu
    const timestamp = new Date().toISOString();
    await userRef.update({
      stampCount: newStampCount,
      stampValInput: newStampValInput,
      lastUpdated: timestamp
    });
    
    console.log(`‚úÖ U≈æivatel byl √∫spƒõ≈°nƒõ aktualizov√°n v ${timestamp}!`);
    console.log(`üîî Trigger notifyDeviceOnPassUpdate by mƒõl b√Ωt nyn√≠ spu≈°tƒõn.`);
    console.log(`üìã Pro kontrolu log≈Ø triggeru spus≈•te: firebase functions:log --only notifyDeviceOnPassUpdate`);
    console.log(`‚è±Ô∏è Poƒçkejte pros√≠m nƒõkolik minut, ne≈æ se logy zobraz√≠.`);
    
  } catch (error) {
    console.error(`‚ùå Chyba p≈ôi aktualizaci u≈æivatele:`, error);
  } finally {
    process.exit(0);
  }
}

// Spu≈°tƒõn√≠ aktualizace
updateUser();
