const { Storage } = require('@google-cloud/storage');
const fs = require('fs');

// Inicializace Google Cloud Storage s credentials pro p≈ô√≠stup k vernostkarty bucketu
const storage = new Storage({
  projectId: 'vernostkarty',  // Bucket vernostni-certificates pat≈ô√≠ projektu vernostkarty
  keyFilename: './certificates/vernostkarty-firebase-adminsdk-2j135-d46f086885.json'
});
const bucketName = 'vernostni-certificates';



/**
 * Naƒçte Apple Wallet certifik√°ty p≈ô√≠mo z Cloud Storage (vernostni-certificates/original/apple-wallet/)
 * @param {string} cafeId - ID kav√°rny (pro kompatibilitu, ale v≈ædy pou≈æ√≠v√° original)
 * @returns {Object} Objekt s obsahem certifik√°t≈Ø (signerCert, signerKey, wwdrBuffer)
 */
async function getAppleCertificatesByCafeId(cafeId) {
  try {
    console.log(`üîê Naƒç√≠t√°m Apple Wallet certifik√°ty pro cafeId: ${cafeId} p≈ô√≠mo z Cloud Storage`);
    
    // P≈ô√≠m√© cesty k certifik√°t≈Øm v Cloud Storage (bez WWDR - ten je lok√°ln√≠)
    const pemCertPath = 'original/apple-wallet/passCert.pem';
    const pemKeyPath = 'original/apple-wallet/privatekey.key';
    
    console.log(`‚úÖ Pou≈æ√≠v√°m p≈ô√≠m√© cesty: ${pemCertPath}, ${pemKeyPath}`);
    console.log(`‚úÖ WWDR certifik√°t se naƒç√≠t√° lok√°lnƒõ`);
    
    const bucket = storage.bucket(bucketName);
    
    console.log(`üì• Stahuji PEM certifik√°ty z Cloud Storage...`);
    console.log(`  - ${pemCertPath}`);
    console.log(`  - ${pemKeyPath}`);
    console.log(`  - WWDR lok√°lnƒõ: ./certificates/AppleWWDRCAG4.pem`);
    
    // Naƒçten√≠ PEM soubor≈Ø z Cloud Storage
    const certFile = bucket.file(pemCertPath);
    const keyFile = bucket.file(pemKeyPath);
    
    const [signerCert] = await certFile.download();
    const [signerKey] = await keyFile.download();
    
    // OPRAVA: WWDR certifik√°t se naƒç√≠t√° lok√°lnƒõ, ne z Cloud Storage
    const wwdrBuffer = fs.readFileSync('./certificates/AppleWWDRCAG4.pem');
    
    console.log('‚úÖ PEM certifik√°ty √∫spƒõ≈°nƒõ naƒçteny z Cloud Storage');
    console.log(`  - signerCert: ${signerCert.length} bytes`);
    console.log(`  - signerKey: ${signerKey.length} bytes`);
    console.log(`  - wwdrBuffer: ${wwdrBuffer.length} bytes`);
    
    return {
      signerCert,      // PEM certifik√°t z Cloud Storage
      signerKey,       // PEM priv√°tn√≠ kl√≠ƒç z Cloud Storage
      wwdrBuffer,      // WWDR certifik√°t lok√°lnƒõ
      p12Path: 'original/apple-wallet/certificates.p12',  // Pro debug
      wwdrPath: './certificates/AppleWWDRCAG4.pem'  // Pro debug - lok√°ln√≠ cesta
    };
    
  } catch (error) {
    console.error(`‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ certifik√°t≈Ø pro cafeId ${cafeId}:`, error);
    throw new Error(`Nelze naƒç√≠st certifik√°ty z Cloud Storage: ${error.message}`);
  }
}

/**
 * Naƒçte Apple Wallet certifik√°ty z konkr√©tn√≠ch cest v Cloud Storage
 * @param {string} pemPath - Cesta k PEM certifik√°tu v Cloud Storage
 * @param {string} keyPath - Cesta k priv√°tn√≠mu kl√≠ƒçi v Cloud Storage
 * @returns {Object} Objekt s obsahem certifik√°t≈Ø (signerCert, signerKey, wwdrBuffer)
 */
async function getAppleCertificateBuffers(pemPath, keyPath) {
  try {
    console.log(`VERIFICATION: Naƒç√≠t√°m certifik√°ty z dynamick√Ωch cest: PEM='${pemPath}', KEY='${keyPath}'`);
    
    const bucket = storage.bucket(bucketName);
    const fs = require('fs');
    
    console.log(`üì• Naƒç√≠t√°m certifik√°ty...`);
    console.log(`  - PEM z Cloud Storage: ${pemPath}`);
    console.log(`  - KEY z Cloud Storage: ${keyPath}`);
    console.log(`  - WWDR lok√°lnƒõ: ./certificates/AppleWWDRCAG4.pem`);
    
    // Naƒçten√≠ PEM a KEY z Cloud Storage
    const certFile = bucket.file(pemPath);
    const keyFile = bucket.file(keyPath);
    
    const [signerCert] = await certFile.download();
    const [signerKey] = await keyFile.download();
    
    // Naƒçten√≠ WWDR certifik√°tu lok√°lnƒõ
    const wwdrBuffer = fs.readFileSync('./certificates/AppleWWDRCAG4.pem');
    
    console.log('‚úÖ Certifik√°ty √∫spƒõ≈°nƒõ naƒçteny z dynamick√Ωch cest');
    console.log(`  - signerCert: ${signerCert.length} bytes`);
    console.log(`  - signerKey: ${signerKey.length} bytes`);
    console.log(`  - wwdrBuffer: ${wwdrBuffer.length} bytes`);
    
    return {
      signerCert,      // PEM certifik√°t z Cloud Storage
      signerKey,       // PEM priv√°tn√≠ kl√≠ƒç z Cloud Storage
      wwdrBuffer       // WWDR certifik√°t z Cloud Storage
    };
    
  } catch (error) {
    console.error(`‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ certifik√°t≈Ø z cest PEM='${pemPath}', KEY='${keyPath}':`, error);
    throw new Error(`Nelze naƒç√≠st certifik√°ty z Cloud Storage: ${error.message}`);
  }
}

module.exports = {
  getAppleCertificatesByCafeId,
  getAppleCertificateBuffers
};
