const { Datastore } = require('@google-cloud/datastore');

// Inicializace Datastore
const datastore = new Datastore({ projectId: 'vernostkarty-db' });

async function testAssignCertificateSystem() {
  console.log('üîç Kompletn√≠ test syst√©mu assignCertificate...\n');
  
  try {
    // 1. Kontrola tabulky certificates
    console.log('üìã 1. Kontrola tabulky certificates:');
    const query = datastore.createQuery('certificates').order('name');
    const [certificates] = await datastore.runQuery(query);
    
    console.log(`   Nalezeno ${certificates.length} z√°znam≈Ø`);
    
    let availableCount = 0;
    let hasCorrectPaths = false;
    
    certificates.forEach((cert, index) => {
      console.log(`\n   üîê Z√°znam ${index + 1}: ${cert.name}`);
      console.log(`      - fullId: ${cert.fullId || 'null (VOLN√ù)'}`);
      console.log(`      - passTypeIdentifier: ${cert.passTypeIdentifier || 'CHYB√ç'}`);
      console.log(`      - keypath: ${cert.keypath || 'CHYB√ç'}`);
      console.log(`      - pempath: ${cert.pempath || 'CHYB√ç'}`);
      
      if (cert.fullId === null || cert.fullId === undefined) {
        availableCount++;
      }
      
      // Kontrola spr√°vn√Ωch cest
      if (cert.pempath && cert.pempath.includes('original/apple-wallet/passCert.pem')) {
        hasCorrectPaths = true;
      }
    });
    
    console.log(`\n   üìä Statistiky:`);
    console.log(`      - Voln√Ωch certifik√°t≈Ø: ${availableCount}`);
    console.log(`      - Spr√°vn√© cesty k certifik√°t≈Øm: ${hasCorrectPaths ? '‚úÖ ANO' : '‚ùå NE'}`);
    
    if (availableCount === 0) {
      console.log(`\n   ‚ö†Ô∏è  VAROV√ÅN√ç: ≈Ω√°dn√© voln√© certifik√°ty!`);
      return;
    }
    
    if (!hasCorrectPaths) {
      console.log(`\n   ‚ö†Ô∏è  VAROV√ÅN√ç: Certifik√°ty nemaj√≠ spr√°vn√© cesty!`);
      console.log(`      Oƒçek√°van√© cesty: original/apple-wallet/passCert.pem, original/apple-wallet/privatekey.key`);
    }
    
    // 2. Test vol√°n√≠ assignCertificate API
    console.log(`\nüåê 2. Test vol√°n√≠ assignCertificate API:`);
    
    // Vygenerujeme testovac√≠ UUID
    const testUUID = generateTestUUID();
    console.log(`   Pou≈æ√≠v√°m testovac√≠ fullId: ${testUUID}`);
    
    try {
      const response = await fetch('https://us-central1-vernostkarty-db.cloudfunctions.net/assignCertificate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ fullId: testUUID })
      });
      
      console.log(`   Status odpovƒõdi: ${response.status}`);
      
      if (response.ok) {
        const result = await response.json();
        console.log(`   ‚úÖ √öspƒõ≈°n√° odpovƒõƒè:`, result);
        
        // 3. Ovƒõ≈ôen√≠ v Firebase
        console.log(`\nüî• 3. Ovƒõ≈ôen√≠ z√°pisu do Firebase:`);
        // Toto by vy≈æadovalo Firebase Admin inicializaci, tak≈æe jen logujeme
        console.log(`   Mƒõl by b√Ωt vytvo≈ôen/aktualizov√°n dokument: cardzapier/${testUUID}`);
        console.log(`   S hodnotami: keypath, pempath, passTypeIdentifier`);
        
      } else {
        const errorText = await response.text();
        console.log(`   ‚ùå Chyba API: ${response.status} - ${errorText}`);
      }
      
    } catch (error) {
      console.log(`   ‚ùå Chyba p≈ôi vol√°n√≠ API: ${error.message}`);
    }
    
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi testu:', error);
  }
}

function generateTestUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

// Spu≈°tƒõn√≠ testu
testAssignCertificateSystem();
