// Praktick√Ω test funkƒçnosti refaktorovan√Ωch funkc√≠ s re√°ln√Ωmi daty
const certificateHelperVernostkarty = require('./vernostkarty/functions/certificateHelperV2');
const certificateHelperDb = require('./vernostkarty-db/functions/certificateHelperV2');

async function practicalFunctionalityTest() {
  console.log('üß™ PRAKTICK√ù TEST FUNKƒåNOSTI S RE√ÅLN√ùMI DATY');
  console.log('‚ïê'.repeat(60));
  
  const testResults = {
    vernostkarty: { passed: 0, failed: 0 },
    vernostkartyDb: { passed: 0, failed: 0 },
    issues: []
  };
  
  const cafeId = '1cf87e2e-e29a-4734-9e9a-ffa03fbd8029'; // original cafeId
  
  try {
    // Test 1: vernostkarty certificateHelperV2
    console.log('\n1Ô∏è‚É£ Test vernostkarty certificateHelperV2 funkc√≠...');
    console.log('‚îÄ'.repeat(50));
    
    try {
      // Test naƒç√≠t√°n√≠ cest z Datastore
      console.log('üîç Test getCertificatePathsByCafeId...');
      const paths1 = await certificateHelperVernostkarty.getCertificatePathsByCafeId(cafeId);
      
      if (paths1 && paths1.p12Path && paths1.wwdrPath) {
        console.log(`‚úÖ Cesty naƒçteny: p12=${paths1.p12Path}, wwdr=${paths1.wwdrPath}`);
        testResults.vernostkarty.passed++;
      } else {
        console.log('‚ùå Neplatn√© cesty k certifik√°t≈Øm');
        testResults.vernostkarty.failed++;
        testResults.issues.push('vernostkarty: Invalid certificate paths');
      }
      
      // Test naƒç√≠t√°n√≠ certifik√°t≈Ø z Cloud Storage
      console.log('üîç Test getAppleCertificatesByCafeId...');
      const certs1 = await certificateHelperVernostkarty.getAppleCertificatesByCafeId(cafeId);
      
      if (certs1 && certs1.p12Buffer && certs1.wwdrBuffer && 
          certs1.p12Buffer.length > 0 && certs1.wwdrBuffer.length > 0) {
        console.log(`‚úÖ Certifik√°ty naƒçteny: p12=${certs1.p12Buffer.length}B, wwdr=${certs1.wwdrBuffer.length}B`);
        testResults.vernostkarty.passed++;
      } else {
        console.log('‚ùå Neplatn√© certifik√°ty');
        testResults.vernostkarty.failed++;
        testResults.issues.push('vernostkarty: Invalid certificate buffers');
      }
      
      // Test Firebase credentials
      console.log('üîç Test getFirebaseCredentials...');
      const firebaseCreds1 = certificateHelperVernostkarty.getFirebaseCredentials('main');
      
      if (firebaseCreds1 && firebaseCreds1.project_id && firebaseCreds1.client_email) {
        console.log(`‚úÖ Firebase credentials: project=${firebaseCreds1.project_id}`);
        testResults.vernostkarty.passed++;
      } else {
        console.log('‚ùå Neplatn√© Firebase credentials');
        testResults.vernostkarty.failed++;
        testResults.issues.push('vernostkarty: Invalid Firebase credentials');
      }
      
    } catch (error) {
      console.log(`‚ùå Chyba v vernostkarty testech: ${error.message}`);
      testResults.vernostkarty.failed++;
      testResults.issues.push(`vernostkarty error: ${error.message}`);
    }
    
    // Test 2: vernostkarty-db certificateHelperV2
    console.log('\n2Ô∏è‚É£ Test vernostkarty-db certificateHelperV2 funkc√≠...');
    console.log('‚îÄ'.repeat(50));
    
    try {
      // Test naƒç√≠t√°n√≠ cest z Datastore
      console.log('üîç Test getCertificatePathsByCafeId...');
      const paths2 = await certificateHelperDb.getCertificatePathsByCafeId(cafeId);
      
      if (paths2 && paths2.p12Path && paths2.wwdrPath) {
        console.log(`‚úÖ Cesty naƒçteny: p12=${paths2.p12Path}, wwdr=${paths2.wwdrPath}`);
        testResults.vernostkartyDb.passed++;
      } else {
        console.log('‚ùå Neplatn√© cesty k certifik√°t≈Øm');
        testResults.vernostkartyDb.failed++;
        testResults.issues.push('vernostkarty-db: Invalid certificate paths');
      }
      
      // Test naƒç√≠t√°n√≠ certifik√°t≈Ø z Cloud Storage
      console.log('üîç Test getAppleCertificatesByCafeId...');
      const certs2 = await certificateHelperDb.getAppleCertificatesByCafeId(cafeId);
      
      if (certs2 && certs2.p12Buffer && certs2.wwdrBuffer && 
          certs2.p12Buffer.length > 0 && certs2.wwdrBuffer.length > 0) {
        console.log(`‚úÖ Certifik√°ty naƒçteny: p12=${certs2.p12Buffer.length}B, wwdr=${certs2.wwdrBuffer.length}B`);
        testResults.vernostkartyDb.passed++;
      } else {
        console.log('‚ùå Neplatn√© certifik√°ty');
        testResults.vernostkartyDb.failed++;
        testResults.issues.push('vernostkarty-db: Invalid certificate buffers');
      }
      
      // Test Firebase credentials
      console.log('üîç Test getFirebaseCredentials...');
      const firebaseCreds2 = certificateHelperDb.getFirebaseCredentials('main');
      
      if (firebaseCreds2 && firebaseCreds2.project_id && firebaseCreds2.client_email) {
        console.log(`‚úÖ Firebase credentials: project=${firebaseCreds2.project_id}`);
        testResults.vernostkartyDb.passed++;
      } else {
        console.log('‚ùå Neplatn√© Firebase credentials');
        testResults.vernostkartyDb.failed++;
        testResults.issues.push('vernostkarty-db: Invalid Firebase credentials');
      }
      
    } catch (error) {
      console.log(`‚ùå Chyba v vernostkarty-db testech: ${error.message}`);
      testResults.vernostkartyDb.failed++;
      testResults.issues.push(`vernostkarty-db error: ${error.message}`);
    }
    
    // Test 3: Ovƒõ≈ôen√≠ konzistence dat mezi projekty
    console.log('\n3Ô∏è‚É£ Test konzistence dat mezi projekty...');
    console.log('‚îÄ'.repeat(50));
    
    try {
      const paths1 = await certificateHelperVernostkarty.getCertificatePathsByCafeId(cafeId);
      const paths2 = await certificateHelperDb.getCertificatePathsByCafeId(cafeId);
      
      if (paths1.p12Path === paths2.p12Path && paths1.wwdrPath === paths2.wwdrPath) {
        console.log('‚úÖ Cesty k certifik√°t≈Øm jsou konzistentn√≠ mezi projekty');
      } else {
        console.log('‚ùå Nekonzistentn√≠ cesty k certifik√°t≈Øm mezi projekty');
        testResults.issues.push('Inconsistent certificate paths between projects');
      }
      
      const certs1 = await certificateHelperVernostkarty.getAppleCertificatesByCafeId(cafeId);
      const certs2 = await certificateHelperDb.getAppleCertificatesByCafeId(cafeId);
      
      if (certs1.p12Buffer.equals(certs2.p12Buffer) && certs1.wwdrBuffer.equals(certs2.wwdrBuffer)) {
        console.log('‚úÖ Certifik√°ty jsou identick√© mezi projekty');
      } else {
        console.log('‚ùå Neidentick√© certifik√°ty mezi projekty');
        testResults.issues.push('Different certificate content between projects');
      }
      
    } catch (error) {
      console.log(`‚ùå Chyba v testu konzistence: ${error.message}`);
      testResults.issues.push(`Consistency test error: ${error.message}`);
    }
    
  } catch (error) {
    console.log(`‚ùå Fat√°ln√≠ chyba v testech: ${error.message}`);
    testResults.issues.push(`Fatal error: ${error.message}`);
  }
  
  // V√Ωsledky
  console.log('\n' + '‚ïê'.repeat(60));
  console.log('üìä V√ùSLEDKY PRAKTICK√âHO TESTU:');
  console.log(`üîπ vernostkarty: ‚úÖ ${testResults.vernostkarty.passed} | ‚ùå ${testResults.vernostkarty.failed}`);
  console.log(`üîπ vernostkarty-db: ‚úÖ ${testResults.vernostkartyDb.passed} | ‚ùå ${testResults.vernostkartyDb.failed}`);
  
  const totalPassed = testResults.vernostkarty.passed + testResults.vernostkartyDb.passed;
  const totalFailed = testResults.vernostkarty.failed + testResults.vernostkartyDb.failed;
  
  console.log(`üìã Celkem: ‚úÖ ${totalPassed} | ‚ùå ${totalFailed}`);
  
  if (testResults.issues.length > 0) {
    console.log('\nüö® NALEZEN√â PROBL√âMY:');
    testResults.issues.forEach((issue, index) => {
      console.log(`${index + 1}. ${issue}`);
    });
  }
  
  if (totalFailed === 0) {
    console.log('\nüéâ V≈†ECHNY PRAKTICK√â TESTY PRO≈†LY!');
    console.log('‚úÖ Refaktorovan√Ω syst√©m je plnƒõ funkƒçn√≠ s re√°ln√Ωmi daty.');
    console.log('‚úÖ Dynamick√© naƒç√≠t√°n√≠ certifik√°t≈Ø podle cafeId funguje spr√°vnƒõ.');
    console.log('‚úÖ Oba projekty pou≈æ√≠vaj√≠ stejn√© certifik√°ty a cesty.');
  } else {
    console.log('\n‚ö†Ô∏è  NƒöKTER√â PRAKTICK√â TESTY SELHALY!');
  }
  
  return { totalPassed, totalFailed, issues: testResults.issues };
}

// Spu≈°tƒõn√≠ praktick√©ho testu
practicalFunctionalityTest().then(results => {
  process.exit(results.totalFailed > 0 ? 1 : 0);
}).catch(error => {
  console.error('‚ùå Praktick√Ω test selhal s chybou:', error);
  process.exit(1);
});
