<!DOCTYPE html>
<html lang="cs">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Věrnostní karta – Nastavení (krok: barva)</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Plaster&family=Rubik+Spray+Paint&family=Staatliches&family=Coiny&display=swap" rel="stylesheet">
  <style>
    /* RESET */
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      background: transparent;
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Inter, Helvetica, Arial, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 16px;
    }
    /* h1 uses default system fonts */

    /* Custom font (user-provided) */
    @font-face {
      font-family: 'tan-nimbus-2-webfont';
      src: url('mojefonty/webfontkit-20250823-064711/tan-nimbus_2-webfont.woff2') format('woff2'),
           url('https://adamkolaru-ops.github.io/mojefonty/webfontkit-20250823-064711/tan-nimbus_2-webfont.woff2') format('woff2');
      font-weight: normal;
      font-style: normal;
      font-display: swap;
    }

    /* WRAPPER */
    :root { --ui-scale: 1; }
    /* Scaled root wraps the whole builder so we can scale everything at once */
    #scaleRoot {
      transform: scale(var(--ui-scale));
      transform-origin: top center;
      width: 100%; /* PC layout: využij šířku */
      margin: 0 auto;
    }
    .builder-wrap {
      /* PC layout: dvousloupcový grid */
      width: 100%;
      display: grid;
      grid-template-columns: 360px minmax(520px, 1fr);
      gap: 24px;
      align-items: start;
    }

    /* (PC) Scale control removed */

    /* TELEFON + FAKE CARD (1:1 dle WIX.txt) */
    .phone-container {
      grid-column: 1;
      position: relative;
      width: 300px; /* shodné s šířkou obrázku telefonu, kvůli centrování overlaye */
      margin: 0 auto; /* centrovat kontejner v builderu */
      margin-bottom: 0; /* držet kartu co nejblíž k otázkám */
    }
    .phone-image {
      width: 300px;
      display: block;
      margin: 0 auto; /* centrovat telefon v builderu */
    }
    .fake-card {
      position: absolute;
      top: 76px;
      left: 50%;
      transform: translateX(-50%); /* centrovat overlay na střed telefonu */
      width: 257px;
      height: 363px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 0 2px rgba(0,0,0,0.3);
      pointer-events: none;
      overflow: hidden;
    }
    /* Ukázkový rotující náhled před zahájením tvorby */
    .example-preview {
      position: absolute;
      top: 76px;
      left: 50%;
      transform: translateX(-50%);
      width: 257px;
      height: 363px;
      object-fit: cover;
      object-position: center;
      border-radius: 8px;
      box-shadow: 0 0 2px rgba(0,0,0,0.3);
      z-index: 1; /* ensure preview shows above phone image */
    }
    /* LOGO-SLOT */
    .logo-slot {
      position: absolute;
      top: 10px;
      left: 10px;
      width: 120px;
      height: 45px;
      display: flex;
      align-items: center;
      justify-content: flex-start;
      overflow: hidden;
      padding-left: 2px;
    }
    .logo-img { max-width: 100%; max-height: 100%; object-fit: contain; object-position: left center; }
    .logo-text { white-space: pre-wrap; font-weight: bold; margin: 0; padding: 0; overflow: hidden; text-align: left; }
    /* Controls (step 2) */
    .mini-label { font-size:12px; color:#374151; }
    .toggle-group, .align-group { display:flex; align-items:center; gap:6px; }
    .toggle-btn, .align-btn {
      appearance:none; border:1px solid #e5e7eb; background:#f9fafb; color:#111827;
      padding:6px 8px; border-radius:8px; cursor:pointer; font-size:12px; font-weight:600;
    }
    .toggle-btn.selected, .align-btn.selected { border-color:#4f46e5; background:#eef2ff; color:#1f2a6b; }
    .align-icons { display:flex; gap:6px; }
    .align-btn svg { width:16px; height:16px; display:block; }

    /* Dočasný náhled v kroku 2 (překryv přes slot) */
    .top-mode-preview {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center;
      display: none;
      pointer-events: none;
      z-index: 10;
    }

    /* STRIP => #stripResultImg */
    #stripResultImg {
      position: absolute;
      left: 0;
      top: 61px; /* fallback mid-band between logo and bottom area */
      width: 100%;
      height: 90px; /* fallback band height; final height is set dynamically */
      object-fit: contain; /* show the entire pattern image without cropping */
      object-position: center;
      display: none;
      pointer-events: none;
      z-index: 0;
    }

    /* Strip canvas (drawn overlay for pattern+razítka) */
    #stripCanvas {
      position: absolute;
      left: 0;
      top: 61px; /* fallback aligned with strip image */
      width: 100%;
      height: 90px;
      display: none;
      pointer-events: none;
      z-index: 1;
    }

    /* menší QR kód */
    .qr-code {
      position: absolute;
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
      width: 96px;
      z-index: 2;
    }

    /* UŠETŘIL (vpravo) */
    .saved-amount {
      position: absolute;
      top: 170px;
      right: 10px;
      text-align: right;
      display: none;
      font-family: sans-serif;
      color: var(--discountColor, #000);
      z-index: 2;
    }
    .saved-amount .saved-label { font-size: 12px; font-weight: 600; }
    .saved-amount .saved-value { display: block; margin-top: 2px; font-size: 18px; font-weight: 700; }

    /* DISCOUNT LEVEL (vpravo nahoře) - pro procentní i revolution kartu */
    .discount-level {
      position: absolute;
      top: 22px;
      right: 10px;
      width: 95px;
      text-align: right;
      display: none;
      color: var(--discountColor, #000);
      z-index: 2;
    }
    .discount-level-rows { display: flex; justify-content: space-between; font-size: 11px; font-weight: 600; }
    .discount-level-values { display: flex; justify-content: space-between; font-size: 14px; margin-top: 2px; font-weight: 600; }
    
    /* Specifické barvy pro zobrazení Revolution statusů na kartě */
    .revolution-status-gold { color: #A47F11; font-weight: 700; }
    .revolution-status-dia { color: #6B7280; font-weight: 700; }
    .revolution-status-vip { color: #111827; font-weight: 700; }
    
    /* Styly pro přehled předpřipravených úrovní */
    .preset-levels-overview {
      display: flex;
      justify-content: center;
      gap: 30px;
      margin-top: 15px;
    }
    .preset-level {
      text-align: center;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      padding: 15px;
      width: 120px;
    }
    .preset-level-name {
      font-size: 16px;
      margin-bottom: 5px;
    }
    .preset-level-discount {
      font-size: 22px;
      font-weight: 700;
      margin: 10px 0;
    }
    .preset-level-threshold {
      font-size: 12px;
      color: #6b7280;
    }

    /* RAZÍTKA (vpravo dole) */
    .stamp-counter {
      position: absolute;
      top: 170px;
      right: 10px;
      text-align: right;
      display: none;
      font-family: sans-serif;
      color: var(--discountColor, #000);
      z-index: 2;
    }
    .stamp-counter .saved-label { font-size: 12px; font-weight: 600; }
    .stamp-counter .saved-value { display: block; margin-top: 2px; font-size: 18px; font-weight: 700; }

    /* BODY (vpravo nahoře) */
    .body-level {
      position: absolute;
      top: 22px;
      right: 10px;
      width: 95px;
      text-align: right;
      display: none;
      color: var(--discountColor, #000);
      z-index: 2;
    }
    .body-level-rows { display: flex; justify-content: flex-end; font-size: 11px; font-weight: 600; text-transform: uppercase; }
    .body-level-values { display: flex; justify-content: flex-end; font-size: 14px; margin-top: 2px; font-weight: 600; }

    /* BODY dole (vpravo) */
    .body-bottom {
      position: absolute;
      top: 170px;
      right: 10px;
      text-align: right;
      display: none;
      font-family: sans-serif;
      color: var(--discountColor, #000);
      z-index: 2;
    }
    .body-bottom .top-line { font-size: 12px; font-weight: 600; }
    .body-bottom .bottom-line { display: block; margin-top: 2px; font-size: 18px; font-weight: 700; }

    /* ZÁKAZNÍK (vlevo) */
    .customer-info {
      position: absolute;
      top: 170px;
      left: 10px;
      text-align: left;
      display: none;
      font-family: sans-serif;
      color: var(--discountColor, #000);
      z-index: 2;
    }
    .customer-info .cust-label { font-size: 12px; font-weight: 600; }
    .customer-info .cust-value { display: block; margin-top: 2px; font-size: 18px; font-weight: 700; }

    /* Text na stripu */
    .strip-text {
      position: absolute;
      display: none; /* will be toggled to flex when enabled */
      top: 61px; /* fallback to align over the strip image */
      left: 0;
      width: 100%;
      height: 90px;
      /* Use flex to control vertical placement of text (top/center/bottom) */
      display: none;
      justify-content: center;
      align-items: flex-end; /* default = bottom */
      padding: 0 10px 6px;
      box-sizing: border-box;
      text-align: center; /* horizontal centering */
      transform: none;
      pointer-events: none;
      z-index: 3;
    }

    /* Minimal controls for strip text (step 7) */
    .strip-mini { display:flex; gap:10px; justify-content:center; align-items:center; margin-top:10px; }
    .mini-group { display:flex; gap:6px; align-items:center; }
    .mini-label { font-size:11px; color:#6b7280; }
    .mini-btn { border:1px solid #e5e7eb; background:#f9fafb; border-radius:6px; padding:6px 8px; font-size:12px; cursor:pointer; }
    .mini-btn.selected { outline:2px solid #4f46e5; outline-offset:0; }
    .mini-btn:hover {
      background: #f3f4f6;
    }
    .mini-btn.selected {
      background: #3b82f6;
      color: white;
    }

    /* --- OTÁZKOVÝ PANEL (jedno pole) --- */
    .question-panel {
      grid-column: 2;
      width: 100%;
      background: #ffffff;
      border-radius: 10px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.08);
      position: relative;
      z-index: 2;
      margin-top: 5cm; /* PC: offset to align roughly with fake card center */
      border: 2px solid #d1d5db; /* výraznější ohraničení */
      padding: 6px 14px 14px; /* menší horní odsazení pro nadpis a popis */
    }
    .q-title { font-size: 16px; font-weight: 700; text-align: center; margin-bottom: 10px; }
    .q-sub { font-size: 12px; color: #6b7280; text-align: center; margin-bottom: 12px; }

    .color-row { display: flex; justify-content: center; align-items: center; gap: 12px; flex-wrap: wrap; }

    .swatch {
      width: 36px; height: 36px; border-radius: 8px; cursor: pointer; border: 2px solid transparent; transition: transform .18s, border-color .18s;
    }
    .swatch:hover { transform: translateY(-2px); }
    .swatch.selected { border-color: #4f46e5; }

    .custom-color {
      display: flex; align-items: center; gap: 6px; background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 8px; padding: 6px 8px;
    }
    .custom-color label { font-size: 12px; color: #374151; }
    .custom-color input[type="color"] { width: 28px; height: 28px; border: none; background: transparent; padding: 0; }

    .q-actions { display: flex; justify-content: center; margin-top: 12px; }
    .q-actions { display: flex; justify-content: space-between; align-items: center; gap: 8px; }
    .btn {
      appearance: none; border: none; padding: 10px 16px; border-radius: 8px; font-weight: 700; font-size: 14px;
    }
    .btn-next { background: #4f46e5; color: #fff; box-shadow: 0 4px 10px rgba(79,70,229,.25); }
    .btn-next:disabled { opacity: .6; }
    .btn-back { background: #e5e7eb; color: #111827; }

    .options-row { display: flex; justify-content: center; gap: 10px; }
    .option { padding: 10px 14px; border-radius: 10px; background: #f3f4f6; border: 1px solid #e5e7eb; cursor: pointer; font-weight: 700; color: #111827; }
    .option.selected { outline: 2px solid #4f46e5; outline-offset: 0; }
    /* Typ karty – grid a tlačítka s obrázky */
    .type-grid { display: flex; justify-content: center; align-items: center; gap: 10px; }
    .type-card {
      width: 90px; height: 90px; border-radius: 12px; border: 2px solid #e5e7eb; background: #f9fafb; overflow: hidden;
      padding: 0; cursor: pointer; display: flex; align-items: center; justify-content: center;
    }
    .type-card img { width: 100%; height: 100%; object-fit: cover; }
    .type-card.selected { border-color: #4f46e5; box-shadow: 0 0 0 2px rgba(79,70,229,0.15) inset; }
    .type-item { display:flex; flex-direction:column; align-items:center; gap:6px; }
    .type-name { font-size:12px; font-weight:700; color:#374151; }

    /* Strip carousel (portrait cards) */
    .strip-carousel-container { position: relative; display:flex; align-items:center; justify-content:center; }
    .strip-track {
      display:flex; align-items:center; gap:12px; overflow-x:auto; padding: 6px 44px; max-width: 100%;
      scroll-snap-type: x mandatory; -webkit-overflow-scrolling: touch;
    }
    .strip-track::-webkit-scrollbar { display: none; }
    .strip-card {
      width: 82px; height: 124px; border-radius: 8px; border: 2px solid #e5e7eb; background: #f9fafb; overflow: hidden;
      padding: 0; cursor: pointer; display: flex; align-items: center; justify-content: center; scroll-snap-align: start;
      transition: all 0.2s ease-in-out;
    }
    .strip-card.selected {
      border-color: #4f46e5; /* Použijeme hlavní fialovou pro konzistenci */
      transform: scale(1.05); /* Mírné zvětšení pro zdůraznění */
      box-shadow: 0 4px 12px rgba(0,0,0,0.15); /* Výraznější stín */
    }
    .strip-card img { width: 100%; height: 100%; object-fit: cover; }
    .strip-nav-btn { position:absolute; top:50%; transform: translateY(-50%); width:32px; height:32px; border-radius:50%;
      background:#ffffff; border:1px solid #e5e7eb; box-shadow:0 2px 8px rgba(0,0,0,.08); cursor:pointer; font-size:18px; font-weight:700; color:#374151;
      display:flex; align-items:center; justify-content:center; }
    .strip-nav-btn:hover { background:#f9fafb; }
    .strip-nav-btn.prev { left:6px; }
    .strip-nav-btn.next { right:6px; }
    /* (removed) stamps-layer: stamps are now rendered on the strip canvas */
    /* Compact type description under Step 4 */
    .type-desc { margin-top: 10px; padding: 10px; border: 1px solid #e5e7eb; border-radius: 8px; background: #f9fafb; }
    .type-desc p { margin: 0 0 6px 0; font-size: 12px; color: #374151; }
    .type-desc ul { margin: 6px 0 0 18px; padding: 0; font-size: 12px; color: #4b5563; }
    .type-desc-actions { display: flex; justify-content: flex-end; margin-top: 6px; }
    .type-desc .mini-btn { padding: 4px 8px; font-size: 12px; }
    
    /* Stamp option styling */
    .stamp-option {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 4px;
      padding: 8px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s;
      min-width: 60px;
    }
    .stamp-option:hover {
      border-color: #3b82f6;
      background: #f8fafc;
    }
    .stamp-option[data-selected="true"] {
      border-color: #3b82f6;
      background: #eff6ff;
    }
    .stamp-option span {
      font-size: 12px;
      font-weight: 500;
      text-align: center;
    }

    /* --- Styly pro nastavení úrovní Procentní karty --- */
    .procentni-levels-panel {
      display: flex;
      flex-direction: column;
      gap: 12px;
      margin-top: 10px;
    }
    /* Společné styly pro tabulky úrovní Procentní a Revolution karty */
    .procentni-levels-table, .revolution-levels-table {
      width: 100%;
      border-collapse: collapse;
    }
    .procentni-levels-table th, .procentni-levels-table td,
    .revolution-levels-table th, .revolution-levels-table td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #e5e7eb;
      vertical-align: middle;
    }
    .procentni-levels-table th,
    .revolution-levels-table th {
      font-weight: 600;
      background-color: #f9fafb;
      color: #4b5563;
    }
    .procentni-levels-table td.level-index,
    .revolution-levels-table td.level-index {
      font-weight: bold;
      width: 30px;
      text-align: center;
    }
    .procentni-levels-table input[type="text"],
    .procentni-levels-table input[type="number"],
    .revolution-levels-table input[type="text"],
    .revolution-levels-table input[type="number"] {
      width: 100%;
      padding: 6px 8px;
      border: 1px solid #d1d5db;
      border-radius: 4px;
      font-size: 14px;
    }
    .procentni-spending-cell {
      display: flex;
      align-items: center;
      gap: 4px;
    }
    .procentni-spending-cell span {
      font-size: 12px;
      color: #6b7280;
    }
    .procentni-controls {
      display: flex;
      justify-content: center;
      gap: 8px;
      margin-top: 8px;
    }
    .procentni-level-color {
      display: flex;
      align-items: center;
      gap: 6px;
      justify-content: center;
    }
    .procentni-level-color input[type="color"] {
      width: 24px;
      height: 24px;
      border: 1px solid #d1d5db;
      border-radius: 4px;
      padding: 1px;
      cursor: pointer;
    }
    .procentni-levels-table tr,
    .revolution-levels-table tr {
      cursor: pointer;
      transition: background-color 0.2s ease;
    }
    .procentni-levels-table tr:hover,
    .revolution-levels-table tr:hover {
      background-color: #f3f4f6;
    }
    .procentni-levels-table tr.preview-active,
    .revolution-levels-table tr.preview-active {
      background-color: #e5edff;
      border-left: 3px solid #3b82f6;
    }
  </style>
</head>
<body>
  <div id="scaleRoot">
    <div class="builder-wrap">
      <!-- scale control removed in PC layout -->
    <!-- Telefon + 1:1 fake card -->
    <div class="phone-container">
      <img 
        src="https://static.wixstatic.com/media/1cf87e_7d2b3744c04f4bf6af84a1b9868ea0b2~mv2.png"
        alt="Telefon"
        class="phone-image"
      >
      <img id="examplePreview" class="example-preview" alt="Ukázková karta"
        src="https://static.wixstatic.com/media/1cf87e_8eaa5bcd78cb47acb401966c9ab36fe4~mv2.png"
      >
      <div class="fake-card" id="fakeCard" style="display:none;">
        <!-- STRIP => #stripResultImg -->
        <img id="stripResultImg" alt="Strip náhled">
        <canvas id="stripCanvas"></canvas>

        <!-- DISCOUNT LEVEL -->
        <div class="discount-level" id="discountLevelDisplay">
          <div class="discount-level-rows">
            <div id="discountLabel1">STATUS</div>
            <div id="discountLabel2">SLEVA</div>
          </div>
          <div class="discount-level-values">
            <div id="statusVal">VIP</div>
            <div id="discountVal">10%</div>
          </div>
        </div>

        <!-- UŠETŘIL (vpravo) -->
        <div class="saved-amount" id="savedAmountDisplay">
          <span class="saved-label">Ušetřil</span>
          <span class="saved-value" id="savedVal">378 Kč</span>
        </div>

        <!-- RAZÍTKA (vpravo dole) -->
        <div class="stamp-counter" id="stampCounterDisplay">
          <span class="saved-label" id="stampLabel">Razítka</span>
          <span class="saved-value" id="stampVal">0 / 10</span>
        </div>

        <!-- BODY (vpravo nahoře) -->
        <div class="body-level" id="bodyLevelDisplay">
          <div class="body-level-rows">
            <div id="bodyLabel1">BODY</div>
          </div>
          <div class="body-level-values">
            <div id="bodyVal">0</div>
          </div>
        </div>

        <!-- BODY dole (vpravo) -->
        <div class="body-bottom" id="bodyBottomDisplay">
          <span class="top-line" id="bodyBottomTop">ZA 100B KÁVA ZDARMA</span>
          <span class="bottom-line" id="bodyBottomBot">10Kč=1BOD</span>
        </div>

        <!-- Menší QR kód (URL zachována) -->
        <img 
          src="https://static.wixstatic.com/media/1cf87e_54c7b5f266684220b9746a99b53d3ffa~mv2.png"
          alt="QR kód"
          class="qr-code"
        >

        <!-- Zákazník (vlevo) -->
        <div class="customer-info" id="customerInfo">
          <span class="cust-label">Zákazník:</span>
          <span class="cust-value" id="custName">Jan Novák</span>
        </div>

        <!-- Logo / Text -->
        <div class="logo-slot" id="logoSlot"></div>

        <!-- Dočasný překryv pro krok 2 (náhled nápis/logo) -->
        <img id="topModePreview" class="top-mode-preview" alt="Preview">

        <!-- Text na stripu -->
        <div class="strip-text" id="stripTextElem"></div>
      </div>
    </div>

    <!-- INTRO: Start wizard -->
    <!-- Intro panel odstraněn - nyní začínáme rovnou barevným výběrem -->

    <!-- KROK 1: Barva karty -->
    <div class="question-panel" data-step="1" id="step-1" style="display:none;">
      <div class="q-title">Nastavte barvu vaší karty</div>
      <div class="q-sub">Vyberte jednu z předvoleb nebo zvolte vlastní barvu</div>
      <div class="color-row">
        <!-- Neutrals -->
        <div class="swatch" style="background:#FFFFFF" title="Bílá" onclick="pickPresetColor('#FFFFFF', this)"></div>
        <div class="swatch" style="background:#F3F4F6" title="Světle šedá" onclick="pickPresetColor('#F3F4F6', this)"></div>
        <div class="swatch" style="background:#9CA3AF" title="Šedá" onclick="pickPresetColor('#9CA3AF', this)"></div>
        <div class="swatch" style="background:#6B7280" title="Tmavší šedá" onclick="pickPresetColor('#6B7280', this)"></div>
        <div class="swatch" style="background:#374151" title="Tmavá šedá" onclick="pickPresetColor('#374151', this)"></div>
        <div class="swatch" style="background:#111827" title="Černá" onclick="pickPresetColor('#111827', this)"></div>
        <!-- Reds / Warm -->
        <div class="swatch" style="background:#FEE2E2" title="Světle červená" onclick="pickPresetColor('#FEE2E2', this)"></div>
        <div class="swatch" style="background:#F43F5E" title="Růžovo-červená" onclick="pickPresetColor('#F43F5E', this)"></div>
        <div class="swatch" style="background:#EF4444" title="Červená" onclick="pickPresetColor('#EF4444', this)"></div>
        <div class="swatch" style="background:#DC2626" title="Tmavší červená" onclick="pickPresetColor('#DC2626', this)"></div>
        <div class="swatch" style="background:#F97316" title="Oranžová" onclick="pickPresetColor('#F97316', this)"></div>
        <div class="swatch" style="background:#F59E0B" title="Amber" onclick="pickPresetColor('#F59E0B', this)"></div>
        <div class="swatch" style="background:#EAB308" title="Žlutá" onclick="pickPresetColor('#EAB308', this)"></div>
        <!-- Greens -->
        <div class="swatch" style="background:#84CC16" title="Limetková" onclick="pickPresetColor('#84CC16', this)"></div>
        <div class="swatch" style="background:#22C55E" title="Zelená" onclick="pickPresetColor('#22C55E', this)"></div>
        <div class="swatch" style="background:#10B981" title="Smaragdová" onclick="pickPresetColor('#10B981', this)"></div>
        <div class="swatch" style="background:#14B8A6" title="Tyrkysová" onclick="pickPresetColor('#14B8A6', this)"></div>
        <!-- Blues -->
        <div class="swatch" style="background:#06B6D4" title="Cyan" onclick="pickPresetColor('#06B6D4', this)"></div>
        <div class="swatch" style="background:#38BDF8" title="Nebesky modrá" onclick="pickPresetColor('#38BDF8', this)"></div>
        <div class="swatch" style="background:#3B82F6" title="Modrá" onclick="pickPresetColor('#3B82F6', this)"></div>
        <div class="swatch" style="background:#2563EB" title="Tmavší modrá" onclick="pickPresetColor('#2563EB', this)"></div>
        <div class="swatch" style="background:#6366F1" title="Indigo" onclick="pickPresetColor('#6366F1', this)"></div>
        <!-- Purples -->
        <div class="swatch" style="background:#8B5CF6" title="Fialová" onclick="pickPresetColor('#8B5CF6', this)"></div>
        <div class="swatch" style="background:#A855F7" title="Purple" onclick="pickPresetColor('#A855F7', this)"></div>
        <div class="swatch" style="background:#D946EF" title="Fuchsiová" onclick="pickPresetColor('#D946EF', this)"></div>
        <div class="swatch" style="background:#EC4899" title="Růžová" onclick="pickPresetColor('#EC4899', this)"></div>
        <!-- Custom -->
        <div class="custom-color">
          <label for="customColor">Vlastní</label>
          <input type="color" id="customColor" value="#ffffff" onchange="pickCustomColor(this.value)">
        </div>
      </div>
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()" disabled>Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 2: Pravý horní roh -->
    <div class="question-panel" data-step="2" id="step-2" style="display:none;">
      <div class="q-title">Co bude v levém horním rohu?</div>
      <div class="q-sub">Zvolte text nebo logo</div>
      <div class="options-row">
        <button class="option" onclick="pickTopMode('napis', this)">Text</button>
        <button class="option" onclick="pickTopMode('logo', this)">Vlastní logo</button>
      </div>
      <!-- Inline nastavení podle volby -->
      <!-- Text nápisu (inline ve kroku 2) -->
      <div id="napisWrapper" style="display:none; justify-content:center; flex-direction:column; gap:8px; margin-top:10px;">
        <!-- Zarovnání (nad polem) -->
        <div class="align-group">
          <label class="mini-label">Zarovnání</label>
          <div class="align-icons">
            <button class="align-btn" id="alignLeftBtn" onclick="pickNapisAlign('left', this)" title="Zarovnat vlevo">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="3" y1="5" x2="21" y2="5"/>
                <line x1="3" y1="11" x2="15" y2="11"/>
                <line x1="3" y1="17" x2="18" y2="17"/>
              </svg>
            </button>
            <button class="align-btn" id="alignCenterBtn" onclick="pickNapisAlign('center', this)" title="Zarovnat na střed">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="6" y1="5" x2="18" y2="5"/>
                <line x1="4" y1="11" x2="20" y2="11"/>
                <line x1="6" y1="17" x2="18" y2="17"/>
              </svg>
            </button>
            <button class="align-btn" id="alignRightBtn" onclick="pickNapisAlign('right', this)" title="Zarovnat vpravo">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="3" y1="5" x2="21" y2="5"/>
                <line x1="9" y1="11" x2="21" y2="11"/>
                <line x1="6" y1="17" x2="21" y2="17"/>
              </svg>
            </button>
          </div>
        </div>
        <!-- Víceřádkové pole -->
        <textarea id="napisTextarea" placeholder="Zadejte text (max. 2 řádky, řádek 2 až po Enteru)" oninput="onNapisInput()" onkeydown="napisKeyDown(event)" rows="2" wrap="off" style="width:100%; padding:10px; border:1px solid #e5e7eb; border-radius:8px; resize: none; overflow-y: hidden;"></textarea>
        <div style="display:flex; align-items:center; justify-content:space-between; gap:10px; flex-wrap:wrap;">
          <div style="display:flex; align-items:center; gap:6px;">
            <label for="napisFont" style="font-size:12px; color:#374151;">Styl písma</label>
            <select id="napisFont" onchange="onNapisFontChange()" style="padding:6px 8px; border:1px solid #e5e7eb; border-radius:8px;">
              <option value="tan-nimbus-2-webfont">Karrli</option>
              <option value="Rubik Spray Paint">Rubik Spray Paint</option>
              <option value="Staatliches">Staatliches</option>
              <option value="Plaster">Plaster</option>
              <option value="Coiny">Coiny</option>
              <option value="Arial">Arial</option>
              <option value="Georgia">Georgia</option>
              <option value="Helvetica">Helvetica</option>
              <option value="Tahoma">Tahoma</option>
              <option value="Trebuchet MS">Trebuchet MS</option>
              <option value="Verdana">Verdana</option>
              <option value="Wix Bold Sans">Wix Bold Sans</option>
              <option value="Wix Handwritten">Wix Handwritten</option>
              <option value="Wix Fancy Cursive">Wix Fancy Cursive</option>
            </select>
          </div>
          <div style="display:flex; align-items:center; gap:6px;">
            <button type="button" class="toggle-btn" onclick="toggleTextPalette()" title="Vyberte barvu textu" style="font-size:13px; font-weight:700; background:#fef3c7; border-color:#f59e0b; box-shadow:0 0 0 2px rgba(245,158,11,0.15) inset;">Vyberte si barvu</button>
            <input type="color" id="napisColor" value="#000000" onchange="onNapisColorChange()" onmousedown="openTextPaletteFromColor(event)" onclick="return false;" onfocus="this.blur();" style="width: 32px; height: 32px; border:none; background:transparent; padding:0;">
          </div>
          <!-- Paleta barev pro text (stejná jako krok 1), zobrazí se po kliknutí na tlačítko -->
          <div id="textColorPalette" style="display:none; margin-top:8px;">
            <div class="color-row">
              <!-- Neutrals -->
              <div class="swatch text-swatch" style="background:#FFFFFF" title="Bílá" onclick="pickTextPresetColor('#FFFFFF', this)"></div>
              <div class="swatch text-swatch" style="background:#F3F4F6" title="Světle šedá" onclick="pickTextPresetColor('#F3F4F6', this)"></div>
              <div class="swatch text-swatch" style="background:#9CA3AF" title="Šedá" onclick="pickTextPresetColor('#9CA3AF', this)"></div>
              <div class="swatch text-swatch" style="background:#6B7280" title="Tmavší šedá" onclick="pickTextPresetColor('#6B7280', this)"></div>
              <div class="swatch text-swatch" style="background:#374151" title="Tmavá šedá" onclick="pickTextPresetColor('#374151', this)"></div>
              <div class="swatch text-swatch" style="background:#111827" title="Černá" onclick="pickTextPresetColor('#111827', this)"></div>
              <!-- Reds / Warm -->
              <div class="swatch text-swatch" style="background:#FEE2E2" title="Světle červená" onclick="pickTextPresetColor('#FEE2E2', this)"></div>
              <div class="swatch text-swatch" style="background:#F43F5E" title="Růžovo-červená" onclick="pickTextPresetColor('#F43F5E', this)"></div>
              <div class="swatch text-swatch" style="background:#EF4444" title="Červená" onclick="pickTextPresetColor('#EF4444', this)"></div>
              <div class="swatch text-swatch" style="background:#DC2626" title="Tmavší červená" onclick="pickTextPresetColor('#DC2626', this)"></div>
              <div class="swatch text-swatch" style="background:#F97316" title="Oranžová" onclick="pickTextPresetColor('#F97316', this)"></div>
              <div class="swatch text-swatch" style="background:#F59E0B" title="Amber" onclick="pickTextPresetColor('#F59E0B', this)"></div>
              <div class="swatch text-swatch" style="background:#EAB308" title="Žlutá" onclick="pickTextPresetColor('#EAB308', this)"></div>
              <!-- Greens -->
              <div class="swatch text-swatch" style="background:#84CC16" title="Limetková" onclick="pickTextPresetColor('#84CC16', this)"></div>
              <div class="swatch text-swatch" style="background:#22C55E" title="Zelená" onclick="pickTextPresetColor('#22C55E', this)"></div>
              <div class="swatch text-swatch" style="background:#10B981" title="Smaragdová" onclick="pickTextPresetColor('#10B981', this)"></div>
              <div class="swatch text-swatch" style="background:#14B8A6" title="Tyrkysová" onclick="pickTextPresetColor('#14B8A6', this)"></div>
              <!-- Blues -->
              <div class="swatch text-swatch" style="background:#06B6D4" title="Cyan" onclick="pickTextPresetColor('#06B6D4', this)"></div>
              <div class="swatch text-swatch" style="background:#38BDF8" title="Nebesky modrá" onclick="pickTextPresetColor('#38BDF8', this)"></div>
              <div class="swatch text-swatch" style="background:#3B82F6" title="Modrá" onclick="pickTextPresetColor('#3B82F6', this)"></div>
              <div class="swatch text-swatch" style="background:#2563EB" title="Tmavší modrá" onclick="pickTextPresetColor('#2563EB', this)"></div>
              <div class="swatch text-swatch" style="background:#6366F1" title="Indigo" onclick="pickTextPresetColor('#6366F1', this)"></div>
              <!-- Purples -->
              <div class="swatch text-swatch" style="background:#8B5CF6" title="Fialová" onclick="pickTextPresetColor('#8B5CF6', this)"></div>
              <div class="swatch text-swatch" style="background:#A855F7" title="Purple" onclick="pickTextPresetColor('#A855F7', this)"></div>
              <div class="swatch text-swatch" style="background:#D946EF" title="Fuchsiová" onclick="pickTextPresetColor('#D946EF', this)"></div>
              <div class="swatch text-swatch" style="background:#EC4899" title="Růžová" onclick="pickTextPresetColor('#EC4899', this)"></div>
              <!-- Custom -->
              <div class="custom-color">
                <label for="textCustomColor">Vlastní</label>
                <input type="color" id="textCustomColor" value="#000000" onchange="pickTextCustomColor(this.value)">
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- Logo upload (inline ve kroku 2) -->
      <div id="logoWrapper" style="display:none; justify-content:center; margin-top:10px;">
        <input type="file" id="logoFileInput" accept="image/*" onchange="onLogoFileChange(this)" style="width:100%; padding:10px; border:1px solid #e5e7eb; border-radius:8px;">
      </div>
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 3: Typ karty -->
    <div class="question-panel" data-step="3" id="step-3" style="display:none;">
      <div class="q-title">Vyberte vzhled stripu</div>
      <div class="q-sub">Zvolte jeden z předpřipravených stripů nebo nahrajte vlastní</div>
      <div class="strip-carousel-container" id="stripCarousel">
        <button type="button" class="strip-nav-btn prev" aria-label="Předchozí" onclick="scrollStrip(-1)">‹</button>
        <div class="strip-track" id="stripTrack">
          <button class="strip-card" data-url="https://static.wixstatic.com/media/1cf87e_2fb228538c8f4f76b7c27f489c9ec86d~mv2.png" onclick="pickStrip('https://static.wixstatic.com/media/1cf87e_2fb228538c8f4f76b7c27f489c9ec86d~mv2.png', this)" aria-label="Strip A">
            <img src="https://static.wixstatic.com/media/1cf87e_42c16166df474011b268ed32c9ac20f8~mv2.png" alt="Strip A">
          </button>
          <button class="strip-card" data-url="https://static.wixstatic.com/media/1cf87e_9e03bf4b81fc434b8525abfc5c179da2~mv2.png" onclick="pickStrip('https://static.wixstatic.com/media/1cf87e_9e03bf4b81fc434b8525abfc5c179da2~mv2.png', this)" aria-label="Strip B">
            <img src="https://static.wixstatic.com/media/1cf87e_1cda969fb17a4202b31e3a41ab485eed~mv2.png" alt="Strip B">
          </button>
          <button class="strip-card" data-url="https://static.wixstatic.com/media/1cf87e_feb21ec9d6614055ae0820b4704c1b80~mv2.png" onclick="pickStrip('https://static.wixstatic.com/media/1cf87e_feb21ec9d6614055ae0820b4704c1b80~mv2.png', this)" aria-label="Strip C">
            <img src="https://static.wixstatic.com/media/1cf87e_64d2c7ad7b6644dc96a9b0de8bebe268~mv2.png" alt="Strip C">
          </button>
          <button class="strip-card" data-url="https://static.wixstatic.com/media/1cf87e_f1c5b37e7ed548ec9d61769b2ab1bf40~mv2.png" onclick="pickStrip('https://static.wixstatic.com/media/1cf87e_f1c5b37e7ed548ec9d61769b2ab1bf40~mv2.png', this)" aria-label="Strip D">
            <img src="https://static.wixstatic.com/media/1cf87e_c50a75b5045a412293dc11dc5b39e5f3~mv2.png" alt="Strip D">
          </button>
          <button id="stripCustomBtn" class="strip-card" type="button" onclick="document.getElementById('customStripInput').click()" title="Vlastní strip">
            <span style="font-weight:700; font-size:12px; color:#374151;">Vlastní</span>
          </button>
          <input type="file" id="customStripInput" accept="image/*" style="display:none" onchange="onCustomStripFileChange(this)">
        </div>
        <button type="button" class="strip-nav-btn next" aria-label="Další" onclick="scrollStrip(1)">›</button>
      </div>

      <!-- Typ karty přesunut do kroku 4 -->
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 4: Typ karty (až po potvrzení stripu) -->
    <div class="question-panel" data-step="4" id="step-4" style="display:none;">
      <div class="q-title">Vyberte typ karty</div>
      <div class="q-sub">Zvolte jeden z typů: Revolution, Procentní, Bodová, Razítková</div>
      <div class="type-grid">
        <div class="type-item">
          <div class="type-name">Revolution <span style="color:#22c55e; font-weight:normal;">(doporučeno)</span></div>
          <button class="type-card" data-type="revolution" onclick="pickCardType('revolution', this)" aria-label="Revolution">
            <img src="https://static.wixstatic.com/media/1cf87e_7bd4c3edcda74b0c966ecb5471f14d30~mv2.png" alt="Revolution">
          </button>
        </div>
        <div class="type-item">
          <div class="type-name">Procentní</div>
          <button class="type-card" data-type="procentni" onclick="pickCardType('procentni', this)" aria-label="Procentní">
            <img src="https://static.wixstatic.com/media/1cf87e_e218f5381e0748b2ad6d1c57b337af9f~mv2.png" alt="Procentní">
          </button>
        </div>
        <div class="type-item">
          <div class="type-name">Bodová</div>
          <button class="type-card" data-type="bodova" onclick="pickCardType('bodova', this)" aria-label="Bodová">
            <img src="https://static.wixstatic.com/media/1cf87e_8c4334c0221641acb421515383310cc6~mv2.png" alt="Bodová">
          </button>
        </div>
        <div class="type-item">
          <div class="type-name">Razítková</div>
          <button class="type-card" data-type="razitkova" onclick="pickCardType('razitkova', this)" aria-label="Razítková">
            <img src="https://static.wixstatic.com/media/1cf87e_522dc8abb98b4484adf341ccdddcabd2~mv2.png" alt="Razítková">
          </button>
        </div>
      </div>
      <!-- Compact description panel -->
      <div id="typeDescPanel" class="type-desc" style="display:none;">
        <p id="typeDescShort"></p>
        <div id="typeDescMore" style="display:none;"></div>
        <div class="type-desc-actions">
          <button type="button" id="typeDescToggle" class="mini-btn" onclick="toggleTypeDesc()">Více informací</button>
        </div>
      </div>
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 5: Podmíněný krok – Razítka režim NEBO Bodová nastavení -->
    <div class="question-panel" data-step="5" id="step-5" style="display:none;">
      <!-- Razítková: výběr režimu -->
      <div id="step5StampModePanel" style="display:none;">
        <div class="q-title">Razítka – vyberte způsob</div>
        <div class="q-sub">Zvolte jak chcete razítka nastavit</div>
        <div class="options-row" style="justify-content:center;">
          <button type="button" id="stampModePresetBtn" class="option" onclick="pickStampMode('preset', this)">Předpřipravené (doporučujeme)</button>
          <button type="button" id="stampModeStandardBtn" class="option" onclick="pickStampMode('standard', this)">Standardní</button>
          <button type="button" id="stampModePerBtn" class="option" onclick="pickStampMode('perStamp', this)">Vlastní pro každé</button>
        </div>
        <div id="stampPresetNote" style="display:none; margin-top:8px; font-size:12px; color:#6b7280; text-align:center;">Režim "Předpřipravené" je v přípravě.</div>
        <div id="stampPerNote" style="display:none; margin-top:8px; font-size:12px; color:#6b7280; text-align:center;">Režim "Vlastní pro každé": V dalším kroku nastavíte počet razítek (1–20) a nahrajete strip pro každý stav (0 = bez razítek, 1 = po 1. razítku, …, N = po N. razítku).</div>
      </div>

      <!-- Bodová: nastavení směnného kurzu a textů -->
      <div id="step5BodovaPanel" style="display:none;">
        <div class="q-title">Bodová karta – nastavení</div>
        <div class="q-sub">Zadejte směnný kurz a texty, které se zobrazí v náhledu karty.</div>
        <div style="display:flex; gap:16px; justify-content:center; align-items:flex-end; flex-wrap:wrap; margin-top:8px;">
          <div style="display:flex; flex-direction:column; gap:6px;">
            <label style="font-size:13px; color:#374151; font-weight:600; text-align:center;">Směnný kurz</label>
            <div style="display:flex; align-items:center; gap:8px; justify-content:center;">
              <input type="number" id="bodPointsInput" min="1" value="1" oninput="onBodPointsChange(this)" style="width:80px; height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
              <span style="font-weight:600; color:#374151;">BODŮ =</span>
              <input type="number" id="bodRateInput" min="1" value="10" oninput="onBodRateChange(this)" style="width:80px; height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
              <span style="font-weight:600; color:#374151;">Kč</span>
            </div>
          </div>
          <div style="display:flex; flex-direction:column; gap:6px; min-width:260px;">
            <label style="font-size:13px; color:#374151; font-weight:600;">Horní řádek (malý text)</label>
            <input type="text" id="bodTopTextInput" placeholder="Např. ZA 100B KÁVA ZDARMA" oninput="onBodTopTextInput()" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px;">
          </div>
          <div style="display:flex; flex-direction:column; gap:6px; min-width:260px;">
            <label style="font-size:13px; color:#374151; font-weight:600;">Spodní řádek (kurz nebo poznámka)</label>
            <input type="text" id="bodBottomTextInput" placeholder="Např. 10Kč=1BOD" oninput="onBodBottomTextInput()" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px;">
          </div>
        </div>
        <div style="text-align:center; margin-top:8px; font-size:12px; color:#6b7280;">Změny se okamžitě projeví v náhledu karty vpravo.</div>
      </div>

      <div id="step5ProcentniPanel" style="display:none;">
        <div class="q-title">Procentní karta – Nastavení úrovní</div>
        <div class="q-sub">Nastavte slevy podle celkové útraty zákazníka.</div>
        <div class="procentni-levels-panel">
          <table class="procentni-levels-table">
            <thead>
              <tr>
                <th>Úroveň</th>
                <th>Název statusu</th>
                <th>Sleva (%)</th>
                <th>Celková útrata (Kč)</th>
                <th>Barva karty</th>
              </tr>
            </thead>
            <tbody id="procentniLevelsContainer">
            </tbody>
          </table>
          <div class="procentni-controls">
            <button type="button" class="mini-btn" onclick="addProcentniLevel()">+ Přidat úroveň</button>
            <button type="button" class="mini-btn" id="removeProcentniLevelBtn" onclick="removeProcentniLevel()">– Odebrat</button>
          </div>
        </div>
      </div>

      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <div class="question-panel" data-step="5.5" id="step-5b" style="display:none;">
      <div class="q-title">Revolution – Vyberte si nastavení</div>
      <div class="q-sub">Zvolte jednu z předpřipravených šablon nebo si vytvořte vlastní.</div>
      <div class="options-row" style="justify-content:center;">
        <button type="button" class="option" onclick="pickRevolutionMode('preset', this)">Předpřipravené (doporučeno)</button>
        <button type="button" class="option" onclick="pickRevolutionMode('custom', this)">Vlastní návrh</button>
      </div>

      <div id="revolutionPresetNote" style="display:none; margin-top:20px; text-align:center;">
        <div style="margin-bottom:15px; font-size:15px;">
          <strong>Výchozí úrovně karty Revolution</strong>
        </div>
        <div class="preset-levels-overview">
          <div class="preset-level">
            <div class="preset-level-name revolution-status-gold">GOLD</div>
            <div class="preset-level-discount">7%</div>
            <div class="preset-level-threshold">od 2 000 Kč</div>
          </div>
          <div class="preset-level">
            <div class="preset-level-name revolution-status-dia">DIA</div>
            <div class="preset-level-discount">10%</div>
            <div class="preset-level-threshold">od 6 000 Kč</div>
          </div>
          <div class="preset-level">
            <div class="preset-level-name revolution-status-vip">VIP</div>
            <div class="preset-level-discount">13%</div>
            <div class="preset-level-threshold">od 10 000 Kč</div>
          </div>
        </div>
      </div>

      <div id="revolutionCustomPanel" style="display:none; margin-top: 15px;">

        <div id="revolutionNoProgressPanel">
          <div class="procentni-levels-panel">
            <table class="procentni-levels-table">
              <thead>
                <tr>
                  <th>Úroveň</th>
                  <th>Název statusu</th>
                  <th>Sleva (%)</th>
                  <th>Cílová částka (Kč)</th>
                  <th>Barva karty</th>
                </tr>
              </thead>
              <tbody id="revolutionLevelsContainer"></tbody>
            </table>
            <div class="procentni-controls">
              <button type="button" class="mini-btn" onclick="addRevolutionLevel()">+ Přidat úroveň</button>
              <button type="button" class="mini-btn" id="removeRevolutionLevelBtn" onclick="removeRevolutionLevel()">– Odebrat</button>
            </div>
          </div>
        </div>


      </div>
      
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <div class="question-panel" data-step="5.6" id="step-5c" style="display:none;">
      <div class="q-title">Revolution – Vizuální progres</div>
      <div class="q-sub">Chcete zákazníkům zobrazovat vizuální progres k získání odměny?</div>
      <div class="options-row" style="margin-top: 15px;">
        <button type="button" class="option" onclick="pickRevolutionProgress(true, this)">Ano, chci nahrát vlastní grafiku</button>
        <button type="button" class="option" onclick="pickRevolutionProgress(false, this)">Ne, stačí textový status</button>
      </div>

      <div id="revolutionWithProgressPanel" style="display:none;">
        <div class="q-sub" style="margin-bottom: 15px;">Zvolte typ grafiky pro zobrazení progresu.</div>
        <div class="options-row">
          <button type="button" class="option" onclick="pickRevolutionGfxMode('preset', this)">Předpřipravené</button>
          <button type="button" class="option" onclick="pickRevolutionGfxMode('custom', this)">Vlastní grafika</button>
        </div>

        <div id="revolutionGfxPresetNote" style="display:none; margin-top:15px; text-align:center; font-size:12px; color:#6b7280;">
          Tato možnost je v přípravě.
        </div>

        <div id="revolutionGfxCustomPanel" style="display:none; margin-top:15px; border-top: 1px solid #e5e7eb; padding-top: 15px;">
          <div style="display:flex; flex-direction:column; gap:12px; align-items: center;">
                          <div style="display:flex; flex-wrap:wrap; gap: 20px; align-items: flex-end; justify-content: center;">
              <div>
                <label style="font-size:13px; font-weight:600; color:#374151;">Min. částka pro výběr (Kč)</label>
                <input type="number" id="revBonusMinAmount" value="500" min="1" style="width:150px; text-align:center; height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; margin-top: 5px;">
              </div>
              <div>
                <label style="font-size:13px; font-weight:600; color:#374151;">Počet milníků (obrázků)</label>
                <input type="number" id="revMilestoneCount" value="11" min="2" max="20" style="width:150px; text-align:center; height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; margin-top: 5px;">
              </div>
              <div style="display:flex; flex-direction:column; gap:6px;">
                <label style="font-size:13px; color:#374151; font-weight:600;">Náhled a stažení</label>
                <div style="display:flex; gap:8px; align-items:center;">
                  <select id="revMilestoneStepSelect" onchange="onRevolutionGfxStepChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px;"></select>
                  <a id="revGfxDownloadBtn" href="#" download="progress.png" class="mini-btn" onclick="return onRevolutionGfxDownloadClick(event)">Stáhnout</a>
                </div>
              </div>
            </div>
            <div id="revMilestoneCalc" style="font-size:12px; color:#6b7280; text-align:center; min-height: 18px;"></div>
            <div style="display:flex; justify-content:center; margin-bottom:12px;">
              <img id="revGfxTopPreview" alt="Náhled progresu" style="max-width:100%; height:auto; border:1px solid #e5e7eb; border-radius:8px; display: none;">
            </div>
            <div id="revGfxUploads" style="width:100%; display:grid; grid-template-columns:repeat(auto-fit, minmax(220px, 1fr)); gap:12px; align-items:start; margin-top:10px;"></div>
          </div>
        </div>
      </div>
      
       <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 6: Podmíněný krok
         - Pokud Razítková + Standardní: detailní nastavení razítek
         - Jinak: Zobrazovat text na stripu? -->
    <div class="question-panel" data-step="6" id="step-6" style="display:none;">
      <div id="step6StampStandard" style="display:none;">
        <div class="q-title">Razítka – standardní nastavení</div>
        
        <div class="q-sub" style="margin-bottom:8px;">Maximální počet razítek (1–20)</div>
        <div style="display:flex; gap:8px; justify-content:center; align-items:center; margin-bottom:16px;">
          <input type="number" id="stampTotalInput" min="1" max="20" value="10" oninput="onStampTotalChange(this)" style="width:90px; padding:8px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
        </div>

        <div class="q-sub" style="margin-bottom:8px;">Design razítka</div>
        <div style="display:flex; gap:8px; justify-content:center; align-items:center; flex-wrap:wrap; margin-bottom:16px;">
          <div class="stamp-option" onclick="pickStampIcon('https://static.wixstatic.com/media/1cf87e_f7284a8ad6d1438c9e79eb3d0818890a~mv2.png', this)" data-selected="true">
            <img src="https://static.wixstatic.com/media/1cf87e_f7284a8ad6d1438c9e79eb3d0818890a~mv2.png" alt="Výchozí" style="width:32px; height:32px; border-radius:4px;">
            <span>Výchozí</span>
          </div>
          <div class="stamp-option" onclick="pickStampIcon('https://static.wixstatic.com/media/1cf87e_b902bf7ff01d45679dc1964eedc548d2~mv2.png', this)">
            <img src="https://static.wixstatic.com/media/1cf87e_b902bf7ff01d45679dc1964eedc548d2~mv2.png" alt="Káva" style="width:32px; height:32px; border-radius:4px;">
            <span>Káva</span>
          </div>
          <div class="stamp-option" onclick="pickStampIcon('https://static.wixstatic.com/media/1cf87e_4f9563aebb5d4391ab392f456c1f8c74~mv2.png', this)">
            <img src="https://static.wixstatic.com/media/1cf87e_4f9563aebb5d4391ab392f456c1f8c74~mv2.png" alt="Hvězda" style="width:32px; height:32px; border-radius:4px;">
            <span>Hvězda</span>
          </div>
          <div class="stamp-option custom-upload">
            <input type="file" id="stampIconFile" accept="image/*" onchange="onStampCustomIconChange(this)" style="display:none;">
            <div onclick="document.getElementById('stampIconFile').click()" style="width:32px; height:32px; border:2px dashed #ccc; border-radius:4px; display:flex; align-items:center; justify-content:center; cursor:pointer;">
              <span style="font-size:18px; color:#999;">+</span>
            </div>
            <span>Vlastní</span>
          </div>
        </div>

        <div style="display:flex; gap:16px; justify-content:center; align-items:flex-end; flex-wrap:wrap; margin-top:8px;">
          <div style="display:flex; flex-direction:column; gap:6px; min-width:160px;">
            <label style="font-size:13px; color:#374151; font-weight:600;">Velikost razítka (px)</label>
            <input type="number" id="stampSizeInput" min="1" value="44" oninput="onStampSizeChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
          </div>
          <div style="display:flex; flex-direction:column; gap:6px; min-width:160px;">
            <label style="font-size:13px; color:#374151; font-weight:600;">Rozestup mezi razítky (px)</label>
            <input type="number" id="stampGapInput" min="2" max="30" value="2" oninput="onStampGapChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
          </div>
          <div style="display:flex; flex-direction:column; gap:6px; min-width:160px;">
            <label style="font-size:13px; color:#374151; font-weight:600;">Průhlednost razítka (%)</label>
            <input type="number" id="stampOpacityInput" min="0" max="100" value="100" oninput="onStampOpacityChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
          </div>
        </div>

        </div>
        
        <div id="step6StampPer" style="display:none;">
          <div class="q-title">Razítka – Vlastní pro každé</div>
          <div class="q-sub">Zadejte počet razítek (1–20) a nahrajte obrázky stripu pro každý stav (0 až N).</div>
          <div style="display:flex; gap:12px; justify-content:center; align-items:flex-end; flex-wrap:wrap; margin-bottom:12px;">
            <div style="display:flex; flex-direction:column; gap:6px; min-width:160px;">
              <label style="font-size:13px; color:#374151; font-weight:600;">Počet razítek (1–20)</label>
              <input type="number" id="perStampTotalInput" min="1" max="20" value="10" oninput="onPerStampTotalChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
            </div>
            <div style="display:flex; flex-direction:column; gap:6px; min-width:220px;">
              <label style="font-size:13px; color:#374151; font-weight:600;">Náhled a stažení</label>
              <div style="display:flex; gap:8px; align-items:center;">
                <select id="perStripStepSelect" onchange="onPerStripStepChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px;"></select>
                <a id="perStripDownloadBtn" href="#" download="strip.png" class="mini-btn" onclick="return onPerStripDownloadClick(event)">Stáhnout</a>
              </div>
            </div>
          </div>
          <div style="text-align:center; margin-bottom:8px; font-size:12px; color:#6b7280;">
            Nejprve nahrajte obrázek stripu bez razítek (stav 0). Poté nahrajte, jak vypadá strip po přidání 1., 2., … razítka.
          </div>
          <div style="display:flex; justify-content:center; margin-bottom:12px;">
            <img id="perStripTopPreview" alt="Náhled stripu" style="max-width:100%; height:auto; border:1px solid #e5e7eb; border-radius:8px;">
          </div>
          <div id="perStripUploads" style="display:grid; grid-template-columns:repeat(auto-fit, minmax(220px, 1fr)); gap:12px; align-items:start;"></div>
        </div>

        <div id="step6StripPanel">
        <div class="q-title">Zobrazovat text na stripu?</div>
        <div class="q-sub">Vyberte možnost</div>
        <div class="options-row">
          <button class="option" onclick="pickShowStrip(true, this)">Ano</button>
          <button class="option" onclick="pickShowStrip(false, this)">Ne</button>
        </div>
      </div>

      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 7: Ohraničení razítek -->
    <div class="question-panel" data-step="7" id="step-7" style="display:none;">
      <div class="q-title">Nastavení ohraničení</div>
      <div class="q-sub">Chcete u razítek zobrazovat ohraničení?</div>
      <div class="options-row">
        <button id="borderToggleYes" class="option" onclick="pickStampBorderEnabled(true, this)">Zobrazovat ohraničení</button>
        <button id="borderToggleNo" class="option" onclick="pickStampBorderEnabled(false, this)">Nezobrazovat ohraničení</button>
      </div>
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <div class="question-panel" data-step="7.5" id="step-7b" style="display:none;">
        <div class="q-title">Vzhled ohraničení</div>
        <div class="q-sub">Zvolte, jak chcete ohraničení zobrazit v náhledu.</div>
        <div class="options-row" style="margin-bottom:14px;">
            <button class="option selected" onclick="setStampPreviewMode('partial', this)">Zobrazit částečně</button>
            <button class="option" onclick="setStampPreviewMode('none', this)">Zobrazit bez razítek</button>
            <button class="option" onclick="setStampPreviewMode('all', this)">Zobrazit s razítky</button>
        </div>
        <div id="stampBorderPanel" style="display:block;">
            <div class="q-sub" style="margin-bottom:8px;">Tvar ohraničení</div>
            <div class="options-row" style="margin-bottom:12px;">
                <button id="borderShapeOutlineBtn" class="option selected" onclick="pickStampBorderShape('outline', this)" title="Obrys" aria-label="Obrys">
                    <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg" style="display:block;">
                        <path d="M14 24C19.5228 24 24 19.5228 24 14C24 8.47715 19.5228 4 14 4C8.47715 4 4 8.47715 4 14C4 19.5228 8.47715 24 14 24ZM14 21C17.866 21 21 17.866 21 14C21 10.134 17.866 7 14 7C10.134 7 7 10.134 7 14C7 17.866 10.134 21 14 21Z" fill="currentColor"/>
                    </svg>
                </button>
                <button id="borderShapeIconBtn" class="option" onclick="pickStampBorderShape('icon', this)" title="Silueta razítka" aria-label="Silueta razítka">
                    <img id="borderShapeIconImg" src="" alt="Silueta razítka" style="display:block; width:28px; height:28px; object-fit:contain;" />
                </button>
                <button id="borderShapeCircleBtn" class="option" onclick="pickStampBorderShape('circle', this)" title="Kruh" aria-label="Kruh">
                    <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg" style="display:block;">
                        <circle cx="14" cy="14" r="10" stroke="currentColor" stroke-width="2" fill="none" />
                    </svg>
                </button>
                <button id="borderShapeRoundedBtn" class="option" onclick="pickStampBorderShape('rounded', this)" title="Zaoblený čtverec" aria-label="Zaoblený čtverec">
                    <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg" style="display:block;">
                        <rect x="6" y="6" width="16" height="16" rx="5" stroke="currentColor" stroke-width="2" fill="none" />
                    </svg>
                </button>
                <button id="borderShapeSquareBtn" class="option" onclick="pickStampBorderShape('square', this)" title="Čtverec" aria-label="Čtverec">
                    <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg" style="display:block;">
                        <rect x="6" y="6" width="16" height="16" stroke="currentColor" stroke-width="2" fill="none" />
                    </svg>
                </button>
                <button id="borderShapeCustomBtn" class="option" onclick="pickStampBorderShape('custom', this)" title="Nahrát vlastní">
                    <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display:block;"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="17 8 12 3 7 8"/><line x1="12" y1="3" x2="12" y2="15"/></svg>
                </button>
            </div>
            <input type="file" id="stampBorderFileInput" style="display:none;" accept="image/*" onchange="onStampBorderFileChange(this)">
            <div style="display:flex; gap:16px; flex-wrap:wrap; justify-content:center; align-items:flex-end; margin-bottom:12px;">
                <div style="display:flex; flex-direction:column; gap:6px; min-width:160px;">
                    <label style="font-size:13px; color:#374151; font-weight:600;">Tloušťka čáry (px)</label>
                    <input type="number" id="stampBorderSizeInput" min="1" max="12" value="2" oninput="onStampBorderSizeChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
                </div>
                <div style="display:flex; flex-direction:column; gap:6px; min-width:200px;">
                    <label style="font-size:13px; color:#374151; font-weight:600;">Vzdálenost od razítka (px)</label>
                    <input type="number" id="stampBorderOffsetInput" min="-20" max="40" value="-3" oninput="onStampBorderOffsetChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
                </div>
                <div style="display:flex; flex-direction:column; gap:6px; min-width:160px;">
                    <label style="font-size:13px; color:#374151; font-weight:600;">Průhlednost (%)</label>
                    <input type="number" id="stampBorderOpacityInput" min="0" max="100" value="100" oninput="onStampBorderOpacityChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
                </div>
                <div style="display:flex; flex-direction:column; gap:6px; min-width:180px;">
                    <label style="font-size:13px; color:#374151; font-weight:600;">Barva</label>
                    <input type="color" id="stampBorderColorInput" value="#000000" oninput="onStampBorderColorChange(this)" style="height:38px; padding:0; border:1px solid #e5e7eb; border-radius:8px;">
                </div>
            </div>
        </div>
        <div class="q-actions">
            <button class="btn btn-back" onclick="goBack()">Zpět</button>
            <button class="btn btn-next" onclick="goNext()">Pokračovat</button>
        </div>
    </div>

    <!-- KROK 8: Text na stripu -->
    <div class="question-panel" data-step="8" id="step-8" style="display:none;">
      <div class="q-title">Text na stripu</div>
      <div class="q-sub">Zadejte krátký text, který se zobrazí na stripu (defaultně dole)</div>
      <div style="display:flex; justify-content:center;">
        <input type="text" id="stripInput" placeholder="Např. Desátá káva je na nás." oninput="onStripTextInput()" style="width:100%; padding:10px; border:1px solid #e5e7eb; border-radius:8px;">
      </div>
      <!-- Minimal controls: position, color, size -->
      <div class="strip-mini" style="justify-content:space-between;">
        <div class="mini-group" id="stripPosGroup">
          <span class="mini-label">Umístění</span>
          <button type="button" class="mini-btn" id="posTopBtn"   onclick="pickStripPos('top', this)" title="Nahoře">▲</button>
          <button type="button" class="mini-btn" id="posCenterBtn"onclick="pickStripPos('center', this)" title="Uprostřed">■</button>
          <button type="button" class="mini-btn" id="posBottomBtn"onclick="pickStripPos('bottom', this)" title="Dole">▼</button>
        </div>
        <div class="mini-group" id="stripColorGroup">
          <span class="mini-label">Barva</span>
          <button type="button" class="mini-btn" onclick="toggleStripPalette()" title="Vyberte barvu">Vybrat</button>
          <input type="color" id="stripColor" value="#000000" onmousedown="openStripPaletteFromColor(event)" onclick="return false;" onfocus="this.blur();" title="Zvolte barvu" style="width: 28px; height: 28px; border:none; background:transparent; padding:0;">
        </div>
        <div class="mini-group" id="stripSizeGroup">
          <span class="mini-label">Velikost</span>
          <button type="button" class="mini-btn" onclick="pickStripSize('XS', this)">XS</button>
          <button type="button" class="mini-btn" onclick="pickStripSize('S', this)">S</button>
          <button type="button" class="mini-btn" onclick="pickStripSize('M', this)">M</button>
          <button type="button" class="mini-btn" onclick="pickStripSize('L', this)">L</button>
        </div>
      </div>
      <!-- Paleta barev pro text na stripu -->
      <div id="stripColorPalette" style="display:none; margin-top:8px;">
        <div class="color-row">
          <!-- Neutrals -->
          <div class="swatch strip-swatch" style="background:#FFFFFF" title="Bílá" onclick="pickStripPresetColor('#FFFFFF', this)"></div>
          <div class="swatch strip-swatch" style="background:#F3F4F6" title="Světle šedá" onclick="pickStripPresetColor('#F3F4F6', this)"></div>
          <div class="swatch strip-swatch" style="background:#9CA3AF" title="Šedá" onclick="pickStripPresetColor('#9CA3AF', this)"></div>
          <div class="swatch strip-swatch" style="background:#6B7280" title="Tmavší šedá" onclick="pickStripPresetColor('#6B7280', this)"></div>
          <div class="swatch strip-swatch" style="background:#374151" title="Tmavá šedá" onclick="pickStripPresetColor('#374151', this)"></div>
          <div class="swatch strip-swatch" style="background:#111827" title="Černá" onclick="pickStripPresetColor('#111827', this)"></div>
          <!-- Reds / Warm -->
          <div class="swatch strip-swatch" style="background:#FEE2E2" title="Světle červená" onclick="pickStripPresetColor('#FEE2E2', this)"></div>
          <div class="swatch strip-swatch" style="background:#F43F5E" title="Růžovo-červená" onclick="pickStripPresetColor('#F43F5E', this)"></div>
          <div class="swatch strip-swatch" style="background:#EF4444" title="Červená" onclick="pickStripPresetColor('#EF4444', this)"></div>
          <div class="swatch strip-swatch" style="background:#DC2626" title="Tmavší červená" onclick="pickStripPresetColor('#DC2626', this)"></div>
          <div class="swatch strip-swatch" style="background:#F97316" title="Oranžová" onclick="pickStripPresetColor('#F97316', this)"></div>
          <div class="swatch strip-swatch" style="background:#F59E0B" title="Amber" onclick="pickStripPresetColor('#F59E0B', this)"></div>
          <div class="swatch strip-swatch" style="background:#EAB308" title="Žlutá" onclick="pickStripPresetColor('#EAB308', this)"></div>
          <!-- Greens -->
          <div class="swatch strip-swatch" style="background:#84CC16" title="Limetková" onclick="pickStripPresetColor('#84CC16', this)"></div>
          <div class="swatch strip-swatch" style="background:#22C55E" title="Zelená" onclick="pickStripPresetColor('#22C55E', this)"></div>
          <div class="swatch strip-swatch" style="background:#10B981" title="Smaragdová" onclick="pickStripPresetColor('#10B981', this)"></div>
          <div class="swatch strip-swatch" style="background:#14B8A6" title="Tyrkysová" onclick="pickStripPresetColor('#14B8A6', this)"></div>
          <!-- Blues -->
          <div class="swatch strip-swatch" style="background:#06B6D4" title="Cyan" onclick="pickStripPresetColor('#06B6D4', this)"></div>
          <div class="swatch strip-swatch" style="background:#38BDF8" title="Nebesky modrá" onclick="pickStripPresetColor('#38BDF8', this)"></div>
          <div class="swatch strip-swatch" style="background:#3B82F6" title="Modrá" onclick="pickStripPresetColor('#3B82F6', this)"></div>
          <div class="swatch strip-swatch" style="background:#2563EB" title="Tmavší modrá" onclick="pickStripPresetColor('#2563EB', this)"></div>
          <div class="swatch strip-swatch" style="background:#6366F1" title="Indigo" onclick="pickStripPresetColor('#6366F1', this)"></div>
          <!-- Purples -->
          <div class="swatch strip-swatch" style="background:#8B5CF6" title="Fialová" onclick="pickStripPresetColor('#8B5CF6', this)"></div>
          <div class="swatch strip-swatch" style="background:#A855F7" title="Purple" onclick="pickStripPresetColor('#A855F7', this)"></div>
          <div class="swatch strip-swatch" style="background:#D946EF" title="Fuchsiová" onclick="pickStripPresetColor('#D946EF', this)"></div>
          <div class="swatch strip-swatch" style="background:#EC4899" title="Růžová" onclick="pickStripPresetColor('#EC4899', this)"></div>
          <!-- Custom -->
          <div class="custom-color">
            <label for="stripCustomColor">Vlastní</label>
            <input type="color" id="stripCustomColor" value="#000000" onchange="pickStripCustomColor(this.value)">
          </div>
        </div>
      </div>
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 9: Barva textu (slevové texty apod.) -->
    <div class="question-panel" data-step="9" id="step-9" style="display:none;">
      <div class="q-title">Barva textu</div>
      <div class="q-sub">Pro slevové texty a informace (vpravo nahoře/dole)</div>
      <div class="color-row">
        <!-- Neutrals for text -->
        <div class="swatch" style="background:#000000" title="Černá" onclick="pickTextColor('#000000', this)"></div>
        <div class="swatch" style="background:#111827" title="Témně šedá" onclick="pickTextColor('#111827', this)"></div>
        <div class="swatch" style="background:#374151" title="Tmavá šedá" onclick="pickTextColor('#374151', this)"></div>
        <div class="swatch" style="background:#6B7280" title="Šedá" onclick="pickTextColor('#6B7280', this)"></div>
        <div class="swatch" style="background:#9CA3AF" title="Světle šedá" onclick="pickTextColor('#9CA3AF', this)"></div>
        <div class="swatch" style="background:#FFFFFF" title="Bílá" onclick="pickTextColor('#FFFFFF', this)"></div>
        <!-- Accent colors for emphasis -->
        <div class="swatch" style="background:#EF4444" title="Červená" onclick="pickTextColor('#EF4444', this)"></div>
        <div class="swatch" style="background:#F97316" title="Oranžová" onclick="pickTextColor('#F97316', this)"></div>
        <div class="swatch" style="background:#F59E0B" title="Amber" onclick="pickTextColor('#F59E0B', this)"></div>
        <div class="swatch" style="background:#EAB308" title="Žlutá" onclick="pickTextColor('#EAB308', this)"></div>
        <div class="swatch" style="background:#22C55E" title="Zelená" onclick="pickTextColor('#22C55E', this)"></div>
        <div class="swatch" style="background:#10B981" title="Smaragdová" onclick="pickTextColor('#10B981', this)"></div>
        <div class="swatch" style="background:#06B6D4" title="Cyan" onclick="pickTextColor('#06B6D4', this)"></div>
        <div class="swatch" style="background:#3B82F6" title="Modrá" onclick="pickTextColor('#3B82F6', this)"></div>
        <div class="swatch" style="background:#2563EB" title="Tmavší modrá" onclick="pickTextColor('#2563EB', this)"></div>
        <div class="swatch" style="background:#6366F1" title="Indigo" onclick="pickTextColor('#6366F1', this)"></div>
        <div class="swatch" style="background:#8B5CF6" title="Fialová" onclick="pickTextColor('#8B5CF6', this)"></div>
        <div class="swatch" style="background:#A855F7" title="Purple" onclick="pickTextColor('#A855F7', this)"></div>
        <div class="swatch" style="background:#D946EF" title="Fuchsiová" onclick="pickTextColor('#D946EF', this)"></div>
        <div class="swatch" style="background:#EC4899" title="Růžová" onclick="pickTextColor('#EC4899', this)"></div>
        <!-- Custom -->
        <div class="custom-color">
          <label for="customTextColor">Vlastní</label>
          <input type="color" id="customTextColor" value="#000000" onchange="pickCustomTextColor(this.value)">
        </div>
      </div>
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 10: Shrnutí -->
    <div class="question-panel" data-step="10" id="step-10" style="display:none;">
      <div class="q-title">Shrnutí</div>
      <div class="q-sub" id="summaryText" style="text-align:left; line-height:1.6;">
        
      </div>
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" onclick="finishWizard()">Dokončit</button>
      </div>
    </div>
    <script>

          // --- Global state ---
          let currentStep = 1;
          let stepHistory = [];
          let cardType = '';
          let pickedColor = null;
          let textColor = '#000000';
          let topMode = null;
          let napisText = 'Text';
          let napisFont = 'tan-nimbus-2-webfont';
          let napisColor = '#000000';
          let napisAlign = 'left';
          let logoUrl = '';
          let selectedStripUrl = '';
          let customStripObjectUrl = null;
          let stripText = '';
          let stripTextUserEdited = false;
          let stripTextPos = 'center';
          let stripTextSize = 'M';
          let stripTextColor = '#000000';
          let showStrip = false;
          let manualScale = null;

          // Nastavení pro Razítkovou kartu
          let stampMode = null;
          let stampTotal = 10;
          let stampOpacity = 1;
          let stampSize = 48;
          let stampGap = 6;
          let stampIconUrl = 'https://static.wixstatic.com/media/1cf87e_f7284a8ad6d1438c9e79eb3d0818890a~mv2.png';
          let stampCustomObjectUrl = null;
          let stampBorderEnabled = true;
          let stampBorderSize = 1; // Změněno na 1
          let stampBorderOffset = 1; // Nastaveno na výchozí hodnotu z inputu
          let stampBorderOpacity = 50; // Změněno na 50
          let stampBorderColor = '#374151'; // Změněno na tmavě šedou
          let stampBorderShape = 'outline';
          let stampPreviewMode = 'partial';
          // TOTO PŘIDEJ
          let stampBorderCustomUrl = null;
          let currentCustomBorderImg = null;
          // KONEC PŘIDÁNÍ
          let currentStampImg = null;
          let defaultStampUrl = 'https://static.wixstatic.com/media/1cf87e_f7284a8ad6d1438c9e79eb3d0818890a~mv2.png';
          let perStampTotal = 10;
          let perStripSelectedStep = 0;
          let perStripUrls = [];

          // Nastavení pro Bodovou kartu
          let bodRate = 10;
          let bodPoints = 1;
          let bodTopMessage = 'ZA 100B KÁVA ZDARMA';
          let bodBottomMessage = '10Kč=1BOD';
          let bodTopUserEdited = false;
          let bodBottomUserEdited = false;

          // Nastavení pro Procentní kartu
          let procentniLevels = [
            { name: 'GOLD', discount: 7, spend: 2000, color: null },
            { name: 'DIA', discount: 10, spend: 6000, color: null },
            { name: 'VIP', discount: 13, spend: Infinity, color: null }
          ];
          let procentniPreviewIndex = 0;

          // Nastavení pro Revolution kartu
          let revolutionMode = null; // 'preset' nebo 'custom'
          let revolutionLevels = [
            { name: 'GOLD', discount: 7, threshold: 2000, color: null },
            { name: 'DIA', discount: 10, threshold: 6000, color: null },
            { name: 'VIP', discount: 13, threshold: Infinity, color: null }
          ];
          let revolutionPreviewIndex = 0;
          let revolutionShowProgress = false;
          let revolutionGfxMode = null;
          let revolutionBonusMin = 500;
          let revolutionMilestones = 11;
          let revolutionGfxUrls = [];
          let revolutionGfxSelectedStep = 0;

          // --- Bodová handlers ---
          function pickBodRate(rate, el) {
            bodRate = rate;
            try {
              document.querySelectorAll('#step-5 .option').forEach(b => b.classList.remove('selected'));
              if (el) el.classList.add('selected');
            } catch (_) {}
          }
    
    // --- Strip selection handlers ---
    function highlightSelectedStrip(el) {
      try {
        document.querySelectorAll('#step-3 .strip-card').forEach(b => b.classList.remove('selected'));
        if (el) el.classList.add('selected');
      } catch (_) {}
    }
    
    function pickStrip(url, el) {
      try {
        selectedStripUrl = url || '';
        // If switching from custom to preset, release previous object URL
        if (customStripObjectUrl) {
          try { URL.revokeObjectURL(customStripObjectUrl); } catch (_) {}
          customStripObjectUrl = null;
        }
        highlightSelectedStrip(el);
        positionStrip();
        setStripBackground();
        renderStrip();
      } catch (_) {}
    }
    
    function onCustomStripFileChange(input) {
      try {
        const file = input && input.files && input.files[0];
        if (!file) return;
        if (customStripObjectUrl) {
          try { URL.revokeObjectURL(customStripObjectUrl); } catch (_) {}
        }
        const objUrl = URL.createObjectURL(file);
        customStripObjectUrl = objUrl;
        selectedStripUrl = objUrl;
        const customBtn = document.getElementById('stripCustomBtn');
        highlightSelectedStrip(customBtn);
        positionStrip();
        setStripBackground();
        renderStrip();
      } catch (_) {}
    }
    
    // Scroll the strip carousel by N items (negative for prev, positive for next)
    function scrollStrip(direction) {
      const track = document.getElementById('stripTrack');
      if (!track) return;
      const first = track.querySelector('.strip-card');
      const gap = 12; // must match CSS gap
      const cardW = first ? first.getBoundingClientRect().width + gap : 100;
      const step = Math.max(cardW, 100) * 3; // scroll by ~3 cards
      const delta = direction > 0 ? step : -step;
      try {
        track.scrollBy({ left: delta, behavior: 'smooth' });
      } catch (_) {
        track.scrollLeft += delta;
      }
    }

    // Helper to draw stamp border according to current settings
    function drawStampBorder(ctx, x, y, size) {
      if (stampBorderShape === 'custom') {
        if (currentCustomBorderImg) {
          ctx.save();
          ctx.globalAlpha = Math.max(0, Math.min(1, (stampBorderOpacity || 100) / 100));
          ctx.drawImage(currentCustomBorderImg, x, y, size, size);
          ctx.restore();
        }
        return;
      }
      try {
        const lw = Math.max(1, stampBorderSize);
        const g = Number.isFinite(stampBorderOffset) ? stampBorderOffset : 0;
        ctx.save();
        ctx.globalAlpha = Math.max(0, Math.min(1, (stampBorderOpacity || 0) / 100));
        ctx.strokeStyle = stampBorderColor || '#000000';
        ctx.lineWidth = lw;
        if (stampBorderShape === 'circle') {
          const r = Math.max(lw / 2, (size / 2) + g + (lw / 2));
          ctx.beginPath();
          ctx.arc(x + size / 2, y + size / 2, r, 0, Math.PI * 2);
          ctx.stroke();
        } else if (stampBorderShape === 'rounded') {
          const w0 = Math.max(1, (size + 2 * g) - lw);
          const h0 = w0;
          const x0 = (x - g) + (lw / 2);
          const y0 = (y - g) + (lw / 2);
          const radBase = Math.max(2, Math.min(w0/2, (size + 2 * g) * 0.25));
          ctx.beginPath();
          ctx.moveTo(x0 + radBase, y0);
          ctx.lineTo(x0 + w0 - radBase, y0);
          ctx.quadraticCurveTo(x0 + w0, y0, x0 + w0, y0 + radBase);
          ctx.lineTo(x0 + w0, y0 + h0 - radBase);
          ctx.quadraticCurveTo(x0 + w0, y0 + h0, x0 + w0 - radBase, y0 + h0);
          ctx.lineTo(x0 + radBase, y0 + h0);
          ctx.quadraticCurveTo(x0, y0 + h0, x0, y0 + h0 - radBase);
          ctx.lineTo(x0, y0 + radBase);
          ctx.quadraticCurveTo(x0, y0, x0 + radBase, y0);
          ctx.closePath();
          ctx.stroke();
        } else if (stampBorderShape === 'icon' || stampBorderShape === 'outline') {
          const baseImg = currentStampImg;
          if (baseImg) {
            const innerSize = Math.max(1, Math.round((size + 2 * g) + lw));
            const ox = Math.round(x + (size - innerSize) / 2);
            const oy = Math.round(y + (size - innerSize) / 2);
            
            const off = document.createElement('canvas');
            off.width = innerSize; off.height = innerSize;
            const octx = off.getContext('2d');
            octx.imageSmoothingEnabled = true;
            octx.drawImage(baseImg, 0, 0, innerSize, innerSize);
            octx.globalCompositeOperation = 'source-in';
            octx.fillStyle = stampBorderColor || '#000000';
            octx.fillRect(0, 0, innerSize, innerSize);
            
            if (stampBorderShape === 'icon') { // Silueta
              const tmax = Math.max(1, Math.round(lw));
              for (let t = 1; t <= tmax; t++) {
                ctx.drawImage(off, ox - t, oy); ctx.drawImage(off, ox + t, oy);
                ctx.drawImage(off, ox, oy - t); ctx.drawImage(off, ox, oy + t);
                ctx.drawImage(off, ox - t, oy - t); ctx.drawImage(off, ox + t, oy - t);
                ctx.drawImage(off, ox - t, oy + t); ctx.drawImage(off, ox + t, oy + t);
              }
            } else { // Obrys
                const outlineCanvas = document.createElement('canvas');
                const padding = lw * 2;
                outlineCanvas.width = innerSize + padding;
                outlineCanvas.height = innerSize + padding;
                const outCtx = outlineCanvas.getContext('2d');
                const tmax = Math.max(1, Math.round(lw));
                for (let t = 1; t <= tmax; t++) {
                    outCtx.drawImage(off, padding/2 - t, padding/2); outCtx.drawImage(off, padding/2 + t, padding/2);
                    outCtx.drawImage(off, padding/2, padding/2 - t); outCtx.drawImage(off, padding/2, padding/2 + t);
                    outCtx.drawImage(off, padding/2 - t, padding/2 - t); outCtx.drawImage(off, padding/2 + t, padding/2 - t);
                    outCtx.drawImage(off, padding/2 - t, padding/2 + t); outCtx.drawImage(off, padding/2 + t, padding/2 + t);
                }
                outCtx.globalCompositeOperation = 'destination-out';
                outCtx.drawImage(off, padding/2, padding/2);
                ctx.drawImage(outlineCanvas, ox - padding/2, oy - padding/2);
            }
          }
        } else { // 'square'
          const w0 = Math.max(1, (size + 2 * g) - lw);
          const h0 = w0;
          const x0 = (x - g) + (lw / 2);
          const y0 = (y - g) + (lw / 2);
          ctx.strokeRect(x0, y0, w0, h0);
        }
        ctx.restore();
      } catch(_) {}
    }
    const previewUrls = [
      'https://static.wixstatic.com/media/1cf87e_8eaa5bcd78cb47acb401966c9ab36fe4~mv2.png',
      'https://static.wixstatic.com/media/1cf87e_c0958eccec69453792ac9a7cec8f7f05~mv2.png',
      'https://static.wixstatic.com/media/1cf87e_fd48ad49147c406dba2f1b53d26bd739~mv2.png'
    ];
    let previewIndex = 0;
    let previewTimer = null;

    function steps() {
      return Array.from(document.querySelectorAll('.question-panel[data-step]'));
    }

    function getStepEl(n) {
      return document.querySelector('.question-panel[data-step="' + n + '"]');
    }

    function showStep(n) {
      steps().forEach(p => { p.style.display = (Number(p.dataset.step) === n || p.dataset.step === String(n)) ? 'block' : 'none'; });
      currentStep = n;
      updateNavState();
      const tmpPrev = document.getElementById('topModePreview');
      if (tmpPrev) tmpPrev.style.display = 'none';
      if (n === 2) {
        if (!topMode) topMode = 'napis';
        const opts = document.querySelectorAll('#step-2 .option');
        opts.forEach((o, i) => o.classList.toggle('selected', (topMode === 'napis' ? i === 0 : i === 1)));
        const napisWrapper = document.getElementById('napisWrapper');
        const logoWrapper = document.getElementById('logoWrapper');
        const next = getCurrentNextBtn();
        if (topMode === 'napis') {
          if (napisWrapper) napisWrapper.style.display = 'flex';
          if (logoWrapper) logoWrapper.style.display = 'none';
          const textarea = document.getElementById('napisTextarea');
          if (textarea) textarea.value = napisText;
          updateNapisUI();
          renderLogoSlot();
          setTimeout(renderLogoSlot, 50);
          if (next) next.disabled = (napisText.trim().split('\n')[0].length === 0);
        } else {
          if (napisWrapper) napisWrapper.style.display = 'none';
          if (logoWrapper) logoWrapper.style.display = 'flex';
          renderLogoSlot();
          if (next) next.disabled = (logoUrl.trim().length === 0);
        }
        setTopModePreviewSrc();
      }
      if (n === 3) {
        const next = getCurrentNextBtn();
        if (next) next.disabled = false;
        try {
          const stripButtons = document.querySelectorAll('#step-3 .strip-card');
          if (!selectedStripUrl && stripButtons.length) {
            const first = stripButtons[0];
            selectedStripUrl = first.dataset.url || '';
            first.classList.add('selected');
            positionStrip();
            setStripBackground();
            renderStrip();
          } else {
            if (customStripObjectUrl) {
              const customBtn = document.getElementById('stripCustomBtn');
              if (customBtn) {
                stripButtons.forEach(b => b.classList.remove('selected'));
                customBtn.classList.add('selected');
              }
            } else {
              stripButtons.forEach(b => b.classList.toggle('selected', b.dataset.url === selectedStripUrl));
            }
          }
        } catch (_) {}
      }
      if (n === 4) {
        if (!cardType) cardType = 'revolution';
        const cards = document.querySelectorAll('#step-4 .type-card');
        cards.forEach(btn => btn.classList.toggle('selected', btn.dataset.type === cardType));
        const next = getCurrentNextBtn();
        if (next) next.disabled = false;
        applyCardType(cardType);
        updateTypeDescription(cardType);
        const descPanel = document.getElementById('typeDescPanel');
        if (descPanel) descPanel.style.display = 'block';
      }
      if (n === 5.5) {
        const next = getCurrentNextBtn();
        if (!revolutionMode) {
          const presetButton = document.querySelector('#step-5b .option[onclick*="\'preset\']');
          pickRevolutionMode('preset', presetButton);
        }
        if (revolutionLevels.length === 0) {
          revolutionLevels.push({ name: 'Bronzový', discount: 5, threshold: 1000, color: '#CD7F32' });
        }
      }
      if (n === 5.6) {
        const noButton = document.querySelector('#step-5c .option[onclick*="false"]');
        if (noButton && !noButton.classList.contains('selected')) {
          pickRevolutionProgress(false, noButton);
        }
      }
      if (n === 5) {
        const isRazitkova = (cardType === 'razitkova');
        const isBodova = (cardType === 'bodova');
        const isProcentni = (cardType === 'procentni');
        const rz = document.getElementById('step5StampModePanel');
        const bd = document.getElementById('step5BodovaPanel');
        const pr = document.getElementById('step5ProcentniPanel');
        if (rz) rz.style.display = isRazitkova ? 'block' : 'none';
        if (bd) bd.style.display = isBodova ? 'block' : 'none';
        if (pr) pr.style.display = isProcentni ? 'block' : 'none';
        const next = getCurrentNextBtn();
        if (isRazitkova) {
          if (next) next.disabled = !stampMode;
          const preNote = document.getElementById('stampPresetNote');
          if (preNote) preNote.style.display = (stampMode === 'preset') ? 'block' : 'none';
          const perNote = document.getElementById('stampPerNote');
          if (perNote) perNote.style.display = (stampMode === 'perStamp') ? 'block' : 'none';
          const prBtn = document.getElementById('stampModePresetBtn');
          const sBtn = document.getElementById('stampModeStandardBtn');
          const pBtn = document.getElementById('stampModePerBtn');
          if (prBtn) prBtn.classList.toggle('selected', stampMode === 'preset');
          if (sBtn) sBtn.classList.toggle('selected', stampMode === 'standard');
          if (pBtn) pBtn.classList.toggle('selected', stampMode === 'perStamp');
        } else if (isBodova) {
          try {
            document.getElementById('bodPointsInput').value = String(bodPoints);
            document.getElementById('bodRateInput').value = String(bodRate);
            document.getElementById('bodTopTextInput').value = bodTopMessage;
            document.getElementById('bodBottomTextInput').value = bodBottomMessage;
          } catch(_) {}
          updateBodovaPreview();
          updateBodovaNextEnabled();
        } else if (isProcentni) {
          renderProcentniLevels();
          updateProcentniPreview();
          if (next) next.disabled = false;
        } else {
          if (next) next.disabled = false;
        }
      }
      if (n === 6) {
        const isStampStandard = (cardType === 'razitkova' && stampMode === 'standard');
        const isStampPer = (cardType === 'razitkova' && stampMode === 'perStamp');
        const std = document.getElementById('step6StampStandard');
        const per = document.getElementById('step6StampPer');
        const strip = document.getElementById('step6StripPanel');
        if (std) std.style.display = isStampStandard ? 'block' : 'none';
        if (per) per.style.display = isStampPer ? 'block' : 'none';
        if (strip) strip.style.display = (!isStampStandard && !isStampPer) ? 'block' : 'none';
        const next = getCurrentNextBtn();
        if (next) next.disabled = false;
        if (isStampStandard) {
          try {
            document.getElementById('stampTotalInput').value = String(stampTotal);
            document.getElementById('stampOpacityInput').value = String(Math.round(Math.max(0, Math.min(1, stampOpacity)) * 100));
            document.getElementById('stampSizeInput').value = String(stampSize);
            document.getElementById('stampGapInput').value = String(stampGap);
            const stampOptions = document.querySelectorAll('.stamp-option');
            stampOptions.forEach(opt => opt.removeAttribute('data-selected'));
            const currentOption = Array.from(stampOptions).find(opt => (opt.getAttribute('onclick') || '').includes(stampIconUrl));
            if (currentOption) currentOption.setAttribute('data-selected', 'true');
          } catch(_) {}
        } else if (isStampPer) {
          try {
            document.getElementById('perStampTotalInput').value = String(perStampTotal);
            buildPerStripUI();
            updatePerStripPreviewAndDownload();
          } catch(_) {}
        }
      }
      if (n === 7) {
        const yes = document.getElementById('borderToggleYes');
        const no  = document.getElementById('borderToggleNo');
        if (yes) yes.classList.toggle('selected', stampBorderEnabled === true);
        if (no)  no.classList.toggle('selected', stampBorderEnabled === false);
        const next = getCurrentNextBtn();
        if (next) next.disabled = false;
      }
      if (n === 7.5) {
        pickStampBorderShape(stampBorderShape, document.querySelector(`#step-7b .option[onclick*="'${stampBorderShape}'"]`));
        setStampPreviewMode(stampPreviewMode, document.querySelector(`#step-7b .option[onclick*="'${stampPreviewMode}'"]`));
        
        const panel = document.getElementById('stampBorderPanel');
        if (panel) panel.style.display = 'block';
        const next = getCurrentNextBtn();
        if (next) next.disabled = false;
      }
      if (n === 8) {
        const next = getCurrentNextBtn();
        if (next) next.disabled = (stripText.trim().length === 0);
        updateStripMiniUI();
      }
      if (n === 9) {
        const next = getCurrentNextBtn();
        if (next) next.disabled = !textColor;
      }
      if (n === 10) {
        const s = document.getElementById('summaryText');
        s.innerHTML = `
          <strong>Barva karty:</strong> <span style="display:inline-block; width:12px; height:12px; background:${pickedColor || '#ffffff'}; border:1px solid #e5e7eb; vertical-align:middle;"></span> ${pickedColor || '#ffffff'}<br>
          <strong>Levý horní roh:</strong> ${topMode === 'napis' ? 'Text' : 'Logo'}<br>
          ${topMode === 'napis' ? `<strong>Text:</strong> ${escapeHtml(napisText)}` : `<strong>Logo URL:</strong> ${escapeHtml(logoUrl)}`}<br>
          <strong>Typ karty:</strong> ${cardType === 'bodova' ? 'Bodová' : cardType === 'procentni' ? 'Procentní' : cardType === 'razitkova' ? 'Razítková' : cardType === 'revolution' ? 'Revolution' : ''}<br>
          ${cardType === 'bodova' ? `<strong>Směnný kurz:</strong> ${bodPoints} BOD = ${Number(bodRate)} Kč<br><strong>Horní řádek:</strong> ${escapeHtml(bodTopMessage)}<br><strong>Spodní řádek:</strong> ${escapeHtml(bodBottomMessage)}<br>` : ''}
          <strong>Vzhled stripu:</strong> ${selectedStripUrl ? (customStripObjectUrl ? 'Vlastní' : 'Předvolený') : '—'} ${selectedStripUrl ? `<img src="${selectedStripUrl}" alt="Strip" style="display:inline-block; width:60px; height:14px; object-fit:cover; border-radius:2px; border:1px solid #e5e7eb; vertical-align:middle; margin-left:6px;">` : ''}<br>
          <strong>Text na stripu:</strong> ${showStrip ? escapeHtml(stripText) : 'Nezobrazovat'}<br>
          ${showStrip ? `<strong>Umístění textu:</strong> ${stripTextPos}<br>` : ''}
          ${showStrip ? `<strong>Velikost textu:</strong> ${stripTextSize}<br>` : ''}
          ${showStrip ? `<strong>Barva textu stripu:</strong> <span style="display:inline-block; width:12px; height:12px; background:${stripTextColor || '#000000'}; border:1px solid #e5e7eb; vertical-align:middle;"></span> ${stripTextColor || '#000000'}` : ''}
          ${(cardType === 'razitkova' && stampMode === 'standard') ? `<br><strong>Razítka:</strong> ${stampTotal} ks, velikost ${stampSize}px, rozestup ${stampGap}px, průhlednost ${Math.round(stampOpacity*100)}%<br>` : ''}
          ${(cardType === 'razitkova' && stampMode === 'standard') ? (`<strong>Ohraničení razítek:</strong> ` + (stampBorderEnabled ? `${(stampBorderShape === 'icon' ? 'silueta razítka' : stampBorderShape === 'outline' ? 'obrys' : stampBorderShape)}, tloušťka ${stampBorderSize}px, vzdálenost ${stampBorderOffset}px, <span style=\"display:inline-block; width:12px; height:12px; background:${stampBorderColor}; border:1px solid #e5e7eb; vertical-align:middle;\"></span> ${stampBorderColor}, ${stampBorderOpacity}%` : 'Nezobrazovat')) : ''}
        `;
      }
    }

    function getCurrentNextBtn() {
        const el = getStepEl(currentStep);
        return el ? el.querySelector('.btn-next') : null;
    }

    function getCurrentBackBtn() {
      const el = getStepEl(currentStep);
      return el ? el.querySelector('.btn-back') : null;
    }
    
    // --- Revolution karta handlers ---
    function pickRevolutionMode(mode, el) {
        revolutionMode = mode;
        document.querySelectorAll('#step-5b .option').forEach(o => o.classList.remove('selected'));
        if (el) el.classList.add('selected');

        const presetNote = document.getElementById('revolutionPresetNote');
        const customPanel = document.getElementById('revolutionCustomPanel');
        const nextBtn = document.querySelector('#step-5b .btn-next');

        if (mode === 'preset') {
            initializeDefaultRevolutionLevels(); // Ujistíme se, že máme výchozí úrovně
            presetNote.style.display = 'block';
            customPanel.style.display = 'none';
            setRevolutionPreview(0);
            nextBtn.disabled = false;
        } else if (mode === 'custom') {
            presetNote.style.display = 'none';
            customPanel.style.display = 'block';
            nextBtn.disabled = false;
            
            // TOTO JE KLÍČOVÁ OPRAVA: Nastavíme výchozí stav pro "Vlastní návrh"
            // Výchozí je NEzobrazovat progres, takže simulujeme kliknutí na tlačítko "Ne".
            const defaultProgressButton = document.querySelector('#revolutionCustomPanel .option[onclick*="pickRevolutionProgress(false"]');
            pickRevolutionProgress(false, defaultProgressButton);
            
            renderRevolutionLevels();
            setRevolutionPreview(0);
        }
    }

    function pickRevolutionProgress(show, el) {
        revolutionShowProgress = !!show;
        // Označení aktivního tlačítka (Ano/Ne)
        document.querySelectorAll('#step-5c .options-row .option').forEach(o => o.classList.remove('selected'));
        if (el) el.classList.add('selected');

        // Zobrazení/skrytí panelu pro nahrávání grafiky
        const withProgressPanel = document.getElementById('revolutionWithProgressPanel');
        if (withProgressPanel) {
            withProgressPanel.style.display = show ? 'block' : 'none';
        }

        // Aktivace tlačítka "Pokračovat"
        const nextBtn = document.querySelector('#step-5c .btn-next');
        if (nextBtn) {
            nextBtn.disabled = false;
        }
    }

    function pickRevolutionGfxMode(mode, el) {
        revolutionGfxMode = mode;
        document.querySelectorAll('#revolutionWithProgressPanel .options-row .option').forEach(o => o.classList.remove('selected'));
        if (el) el.classList.add('selected');

        const presetNote = document.getElementById('revolutionGfxPresetNote');
        const customPanel = document.getElementById('revolutionGfxCustomPanel');

        if (mode === 'preset') {
            presetNote.style.display = 'block';
            customPanel.style.display = 'none';
        } else if (mode === 'custom') {
            presetNote.style.display = 'none';
            customPanel.style.display = 'block';
            // Připneme posluchače na vstupy, aby se UI přestavělo při změně
            const minInp = document.getElementById('revBonusMinAmount');
            const milInp = document.getElementById('revMilestoneCount');
            [minInp, milInp].forEach(inp => {
              if (!inp) return;
              inp.oninput = setupRevolutionGfxUploads;
              inp.onchange = setupRevolutionGfxUploads;
            });
            setupRevolutionGfxUploads();
        }
    }

    function setupRevolutionGfxUploads() {
        const minAmountInput = document.getElementById('revBonusMinAmount');
        const milestonesInput = document.getElementById('revMilestoneCount');
        
        revolutionBonusMin = parseInt(minAmountInput.value, 10) || 500;
        revolutionMilestones = parseInt(milestonesInput.value, 10) || 11;

        const calcElem = document.getElementById('revMilestoneCalc');
        const uploadsContainer = document.getElementById('revGfxUploads');
        const selectElem = document.getElementById('revMilestoneStepSelect');
        
        if (revolutionMilestones > 1) {
            const step = revolutionBonusMin / (revolutionMilestones - 1);
            calcElem.textContent = `Grafika se změní po nasbírání každých ${step.toFixed(2).replace('.', ',')} Kč.`;

            uploadsContainer.innerHTML = '';
            selectElem.innerHTML = '';
            for (let i = 0; i < revolutionMilestones; i++) {
                const labelText = i === 0 ? 'Stav 0 (výchozí)' : `Stav ${i} (${(step * i).toFixed(0)} Kč)`;
                const uploaderHTML = `
                  <div style="display:flex; flex-direction:column; gap:6px;">
                    <label style="font-size:13px; color:#374151; font-weight:600;">${labelText}</label>
                    <input type="file" accept="image/*" onchange="onRevolutionGfxUploadChange(${i}, this)" style="padding:8px; border:1px solid #e5e7eb; border-radius:8px;">
                  </div>`;
                uploadsContainer.innerHTML += uploaderHTML;

                const option = document.createElement('option');
                option.value = i;
                option.textContent = `Stav ${i}`;
                selectElem.appendChild(option);
            }
            revolutionGfxUrls.length = revolutionMilestones;
            if (revolutionGfxSelectedStep >= revolutionMilestones) {
                revolutionGfxSelectedStep = 0;
            }
            selectElem.value = revolutionGfxSelectedStep;
            updateRevolutionGfxPreview();

        } else {
            calcElem.textContent = 'Počet milníků musí být alespoň 2.';
            uploadsContainer.innerHTML = '';
            selectElem.innerHTML = '';
        }
    }
    
    // Funkce pro změnu vybraného stavu v dropdownu
    function onRevolutionGfxStepChange(select) {
        try {
            revolutionGfxSelectedStep = parseInt(select.value, 10) || 0;
            updateRevolutionGfxPreview();
        } catch(e) { console.error("Chyba při změně stavu:", e); }
    }

    function onRevolutionLevelChange(index, field, value) {
        if (!revolutionLevels[index]) return;

        if (field === 'name' || field === 'color') {
            revolutionLevels[index][field] = value;
        } else {
            const numValue = parseInt(value, 10);
            if (!isNaN(numValue) && numValue >= 0) {
                revolutionLevels[index][field] = numValue;
            }
        }
        
        // Přepneme náhled na upravovanou úroveň
        setRevolutionPreview(index);
    }

    function setRevolutionPreview(index) {
        revolutionPreviewIndex = index;
        renderRevolutionLevels(); // Překreslení pro zvýraznění
        updateFakeCardRevolutionLevel();
    }
    
    function renderRevolutionLevels() {
        const container = document.getElementById('revolutionLevelsContainer');
        if (!container) return;

        container.innerHTML = '';
        
        revolutionLevels.forEach((level, index) => {
            const tr = document.createElement('tr');
            tr.onclick = () => setRevolutionPreview(index);
            if (index === revolutionPreviewIndex) {
                tr.classList.add('preview-active');
            }

            const isLast = index === revolutionLevels.length - 1;
            const fromThreshold = (index === 0) ? 0 : (revolutionLevels[index - 1].threshold);

            // Sloupec 1: Úroveň
            const tdLevel = document.createElement('td');
            tdLevel.className = 'level-index';
            tdLevel.textContent = index + 1;
            tr.appendChild(tdLevel);

            // Sloupec 2: Název statusu
            const tdName = document.createElement('td');
            const nameInput = document.createElement('input');
            nameInput.type = 'text';
            nameInput.value = level.name;
            nameInput.onchange = (e) => onRevolutionLevelChange(index, 'name', e.target.value);
            nameInput.onclick = (e) => e.stopPropagation();
            tdName.appendChild(nameInput);
            tr.appendChild(tdName);

            // Sloupec 3: Sleva (%)
            const tdDiscount = document.createElement('td');
            const discountInput = document.createElement('input');
            discountInput.type = 'number';
            discountInput.min = '0';
            discountInput.value = level.discount;
            discountInput.onchange = (e) => onRevolutionLevelChange(index, 'discount', e.target.value);
            discountInput.onclick = (e) => e.stopPropagation();
            tdDiscount.appendChild(discountInput);
            tr.appendChild(tdDiscount);

            // Sloupec 4: Cílová částka
            const tdThreshold = document.createElement('td');
            if (isLast) {
                tdThreshold.innerHTML = `<input type="text" value="a více" disabled style="background:#f9fafb; border-style:dashed;">`;
            } else {
                const thresholdInput = document.createElement('input');
                thresholdInput.type = 'number';
                thresholdInput.min = fromThreshold + 1;
                thresholdInput.value = level.threshold;
                thresholdInput.onchange = (e) => onRevolutionLevelChange(index, 'threshold', e.target.value);
                thresholdInput.onclick = (e) => e.stopPropagation();
                tdThreshold.appendChild(thresholdInput);
            }
            tr.appendChild(tdThreshold);

            // Sloupec 5: Barva karty
            const tdColor = document.createElement('td');
            if (index === 0) {
                tdColor.innerHTML = `<span>(Hlavní barva)</span>`;
            } else {
                const colorDiv = document.createElement('div');
                colorDiv.className = 'procentni-level-color';
                const colorInput = document.createElement('input');
                colorInput.type = 'color';
                colorInput.value = level.color || pickedColor || '#ffffff';
                colorInput.onchange = (e) => onRevolutionLevelChange(index, 'color', e.target.value);
                colorInput.onclick = (e) => e.stopPropagation();
                colorDiv.appendChild(colorInput);
                tdColor.appendChild(colorDiv);
            }
            tr.appendChild(tdColor);
            
            container.appendChild(tr);
        });

        // Povolit/zakázat tlačítko pro odebrání
        const removeBtn = document.getElementById('removeRevolutionLevelBtn');
        if (removeBtn) {
            removeBtn.disabled = revolutionLevels.length <= 1;
        }
    }
    
    function updateFakeCardRevolutionLevel() {
        if (cardType !== 'revolution' || !revolutionLevels[revolutionPreviewIndex]) return;
        
        const level = revolutionLevels[revolutionPreviewIndex];
        
        const statusVal = document.getElementById('statusVal');
        const discountVal = document.getElementById('discountVal');
        const savedVal = document.getElementById('savedVal');
        const fakeCard = document.getElementById('fakeCard');

        if (statusVal) statusVal.textContent = level.name;
        if (discountVal) discountVal.textContent = `${level.discount}%`;
        
        // Zobrazíme ukázkovou naspořenou částku pro náhled
        if (savedVal) {
            if (revolutionPreviewIndex === 0) {
                savedVal.textContent = '780 Kč';
            } else if (revolutionPreviewIndex === 1) {
                savedVal.textContent = '2500 Kč';
            } else {
                savedVal.textContent = '7150 Kč';
            }
        }
        
        // Změníme barvu karty podle úrovně
        if (fakeCard) {
            // První úroveň použije hlavní barvu karty, další úrovně použijí svou vlastní barvu
            const colorToShow = level.color || pickedColor || '#ffffff';
            fakeCard.style.backgroundColor = colorToShow;
        }
    }
    
    function initializeDefaultRevolutionLevels() {
        // Resetujeme Revolution úrovně na výchozí hodnoty
        revolutionLevels = [
            { name: 'GOLD', discount: 7, threshold: 2000, color: null },
            { name: 'DIA', discount: 10, threshold: 6000, color: '#9CA3AF' },
            { name: 'VIP', discount: 13, threshold: Infinity, color: '#111827' }
        ];
        
        // Přidáme event listenery na nová políčka, pokud ještě nebyly přidány
        const minAmountInput = document.getElementById('revBonusMinAmount');
        const milestonesInput = document.getElementById('revMilestoneCount');
        if(minAmountInput && !minAmountInput.dataset.listenerAttached) {
            minAmountInput.addEventListener('input', setupRevolutionGfxUploads);
            minAmountInput.dataset.listenerAttached = 'true';
        }
        if(milestonesInput && !milestonesInput.dataset.listenerAttached) {
            milestonesInput.addEventListener('input', setupRevolutionGfxUploads);
            milestonesInput.dataset.listenerAttached = 'true';
        }
    }
    
    function addRevolutionLevel() {
        const lastLevel = revolutionLevels[revolutionLevels.length - 1];
        // Pokud poslední úroveň má nekonečný práh, dáme jí konkrétní hodnotu
        if (lastLevel.threshold === Infinity) {
            const previousThreshold = (revolutionLevels.length > 1) ? revolutionLevels[revolutionLevels.length - 2].threshold : 0;
            lastLevel.threshold = previousThreshold + 4000;
        }
        
        revolutionLevels.push({
            name: 'Nová úroveň',
            discount: (lastLevel.discount || 0) + 3,
            threshold: Infinity, // Nová poslední úroveň je "a více"
            color: null // Nastavíme null, aby se použila hlavní barva karty
        });

        renderRevolutionLevels();
        setRevolutionPreview(revolutionLevels.length - 1); // Zobrazíme náhled nově přidané úrovně
    }
    
    function removeRevolutionLevel() {
        if (revolutionLevels.length > 1) {
            revolutionLevels.pop();
            // Zajistíme, že nová poslední úroveň má nekonečný práh
            if (revolutionLevels.length > 0) {
                revolutionLevels[revolutionLevels.length - 1].threshold = Infinity;
            }
            
            // Pokud jsme smazali zobrazenou úroveň, přepneme na poslední
            if (revolutionPreviewIndex >= revolutionLevels.length) {
                setRevolutionPreview(revolutionLevels.length - 1);
            } else {
                // Jinak jen překreslení
                renderRevolutionLevels();
                updateFakeCardRevolutionLevel();
            }
        }
    }

    function onRevolutionGfxUploadChange(index, input) {
        try {
            const file = input && input.files && input.files[0];
            if (!file) return;
            if (revolutionGfxUrls[index]) {
                try { URL.revokeObjectURL(revolutionGfxUrls[index]); } catch(_) {}
            }
            const url = URL.createObjectURL(file);
            revolutionGfxUrls[index] = url;

            // --- PŘIDANÁ LOGIKA ---
            // Automaticky přepneme na právě nahraný stav
            revolutionGfxSelectedStep = index;
            const selectElem = document.getElementById('revMilestoneStepSelect'); // Opraveno, bylo revGfxStepSelect
            if (selectElem) selectElem.value = index;

            // Aktualizujeme náhled i kartu
            updateRevolutionGfxPreview();
            // --- KONEC PŘIDANÉ LOGIKY ---

        } catch(e) { console.error("Chyba při nahrání obrázku:", e); }
    }

    function onRevolutionGfxStepChange(sel) {
        const v = parseInt(sel && sel.value, 10);
        revolutionGfxSelectedStep = isNaN(v) ? 0 : Math.max(0, Math.min(revolutionMilestones - 1, v));
        updateRevolutionGfxPreview();
    }

    function updateRevolutionGfxPreview() {
        try {
            const topPrev = document.getElementById('revGfxTopPreview');
            const dlBtn = document.getElementById('revGfxDownloadBtn');
            const url = revolutionGfxUrls[revolutionGfxSelectedStep] || selectedStripUrl || '';
            
            if (topPrev) {
                topPrev.src = url;
                topPrev.style.display = url ? 'block' : 'none';
            }
            if (dlBtn) dlBtn.href = url;
            
            // --- PŘIDANÝ ŘÁDEK ---
            // Vždy aktualizujeme strip na hlavní kartě, aby odpovídal náhledu
            setStripBackground();
            // --- KONEC PŘIDANÉHO ŘÁDKU ---

        } catch (e) { console.error("Chyba při aktualizaci náhledu:", e); }
    }
    
    // Funkce pro výpočet aktuálního kroku na základě utraty
    function getCurrentRevolutionStep() {
        try {
            // Získáme aktuální utratu z UI nebo použijeme výchozí hodnotu
            const spendInput = document.getElementById('aktualniUtrataInput');
            const currentSpend = spendInput ? parseFloat(spendInput.value) || 0 : 0;
            
            // Pokud není nastavený minimální bonus nebo počet milníků, vrátíme 0
            if (!revolutionBonusMin || revolutionMilestones <= 1) return 0;
            
            // Vypočítáme krok na základě utraty a minimálního bonusu
            const step = revolutionBonusMin / (revolutionMilestones - 1);
            const calculatedStep = Math.floor(currentSpend / step);
            
            // Omezíme na rozsah 0 až revolutionMilestones - 1
            return Math.max(0, Math.min(revolutionMilestones - 1, calculatedStep));
        } catch (e) {
            console.error("Chyba při výpočtu aktuálního kroku:", e);
            return 0;
        }
    }

    function onRevolutionGfxDownloadClick(e) {
        e.preventDefault();
        const url = e.target.href;
        if (!url || url.endsWith('#') || !url.startsWith('blob:')) {
            alert('Nejprve nahrajte obrázek pro tento stav.');
            return false;
        }
        const a = document.createElement('a');
        a.href = url;
        a.download = `progress_stav_${revolutionGfxSelectedStep}.png`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        return false;
    }

    function updateNavState() {
      const back = getCurrentBackBtn();
      if (back) back.disabled = currentStep === 1;
    }

    function clearSelected() {
      document.querySelectorAll('.swatch').forEach(s => s.classList.remove('selected'));
    }

    function setCardColor(color) {
      const card = document.getElementById('fakeCard');
      if (card) card.style.backgroundColor = color;
      pickedColor = color;
      const next = getCurrentNextBtn();
      if (next) next.disabled = false;
    }

    // Razítková – handlers
    function pickStampMode(mode, el) {
      stampMode = (mode === 'standard' || mode === 'perStamp' || mode === 'preset') ? mode : null;
      const next = getCurrentNextBtn();
      if (next) next.disabled = !stampMode;
      const preNote = document.getElementById('stampPresetNote');
      if (preNote) preNote.style.display = (stampMode === 'preset') ? 'block' : 'none';
      const perNote = document.getElementById('stampPerNote');
      if (perNote) perNote.style.display = (stampMode === 'perStamp') ? 'block' : 'none';
      const pr = document.getElementById('stampModePresetBtn');
      const sb = document.getElementById('stampModeStandardBtn');
      const pb = document.getElementById('stampModePerBtn');
      if (pr) pr.classList.toggle('selected', stampMode === 'preset');
      if (sb) sb.classList.toggle('selected', stampMode === 'standard');
      if (pb) pb.classList.toggle('selected', stampMode === 'perStamp');
    }

    function onStampTotalChange(input) {
      const v = parseInt(input && input.value, 10);
      const n = isNaN(v) ? stampTotal : Math.max(1, Math.min(20, v));
      stampTotal = n;
      try {
        const val = document.getElementById('stampVal');
        if (val) val.textContent = `${stampTotal} / ${stampTotal}`;
      } catch (_) {}
      // Only render strip if we're in razitkova mode
      if (cardType === 'razitkova') {
        renderStrip();
      }
    }

    function pickStampIcon(url, el) {
      try {
        if (stampCustomObjectUrl) { try { URL.revokeObjectURL(stampCustomObjectUrl); } catch(_) {} stampCustomObjectUrl = null; }
      } catch(_) {}
      stampIconUrl = url || defaultStampUrl;
      try {
        // Update selection for stamp-option elements
        const allOptions = document.querySelectorAll('.stamp-option');
        allOptions.forEach(opt => opt.removeAttribute('data-selected'));
        if (el && el.classList.contains('stamp-option')) {
          el.setAttribute('data-selected', 'true');
        }
      } catch(_) {}
      // Only render strip if we're in razitkova mode
      if (cardType === 'razitkova') {
        renderStrip();
      }
    }

    function onStampCustomIconChange(input) {
      try {
        const file = input && input.files && input.files[0];
        if (!file) return;
        if (stampCustomObjectUrl) { try { URL.revokeObjectURL(stampCustomObjectUrl); } catch(_) {} }
        const objUrl = URL.createObjectURL(file);
        stampCustomObjectUrl = objUrl;
        stampIconUrl = objUrl;
        try {
          // Update selection for custom upload
          const allOptions = document.querySelectorAll('.stamp-option');
          allOptions.forEach(opt => opt.removeAttribute('data-selected'));
          const customOption = input.closest('.stamp-option');
          if (customOption) customOption.setAttribute('data-selected', 'true');
        } catch(_) {}
        // Only render strip if we're in razitkova mode
        if (cardType === 'razitkova') {
          renderStrip();
        }
      } catch(_) {}
    }

    function onStampSizeChange(input) {
      const v = parseInt(input && input.value, 10);
      const size = isNaN(v) ? 100 : Math.max(1, v);
      stampSize = size;
      try {
        const label = document.getElementById('stampSizeVal');
        if (label) label.textContent = size + 'px';
      } catch(_) {}
      // Only render strip if we're in razitkova mode
      if (cardType === 'razitkova') {
        renderStrip();
      }
    }

    function onStampOpacityChange(input) {
      const v = parseInt(input && input.value, 10);
      const pct = isNaN(v) ? 100 : Math.max(0, Math.min(100, v));
      stampOpacity = pct / 100;
      try {
        const l = document.getElementById('stampOpacityVal');
        if (l) l.textContent = `${pct}%`;
      } catch(_) {}
      // Only render strip if we're in razitkova mode
      if (cardType === 'razitkova') {
        renderStrip();
      }
    }

    function onStampGapChange(input) {
      const v = parseInt(input && input.value, 10);
      stampGap = isNaN(v) ? 2 : Math.max(2, Math.min(30, v));
      // Only render strip if we're in razitkova mode
      if (cardType === 'razitkova') {
        renderStrip();
      }
    }

    // --- Stamp border handlers ---
    function pickStampBorderEnabled(enabled, el) {
      stampBorderEnabled = !!enabled;
      try {
        document.querySelectorAll('#step-7 .option').forEach(btn => btn.classList.remove('selected'));
        if (el) el.classList.add('selected');
        const next = getCurrentNextBtn();
        if (next) next.disabled = false;
      } catch(_) {}
    }

    function onStampBorderFileChange(input) {
      try {
        const file = input && input.files && input.files[0];
        if (!file) return;
        if (stampBorderCustomUrl) {
          try { URL.revokeObjectURL(stampBorderCustomUrl); } catch(_) {}
        }
        const objUrl = URL.createObjectURL(file);
        stampBorderCustomUrl = objUrl;
        if (cardType === 'razitkova') {
          renderStrip();
        }
      } catch(e) {
        console.error("Error handling custom border file:", e);
      }
    }

    function pickStampBorderShape(shape, el) {
      const allowed = ['circle', 'rounded', 'icon', 'square', 'custom', 'outline'];
      if (!allowed.includes(shape)) return;

      stampBorderShape = shape;
      const borderSettingsPanel = document.getElementById('stampBorderPanel');

      if (shape === 'custom') {
        if (borderSettingsPanel) borderSettingsPanel.style.display = 'none';
        document.getElementById('stampBorderFileInput').click();
      } else {
        if (borderSettingsPanel) borderSettingsPanel.style.display = 'block';
        
        if (shape === 'outline') {
            stampBorderSize = 2;
            stampBorderOpacity = 100;
            stampBorderOffset = -2;
            stampBorderColor = '#000000';
        } else if (shape === 'icon') {
          stampBorderSize = 1;
          stampBorderOpacity = 50;
          stampBorderOffset = 1;
          stampBorderColor = '#374151';
        } else { // Pro kruh, čtverec atd.
          stampBorderSize = 3;
          stampBorderOpacity = 100;
          stampBorderOffset = -3;
          stampBorderColor = '#374151';
        }

        try {
          document.getElementById('stampBorderSizeInput').value = stampBorderSize;
          document.getElementById('stampBorderOpacityInput').value = stampBorderOpacity;
          document.getElementById('stampBorderColorInput').value = stampBorderColor;
          document.getElementById('stampBorderOffsetInput').value = stampBorderOffset;
        } catch(_) {}
      }

      try {
        document.querySelectorAll('#step-7b #stampBorderPanel .options-row .option').forEach(btn => btn.classList.remove('selected'));
        if(el) el.classList.add('selected');
      } catch(_) {}

      if (cardType === 'razitkova') { renderStrip(); }
    }

    function setStampPreviewMode(mode, el) {
      stampPreviewMode = mode; // 'partial', 'none', 'all'
      try {
        document.querySelectorAll('#step-7b .options-row .option').forEach(btn => btn.classList.remove('selected'));
        if (el) el.classList.add('selected');
      } catch (_) {}
      if (cardType === 'razitkova') { renderStrip(); }
    }

    function onStampBorderSizeChange(input) {
      const v = parseInt(input && input.value, 10);
      stampBorderSize = isNaN(v) ? stampBorderSize : Math.max(1, Math.min(12, v));
      if (cardType === 'razitkova') { renderStrip(); }
    }

    function onStampBorderColorChange(input) {
      const v = input && input.value;
      if (typeof v === 'string' && v.trim()) {
        stampBorderColor = v.trim();
        if (cardType === 'razitkova') { renderStrip(); }
      }
    }

    function onStampBorderOpacityChange(input) {
      const v = parseInt(input && input.value, 10);
      const pct = isNaN(v) ? stampBorderOpacity : Math.max(0, Math.min(100, v));
      stampBorderOpacity = pct;
      if (cardType === 'razitkova') { renderStrip(); }
    }

    function onStampBorderOffsetChange(input) {
      const v = parseInt(input && input.value, 10);
      // allow negative (inside) and positive (outside) offsets
      stampBorderOffset = isNaN(v) ? 0 : Math.max(-20, Math.min(40, v));
      if (cardType === 'razitkova') { renderStrip(); }
    }

    // --- Per-stamp (custom for each) handlers ---
    function onPerStampTotalChange(input) {
      const v = parseInt(input && input.value, 10);
      const n = isNaN(v) ? perStampTotal : Math.max(1, Math.min(20, v));
      perStampTotal = n;
      // Ensure arrays cover 0..n
      if (perStripUrls.length < n + 1) perStripUrls.length = n + 1;
      if (perStripSelectedStep > n) perStripSelectedStep = n;
      buildPerStripUI();
      updatePerStripPreviewAndDownload();
    }

    function onPerStripUploadChange(index, input) {
      try {
        const file = input && input.files && input.files[0];
        if (!file) return;
        if (perStripUrls[index]) {
          try { URL.revokeObjectURL(perStripUrls[index]); } catch(_) {}
        }
        const url = URL.createObjectURL(file);
        perStripUrls[index] = url;

        // --- PŘIDANÁ LOGIKA ---
        // Nastavíme právě nahraný stav jako aktivní
        perStripSelectedStep = index;
        const sel = document.getElementById('perStripStepSelect');
        if (sel) sel.value = index;

        // Vždy aktualizujeme náhled
        updatePerStripPreviewAndDownload();
        // --- KONEC PŘIDANÉ LOGIKY ---

      } catch(_) {}
    }

    function onPerStripStepChange(sel) {
      const v = parseInt(sel && sel.value, 10);
      perStripSelectedStep = isNaN(v) ? 0 : Math.max(0, Math.min(perStampTotal, v));
      updatePerStripPreviewAndDownload();
    }

    function buildPerStripUI() {
      try {
        const sel = document.getElementById('perStripStepSelect');
        const grid = document.getElementById('perStripUploads');
        if (sel) {
          sel.innerHTML = '';
          for (let i = 0; i <= perStampTotal; i++) {
            const opt = document.createElement('option');
            opt.value = String(i);
            opt.textContent = 'Stav ' + i;
            sel.appendChild(opt);
          }
          sel.value = String(Math.max(0, Math.min(perStampTotal, perStripSelectedStep)));
        }
        if (grid) {
          let html = '';
          for (let i = 0; i <= perStampTotal; i++) {
            html += `
              <div style="display:flex; flex-direction:column; gap:6px;">
                <label style="font-size:13px; color:#374151; font-weight:600;">Stav ${i}</label>
                <input type="file" accept="image/*" onchange="onPerStripUploadChange(${i}, this)" style="padding:8px; border:1px solid #e5e7eb; border-radius:8px;">
              </div>`;
          }
          grid.innerHTML = html;
        }
      } catch(_) {}
    }

    function updatePerStripPreviewAndDownload() {
      try {
        const topPrev = document.getElementById('perStripTopPreview');
        const dl = document.getElementById('perStripDownloadBtn');
        const img = document.getElementById('stripResultImg');
        const cv = document.getElementById('stripCanvas');
        const fallback = (selectedStripUrl && selectedStripUrl.trim())
          ? selectedStripUrl
          : 'https://static.wixstatic.com/media/1cf87e_3ae4f6a9c66a44ef9aa950f489356001~mv2.png';
        const url = perStripUrls[perStripSelectedStep] || fallback;
        if (topPrev) topPrev.src = url;
        if (dl) {
          dl.href = url;
          // Prefer real download for local blob/data URLs; otherwise open in new tab
          const isLocal = url.startsWith('blob:') || url.startsWith('data:');
          if (isLocal) {
            dl.removeAttribute('target');
            dl.download = `strip_step_${perStripSelectedStep}.png`;
          } else {
            dl.removeAttribute('download');
            dl.setAttribute('target', '_blank');
            dl.setAttribute('rel', 'noopener');
          }
        }
        // In per-stamp mode, use the chosen per-step image on the card and hide canvas
        if (img && (cardType === 'razitkova' && stampMode === 'perStamp')) {
          img.src = url;
          img.style.display = 'block';
          if (cv) cv.style.display = 'none';
        }
      } catch(_) {}
    }

    function onPerStripDownloadClick(e) {
      try { e.preventDefault(); e.stopPropagation(); } catch(_) {}
      const fallback = (selectedStripUrl && selectedStripUrl.trim())
        ? selectedStripUrl
        : 'https://static.wixstatic.com/media/1cf87e_3ae4f6a9c66a44ef9aa950f489356001~mv2.png';
      const url = perStripUrls[perStripSelectedStep] || fallback;
      // For blob/data URLs trigger real download without leaving the page
      if (url.startsWith('blob:') || url.startsWith('data:')) {
        const a = document.createElement('a');
        a.href = url;
        a.download = `strip_step_${perStripSelectedStep}.png`;
        document.body.appendChild(a);
        a.click();
        setTimeout(() => { try { document.body.removeChild(a); } catch(_) {} }, 0);
        return false;
      }
      // Cross-origin URLs: open in new tab so UI is not blocked
      try { window.open(url, '_blank', 'noopener,noreferrer'); } catch(_) {}
      return false;
    }

    function pickPresetColor(color, el) {
      clearSelected();
      if (el) el.classList.add('selected');
      setCardColor(color);
      // reset custom picker to match chosen
      const cc = document.getElementById('customColor');
      try { cc.value = toHex(color); } catch(e) {}
      
      // Zastavení animace karet
      stopExampleSlideshow();
      document.getElementById('examplePreview').style.display = 'none';
      document.getElementById('fakeCard').style.display = 'block';
    }

    function pickCustomColor(color) {
      clearSelected();
      setCardColor(color);
      
      // Zastavení animace karet
      stopExampleSlideshow();
      document.getElementById('examplePreview').style.display = 'none';
      document.getElementById('fakeCard').style.display = 'block';
    }

    function pickTopMode(mode, el) {
      topMode = mode; // 'napis' | 'logo'
      document.querySelectorAll('#step-2 .option').forEach(o => o.classList.remove('selected'));
      if (el) el.classList.add('selected');
      // pokud jsme ve kroku 2, ihned zobrazit správné ovládací prvky a náhled + validovat
      if (currentStep === 2) {
        const napisWrap = document.getElementById('napisWrapper');
        const logoWrap = document.getElementById('logoWrapper');
        const next = getCurrentNextBtn();
        if (topMode === 'napis') {
          if (napisWrap) napisWrap.style.display = 'flex';
          if (logoWrap) logoWrap.style.display = 'none';
          const fSel = document.getElementById('napisFont');
          if (fSel) fSel.value = napisFont;
          const cInp = document.getElementById('napisColor');
          if (cInp) cInp.value = napisColor;
          updateNapisUI();
          renderLogoSlot();
          const first = (napisText || '').split('\n')[0].trim();
          if (next) next.disabled = (first.length === 0);
        } else {
          if (napisWrap) napisWrap.style.display = 'none';
          if (logoWrap) logoWrap.style.display = 'flex';
          // re-render slot so any previously typed text disappears when switching to logo
          renderLogoSlot();
          if (next) next.disabled = (logoUrl.trim().length === 0);
        }
        setTopModePreviewSrc();
      }
    }

    function pickCardType(type, el) {
        if (type === 'razitkova' && !stampMode) {
            stampMode = 'standard';
        }
      cardType = type;

      document.querySelectorAll('#step-4 .type-card').forEach(b => b.classList.remove('selected'));
      if (el) el.classList.add('selected');
      const next = getCurrentNextBtn();
      if (next) next.disabled = false;
      applyCardType(type);
      // Okamžité zobrazení razítek při výběru razítkové karty
      if (type === 'razitkova') {
        setTimeout(() => {
          positionStrip();
          setStripBackground();
          renderStrip();
        }, 10);
      }
      // Update compact description panel
      updateTypeDescription(type);
      const panel = document.getElementById('typeDescPanel');
      if (panel) panel.style.display = 'block';
    }

    // --- Step 4: Dynamic type descriptions ---
    function updateTypeDescription(type) {
      const shortEl = document.getElementById('typeDescShort');
      const moreEl = document.getElementById('typeDescMore');
      const toggle = document.getElementById('typeDescToggle');
      if (!shortEl || !moreEl || !toggle) return;

      const COPY = {
        razitkova: {
          short: 'Zákazník sbírá razítka za návštěvy; po zaplnění získá odměnu.',
          more: `
            <ul>
              <li>+ Maximálně jednoduché – každý zákazník hned chápe, jak se dostat k odměně.</li>
              <li>+ Silná motivace dokončit – lidé se vrátí, aby zaplnili poslední políčka.</li>
              <li>- Neodměňuje vyšší útratu – za službu za 500 Kč i 1500 Kč je stále jen jedno razítko.</li>
            </ul>
          `
        },
        bodova: {
          short: 'Zákazník sbírá body podle útraty (např. 1 Kč = 1 bod) a mění je za služby nebo slevy.',
          more: `
            <ul>
              <li>+ Odměňuje velké útraty – motivuje k nákupu dražších služeb a produktů.</li>
              <li>+ Flexibilní odměny – sami určíte hodnotu služeb v bodech a chráníte marži.</li>
              <li>- Složitější pro zákazníka – hodnota bodů není vždy jasná, motivace může klesat.</li>
            </ul>
          `
        },
        procentni: {
          short: 'Okamžitý cashback z každé útraty (např. 5 %) jako kredit na další nákup.',
          more: `
            <ul>
              <li>+ Nejatraktivnější pro zákazníka – peníze zpět jsou jasné a silné lákadlo.</li>
              <li>+ Podporuje okamžitý návrat – kredit motivuje k další návštěvě.</li>
              <li>+ Nekonečná potřeba vyvarovat se ztrátě peněz na kartě = další návštěva.</li>
              <li>+ Uživatel má tendenci více utrácet pro dosažení vyšší slevy a statusu.</li>
              <li>– Chybí snaha dosáhnout většího cíle.</li>
            </ul>
          `
        },
        revolution: {
          short: 'Zákazník dostane za každou útratu část peněz zpět na kartu. V momentě, kdy dosáhne určité částky, může naspořené peníze použít na některou ze služeb nebo produktů. (Funguje to podobně jako razítková karta, ale zákazník je více propojen díky pocitu, že místo střádání razítek střádá peníze.)',
          more: `
            <p>Revoluční kombinace – zákazníkovi se načítají procenta z útraty (např. 10 %) a ty může použít až po dosažení cílové částky (např. ceny střihu). Průběžně vidí svůj pokrok i bonusové peníze, které se mu hromadí.</p>
            <ul>
              <li>+ Chrání marži – odměnu dáváte až poté, co zákazník utratí dostatek peněz.</li>
              <li>+ Maximálně motivuje – kombinuje hodnotu peněz (cashback) a jasný vizuální cíl.</li>
              <li>+ Uživatel se cítí průběžně odměňován, ale odměnu získá až na konci.</li>
              <li>+ Uživatel má tendenci více utrácet pro vyšší slevu a status.</li>
            </ul>
          `
        }
      };

      const c = COPY[type] || COPY['revolution'];
      shortEl.innerHTML = c.short;
      moreEl.innerHTML = c.more;
      // Reset to compact state
      moreEl.style.display = 'none';
      toggle.textContent = 'Více informací';
    }

    function toggleTypeDesc() {
      const moreEl = document.getElementById('typeDescMore');
      const toggle = document.getElementById('typeDescToggle');
      if (!moreEl || !toggle) return;
      const isHidden = (moreEl.style.display === 'none' || moreEl.style.display === '');
      moreEl.style.display = isHidden ? 'block' : 'none';
      toggle.textContent = isHidden ? 'Méně informací' : 'Více informací';
    }

    function onNapisInput() {
      const ta = document.getElementById('napisTextarea');
      let v = (ta?.value || '').replace(/\r/g, '');
      // Omezení na 2 řádky
      const parts = v.split('\n');
      if (parts.length > 2) {
        v = parts.slice(0, 2).join('\n');
        if (ta) ta.value = v;
      }
      napisText = v;

      // Odložíme volání o 50ms, aby se stihl připravit layout a font
      setTimeout(renderLogoSlot, 50);

      setTopModePreviewSrc(); // Skryje placeholder obrázek
      const next = getCurrentNextBtn();
      const first = v.split('\n')[0].trim();
      if (next) next.disabled = (first.length === 0);
    }

    // Prevent more than one Enter (so there are at most 2 lines)
    function napisKeyDown(e) {
      try {
        if (e.key === 'Enter') {
          const ta = e.target;
          const value = (ta?.value || '').replace(/\r/g, '');
          if (value.includes('\n')) {
            e.preventDefault();
            return false;
          }
        }
      } catch (_) {}
    }

    function onNapisInput2() {
      const v = document.getElementById('napisInput2').value || '';
      napisText2 = v;
      renderLogoSlot();
      const next = getCurrentNextBtn();
      // pro dvojřádek stačí, aby 1. řádek nebyl prázdný
      if (next) next.disabled = (napisLayout === 'single') ? (napisText.trim().length === 0) : (napisText.trim().length === 0);
    }

    // Nastaví/vypne dočasný náhled v kroku 2 podle topMode
    function hideTopModePreview() {
      const img = document.getElementById('topModePreview');
      if (!img) return;
      img.style.display = 'none';
    }

    // Layout a zarovnání nápisu (krok 2)
    function pickNapisLayout(layout, el) {
      napisLayout = layout === 'double' ? 'double' : 'single';
      updateNapisUI();
      renderLogoSlot();
      const next = getCurrentNextBtn();
      if (next) next.disabled = (napisLayout === 'single') ? (napisText.trim().length === 0) : (napisText.trim().length === 0);
    }

    function updateNapisUI() {
      const ta = document.getElementById('napisTextarea');
      if (ta) ta.value = napisText || '';
      updateAlignUI();
    }

    function pickNapisAlign(align, el) {
      napisAlign = (align === 'center' || align === 'right') ? align : 'left';
      updateAlignUI();
      renderLogoSlot();
    }

    function updateAlignUI() {
      const left = document.getElementById('alignLeftBtn');
      const center = document.getElementById('alignCenterBtn');
      const right = document.getElementById('alignRightBtn');
      [left, center, right].forEach(b => b && b.classList.remove('selected'));
      if (napisAlign === 'left' && left) left.classList.add('selected');
      if (napisAlign === 'center' && center) center.classList.add('selected');
      if (napisAlign === 'right' && right) right.classList.add('selected');
    }

    function setTopModePreviewSrc() {
      const img = document.getElementById('topModePreview');
      if (!img) return;
      if (currentStep !== 2) { img.style.display = 'none'; return; }
      // Show sample only if there is no real input yet
      if (topMode === 'napis') {
        if (napisText && napisText.trim().length > 0) { img.style.display = 'none'; return; }
      } else if (topMode === 'logo') {
        if (logoUrl && logoUrl.trim().length > 0) { img.style.display = 'none'; return; }
      }
      const napisUrl = 'https://static.wixstatic.com/media/1cf87e_3461a98c2ad64e1e96caf24c3d6c0f32~mv2.png';
      const logoUrlSample = 'https://static.wixstatic.com/media/1cf87e_cba3a7fc225c4665a9be53443b3c9ee7~mv2.png';
      img.src = (topMode === 'napis') ? napisUrl : logoUrlSample;
      img.style.display = 'block';
    }

    function onNapisFontChange() {
      const sel = document.getElementById('napisFont');
      if (sel) {
        napisFont = sel.value || 'Arial';
        renderLogoSlot();
      }
    }

    function onNapisColorChange() {
      const inp = document.getElementById('napisColor');
      if (inp) {
        napisColor = inp.value || '#ff0000';
        renderLogoSlot();
      }
    }

    // Toggle palette visibility for text color
    function toggleTextPalette() {
      const p = document.getElementById('textColorPalette');
      if (!p) return;
      p.style.display = (p.style.display === 'none' || p.style.display === '') ? 'block' : 'none';
    }

    // Ensure clicking the small color square opens the palette (not native picker)
    function openTextPaletteFromColor(e) {
      try { e.preventDefault(); e.stopPropagation(); } catch (_) {}
      const p = document.getElementById('textColorPalette');
      if (!p) return false;
      p.style.display = 'block';
      return false;
    }

    function clearTextSelected() {
      document.querySelectorAll('#textColorPalette .text-swatch').forEach(s => s.classList.remove('selected'));
    }

    function pickTextPresetColor(color, el) {
      clearTextSelected();
      if (el) el.classList.add('selected');
      napisColor = color;
      // sync the tiny color input next to the button
      const c = document.getElementById('napisColor');
      try { if (c) c.value = toHex(color); } catch(e) {}
      // sync the custom input inside palette too
      const tc = document.getElementById('textCustomColor');
      try { if (tc) tc.value = toHex(color); } catch(e) {}
      renderLogoSlot();
      // auto-close palette after pick
      const p = document.getElementById('textColorPalette');
      if (p) p.style.display = 'none';
    }

    function pickTextCustomColor(color) {
      clearTextSelected();
      napisColor = color;
      const c = document.getElementById('napisColor');
      if (c) c.value = color;
      renderLogoSlot();
      const p = document.getElementById('textColorPalette');
      if (p) p.style.display = 'none';
    }

    function onLogoUrlInput() {
      const v = document.getElementById('logoUrlInput').value || '';
      logoUrl = v;
      renderLogoSlot();
      setTopModePreviewSrc();
      const next = getCurrentNextBtn();
      if (next) next.disabled = v.trim().length === 0;
    }

    function onLogoFileChange(input) {
      try {
        const file = input && input.files && input.files[0];
        // revoke previous
        if (logoObjectUrl) { try { URL.revokeObjectURL(logoObjectUrl); } catch(_) {} logoObjectUrl = null; }
        if (!file) {
          logoUrl = '';
          renderLogoSlot();
          setTopModePreviewSrc();
          const next = getCurrentNextBtn();
          if (next) next.disabled = true;
          return;
        }
        const objUrl = URL.createObjectURL(file);
        logoObjectUrl = objUrl;
        logoUrl = objUrl;
        renderLogoSlot();
        setTopModePreviewSrc(); // hide sample overlay when real logo selected
        const next = getCurrentNextBtn();
        if (next) next.disabled = false;
      } catch (_) {}
    }

    async function renderLogoSlot() {
        const slot = document.getElementById('logoSlot');
        if (!slot) return;

        // ⭐ KROK 1: Zjistíme SKUTEČNÝ název fontu z HTML (z value atributu)
        const fontSelect = document.getElementById('napisFont');
        const correctFontName = fontSelect ? fontSelect.value : 'tan-nimbus-2-webfont';

        // ⭐ KROK 2: Počkáme, dokud není tento konkrétní font načtený
        try {
            await document.fonts.load(`1em '${correctFontName}'`);
        } catch (e) {
            console.error('Font se nepodařilo načíst:', e);
        }
        
        // Zbytek funkce je téměř stejný, jen použijeme správný název fontu
        slot.innerHTML = '';
        
        // DEBUG: Zkontrolujeme hodnoty
        console.log('renderLogoSlot DEBUG:', {
            topMode: topMode,
            napisText: napisText,
            hasText: !!(napisText || '').trim(),
            condition: topMode === 'napis' && (napisText || '').trim()
        });
        
        if (topMode === 'napis' && (napisText || '').trim()) {
            const text = (napisText || '').replace(/\r/g, '');
            const parts = text.split('\n');
            const maxW = slot?.clientWidth || 120;
            
            if (parts.length === 1) {
                const el = document.createElement('div');
                // ⭐ KROK 3: Použijeme správný název fontu pro vykreslení
                el.style.fontFamily = correctFontName || 'Arial'; 
                el.style.color = napisColor || '#ff0000';
                el.style.lineHeight = 'normal';
                el.style.width = '100%';
                el.style.fontWeight = 'bold';
                el.style.margin = '0';
                el.style.padding = '0';
                el.style.overflow = 'hidden';
                el.style.whiteSpace = 'nowrap';
                el.style.textAlign = napisAlign;
                el.textContent = parts[0];
                slot.appendChild(el);
                autoSizeTextSingleLine(el, maxW, 45);
            } else {
                const wrap = document.createElement('div');
                wrap.style.width = '100%';
                wrap.style.display = 'flex';
                wrap.style.flexDirection = 'column';
                wrap.style.lineHeight = 'normal';
                // ⭐ KROK 3: Použijeme správný název fontu i zde
                wrap.style.fontFamily = correctFontName || 'Arial';
                wrap.style.color = napisColor || '#ff0000';
                wrap.style.fontWeight = 'bold';
                wrap.style.margin = '0';
                wrap.style.padding = '0';
                wrap.style.overflow = 'hidden';
                wrap.style.textAlign = napisAlign;

                const l1 = document.createElement('div');
                const l2 = document.createElement('div');
                [l1, l2].forEach((el) => {
                    el.style.whiteSpace = 'nowrap';
                    el.style.width = '100%';
                    el.style.margin = '0';
                    el.style.padding = '0';
                    el.style.overflow = 'hidden';
                    el.style.textAlign = 'inherit';
                });
                l1.textContent = parts[0];
                l2.textContent = parts[1] || '';
                wrap.appendChild(l1);
                wrap.appendChild(l2);
                slot.appendChild(wrap);
                autoSizeTwoLines(wrap, maxW, 56);
            }
        } else if (topMode === 'logo' && logoUrl.trim()) {
            const img = document.createElement('img');
            img.className = 'logo-img';
            img.src = logoUrl.trim();
            img.alt = 'Logo';
            slot.appendChild(img);
        }
        
        try {
            positionStrip();
            setStripBackground();
            renderStrip();
        } catch (_) {}
    }

    // Autofit helpers for Wix-like behavior (no wrapping for single line)
    function autoSizeTextSingleLine(el, maxW, maxH) {
      try {
        let size = 24;
        el.style.fontSize = size + 'px';
        el.style.lineHeight = (size * 1.2) + 'px';
        el.style.whiteSpace = 'nowrap';
        for (let i = 0; i < 30; i++) {
          if (el.scrollWidth <= maxW && el.scrollHeight <= maxH) break;
          size -= 1;
          if (size < 8) break;
          el.style.fontSize = size + 'px';
          el.style.lineHeight = (size * 1.2) + 'px';
        }
      } catch (_) {}
    }

    function autoSizeTwoLines(wrap, maxW, maxH) {
      try {
        const lines = Array.from(wrap.children);
        let size = 18;
        lines.forEach(el => {
          el.style.fontSize = size + 'px';
          el.style.lineHeight = (size * 1.2) + 'px';
        });
        for (let i = 0; i < 30; i++) {
          const tooWide = lines.some(el => el.scrollWidth > maxW);
          const tooTall = wrap.scrollHeight > maxH;
          if (!tooWide && !tooTall) break;
          size -= 1;
          if (size < 8) break;
          lines.forEach(el => {
            el.style.fontSize = size + 'px';
            el.style.lineHeight = (size * 1.2) + 'px';
          });
        }
      } catch (_) {}
    }

    // Simple auto-size to make text fit within given box (width x height)
    function autoSizeText(el, maxW, maxH) {
      try {
        let size = 24; // starting font size
        el.style.whiteSpace = 'pre-wrap';
        el.style.wordBreak = 'break-word';
        el.style.fontSize = size + 'px';
        // ensure layout is updated before measuring
        const parent = el.parentElement;
        if (!parent) return;
        const maxWidth = Math.max(0, maxW);
        const maxHeight = Math.max(0, maxH);
        for (let i = 0; i < 30; i++) {
          // if fits, break; else decrease size
          if (el.scrollWidth <= maxWidth && el.scrollHeight <= maxHeight) break;
          size -= 1;
          if (size < 8) { size = 8; break; }
          el.style.fontSize = size + 'px';
        }
      } catch (_) {}
    }

    function pickShowCustomer(val, el) {
      showCustomer = !!val;
      document.querySelectorAll('#step-4 .option').forEach(o => o.classList.remove('selected'));
      if (el) el.classList.add('selected');
      const next = getCurrentNextBtn();
      if (next) next.disabled = false;
      renderCustomer();
    }

    function onCustomerNameInput() {
      const v = document.getElementById('customerNameInput').value || '';
      customerName = v;
      renderCustomer();
      const next = getCurrentNextBtn();
      if (next) next.disabled = v.trim().length === 0;
    }

    function renderCustomer() {
      const ci = document.getElementById('customerInfo');
      const cn = document.getElementById('custName');
      if (showCustomer) {
        ci.style.display = 'block';
        cn.textContent = customerName && customerName.trim() ? customerName.trim() : 'Jan Novák';
      } else {
        ci.style.display = 'none';
      }
    }

    function pickShowStrip(val, el) {
      showStrip = !!val;
      stripVisibilityUserEdited = true;
      document.querySelectorAll('#step-6 .option').forEach(o => o.classList.remove('selected'));
      if (el) el.classList.add('selected');
      const next = getCurrentNextBtn();
      if (next) next.disabled = false;
      positionStrip();
      setStripBackground();
      renderStrip();
    }

    function onStripTextInput() {
      const v = document.getElementById('stripInput').value || '';
      stripText = v;
      stripTextUserEdited = true;
      renderStrip();
      const next = getCurrentNextBtn();
      if (next) next.disabled = v.trim().length === 0;
    }

    // --- Mini controls for strip text (position, color, size) ---
    function updateStripMiniUI() {
      // Position buttons
      const posMap = {
        top: document.getElementById('posTopBtn'),
        center: document.getElementById('posCenterBtn'),
        bottom: document.getElementById('posBottomBtn')
      };
      Object.keys(posMap).forEach(k => {
        const b = posMap[k];
        if (b) b.classList.toggle('selected', stripTextPos === k);
      });
      // Size buttons
      const sizeButtons = (document.getElementById('stripSizeGroup') || {}).querySelectorAll ? document.getElementById('stripSizeGroup').querySelectorAll('.mini-btn') : [];
      sizeButtons && sizeButtons.forEach(btn => {
        const val = btn.textContent && btn.textContent.trim();
        btn.classList.toggle('selected', val === stripTextSize);
      });
      // Color input (sync both the tiny square and custom input in palette)
      const ci = document.getElementById('stripColor');
      if (ci && stripTextColor) {
        try { ci.value = toHex(stripTextColor); } catch(e) { ci.value = stripTextColor; }
      }
      const sc = document.getElementById('stripCustomColor');
      if (sc && stripTextColor) {
        try { sc.value = toHex(stripTextColor); } catch(e) { sc.value = stripTextColor; }
      }
    }

    function pickStripPos(pos, el) {
      stripTextPos = pos;
      updateStripMiniUI();
      renderStrip();
    }

    function pickStripSize(sz, el) {
      stripTextSize = sz;
      updateStripMiniUI();
      renderStrip();
    }

    function onStripColorChange() {
      const ci = document.getElementById('stripColor');
      const val = ci && ci.value ? ci.value : '#000000';
      stripTextColor = val;
      renderStrip();
    }

    // --- Strip color palette handlers (mirror of step 2 text palette) ---
    function toggleStripPalette() {
      const p = document.getElementById('stripColorPalette');
      if (!p) return;
      p.style.display = (p.style.display === 'none' || p.style.display === '') ? 'block' : 'none';
    }

    function openStripPaletteFromColor(e) {
      try { e.preventDefault(); e.stopPropagation(); } catch (_) {}
      const p = document.getElementById('stripColorPalette');
      if (!p) return false;
      p.style.display = 'block';
      return false;
    }

    function clearStripSelected() {
      document.querySelectorAll('#stripColorPalette .strip-swatch').forEach(s => s.classList.remove('selected'));
    }

    function pickStripPresetColor(color, el) {
      clearStripSelected();
      if (el) el.classList.add('selected');
      stripTextColor = color;
      // sync mini square and custom input
      const sq = document.getElementById('stripColor');
      try { if (sq) sq.value = toHex(color); } catch(e) { if (sq) sq.value = color; }
      const cc = document.getElementById('stripCustomColor');
      try { if (cc) cc.value = toHex(color); } catch(e) { if (cc) cc.value = color; }
      renderStrip();
      const p = document.getElementById('stripColorPalette');
      if (p) p.style.display = 'none';
    }

    function pickStripCustomColor(color) {
      clearStripSelected();
      stripTextColor = color;
      const sq = document.getElementById('stripColor');
      if (sq) sq.value = color;
      renderStrip();
      const p = document.getElementById('stripColorPalette');
      if (p) p.style.display = 'none';
    }

    function renderStrip() {
      const st = document.getElementById('stripTextElem');
      const img = document.getElementById('stripResultImg');
      // Image (strip background) is always visible; toggle only the text overlay
      if (img) img.style.display = 'block';
      
      // Render stamps on canvas if we're in razitkova mode (matching WIX.txt logic)
      if (cardType === 'razitkova' && stampMode !== 'perStamp') {
        const stripUrl = img ? img.src : null;
        if (stripUrl) {
          renderStripOnCanvas(stripUrl);
        }
      } else {
        // Clear canvas when not in razitkova mode
        const cv = document.getElementById('stripCanvas');
        if (cv) {
          const ctx = cv.getContext('2d');
          ctx.clearRect(0, 0, cv.width, cv.height);
        }
      }
      
      if (!st) return;
      if (showStrip) {
        st.style.display = 'flex';
        st.textContent = stripText && stripText.trim() ? stripText.trim() : '';
        // Apply position
        if (stripTextPos === 'top') {
          st.style.alignItems = 'flex-start';
          st.style.padding = '6px 10px 0';
        } else if (stripTextPos === 'center') {
          st.style.alignItems = 'center';
          st.style.padding = '0 10px 0';
        } else { // bottom
          st.style.alignItems = 'flex-end';
          st.style.padding = '0 10px 6px';
        }
        // Apply color and size
        st.style.color = stripTextColor || '#000000';
        st.style.fontWeight = '700';
        const sizePx = (stripTextSize === 'XS') ? 12 : (stripTextSize === 'S') ? 14 : (stripTextSize === 'L') ? 22 : 18;
        st.style.fontSize = sizePx + 'px';
      } else {
        st.style.display = 'none';
        st.textContent = '';
      }
    }

    // Dynamicky spočítá pozici a výšku pásu (stripu) mezi logem a spodní zónou (razítka/Ušetřil/Body)
    function positionStrip() {
      const img = document.getElementById('stripResultImg');
      const st  = document.getElementById('stripTextElem');
      const card = document.getElementById('fakeCard');
      const logo = document.getElementById('logoSlot');
      if (!img || !st || !card) return;

      // Spodní zóna začíná na 170px (viz CSS: top: 170px u razítek/Ušetřil/Body)
      const bottomAreaTop = 170;
      const gapTop = 6;    // mezera pod logem
      const gapBottom = 8; // mezera nad spodní zónou

      const topBase = logo ? (logo.offsetTop + logo.offsetHeight) : 61;
      let top = Math.round(topBase + gapTop);
      // Výška pásu musí přesně vyplnit prostor nad spodní zónou, nesmí ji překrývat
      const available = bottomAreaTop - top - gapBottom;
      // Keep the strip image at its natural aspect ratio (5:2 => 246/624)
      const desired = Math.round(card.clientWidth * (246 / 624));
      let h = Math.max(0, Math.min(available, desired));

      // Omezit výšku, aby nepřesahovala kartu
      const maxH = Math.max(20, card.clientHeight - top - 10);
      if (h > maxH) h = maxH;

      // Aplikovat styly
      img.style.top = top + 'px';
      img.style.height = h + 'px';
      st.style.top = top + 'px';
      st.style.height = h + 'px';
      // Use flex alignment in CSS; keep normal line-height
      st.style.lineHeight = 'normal';

      // Uložit výšku pro generování pozadí
      stripBandHeight = h;
      // Apply same geometry to canvas overlay
      const cv = document.getElementById('stripCanvas');
      if (cv) {
        cv.style.top = top + 'px';
        cv.style.height = h + 'px';
      }
      // strip background will be re-rendered after this via setStripBackground()
    }

    // Canvas helpers for strip composition (pattern + razítka)
    function loadImage(url) {
      return new Promise((resolve, reject) => {
        const im = new Image();
        im.onload = () => resolve(im);
        im.onerror = reject;
        im.src = url;
      });
    }

    async function renderStripOnCanvas(patternUrl) {
      if (stampBorderShape === 'custom' && stampBorderCustomUrl) {
        try {
          currentCustomBorderImg = await loadImage(stampBorderCustomUrl);
        } catch(e) {
          console.error("Failed to load custom border image:", e);
          currentCustomBorderImg = null;
        }
      } else {
        currentCustomBorderImg = null;
      }

      const card = document.getElementById('fakeCard');
      const cv = document.getElementById('stripCanvas');
      if (!cv || !card) return;
      const w = card.clientWidth;
      const h = stripBandHeight > 0 ? stripBandHeight : Math.round(w * (246/624));
      cv.width = w;
      cv.height = h;
      const ctx = cv.getContext('2d');
      ctx.clearRect(0, 0, w, h);

      if (cardType === 'razitkova') {
        try {
          const iconUrl = stampIconUrl || defaultStampUrl;
          const stampImg = await loadImage(iconUrl);
          currentStampImg = stampImg;
          
          try {
            const iconPrev = document.getElementById('borderShapeIconImg');
            if (iconPrev) iconPrev.src = iconUrl;
          } catch(_) {}
          
          const n = stampTotal;
          let stampsToDraw = n;
          let shouldDrawBorder = stampBorderEnabled && currentStep >= 7;

          if (currentStep === 7.5) {
            if (stampPreviewMode === 'none') stampsToDraw = 0;
            else if (stampPreviewMode === 'partial') stampsToDraw = Math.ceil(n / 2);
          }

          const totalRow1Count = Math.ceil(n / 2);
          const totalRow2Count = n - totalRow1Count;
          const actualSize = Math.max(1, stampSize);
          const gap = Math.max(2, stampGap);
          
          ctx.save();
          ctx.globalAlpha = Math.max(0, Math.min(1, stampOpacity));
          
          if (totalRow1Count > 0) {
            const row1W = totalRow1Count * actualSize + (totalRow1Count - 1) * gap;
            const row1StartX = Math.floor((w - row1W) / 2);
            const row1Y = Math.floor((h / 2) - (actualSize + gap / 2));
            for (let i = 0; i < totalRow1Count; i++) {
              const x = row1StartX + i * (actualSize + gap);
              if (shouldDrawBorder) {
                drawStampBorder(ctx, x, row1Y, actualSize);
              }
              const currentStampIndex = i;
              if (currentStampIndex < stampsToDraw) {
                ctx.drawImage(stampImg, x, row1Y, actualSize, actualSize);
              }
            }
          }
          
          if (totalRow2Count > 0) {
            const row2W = totalRow2Count * actualSize + (totalRow2Count - 1) * gap;
            const row2StartX = Math.floor((w - row2W) / 2);
            const row2Y = Math.floor((h / 2) + (gap / 2));
            for (let i = 0; i < totalRow2Count; i++) {
              const x = row2StartX + i * (actualSize + gap);
              if (shouldDrawBorder) {
                drawStampBorder(ctx, x, row2Y, actualSize);
              }
              const currentStampIndex = totalRow1Count + i;
              if (currentStampIndex < stampsToDraw) {
                ctx.drawImage(stampImg, x, row2Y, actualSize, actualSize);
              }
            }
          }
          ctx.restore();
          
        } catch (e) {
          console.error("Chyba při vykreslování razítek:", e);
        }
      }
    }

    function pickTextColor(color, el) {
      textColor = color;
      document.querySelectorAll('#step-8 .swatch').forEach(s => s.classList.remove('selected'));
      if (el) el.classList.add('selected');
      setTextColor(color);
      const cc = document.getElementById('customTextColor');
      try { cc.value = toHex(color); } catch(e) {}
      const next = getCurrentNextBtn();
      if (next) next.disabled = false;
    }

    function pickCustomTextColor(color) {
      textColor = color;
      document.querySelectorAll('#step-8 .swatch').forEach(s => s.classList.remove('selected'));
      setTextColor(color);
      const next = getCurrentNextBtn();
      if (next) next.disabled = false;
    }

    function setTextColor(color) {
      // applies to elements using var(--discountColor)
      const card = document.getElementById('fakeCard');
      if (card) card.style.setProperty('--discountColor', color);
    }

    function toHex(c) {
      // accepts #RRGGBB or rgb(a) strings, returns #RRGGBB (best effort)
      if (c.startsWith('#') && (c.length === 7 || c.length === 4)) return c.length === 7 ? c : shortToFullHex(c);
      if (c.startsWith('rgb')) {
        const m = c.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/i);
        if (m) {
          const [r,g,b] = m.slice(1,4).map(n => Number(n));
          return '#' + [r,g,b].map(v => v.toString(16).padStart(2,'0')).join('');
        }
      }
      return '#ffffff';
    }
    function shortToFullHex(s) {
      // #abc -> #aabbcc
      return '#' + s.slice(1).split('').map(ch => ch + ch).join('');
    }

    function nextStepNum() {
      switch (currentStep) {
        case 1: return 2;
        case 2: return 3;
        case 3: return 4;
        case 4:
          if (cardType === 'revolution') return 5.5;
          return 5;
        case 5:
          return 6;
        case 5.5: return 5.6;
        case 5.6: return 6;
        case 6:
          if (cardType === 'razitkova' && stampMode === 'standard') {
            return 7;
          }
          return showStrip ? 8 : 9;
        case 7:
          return stampBorderEnabled ? 7.5 : 10;
        case 7.5:
          return 10;
        case 8:
          return 9;
        case 9:
          return 10;
        default: return currentStep + 1;
      }
    }

    function prevStepNum() {
        switch (currentStep) {
            case 10:
                if (cardType === 'razitkova' && stampMode === 'standard') return 7;
                return showStrip ? 9 : 6;
            case 9: return showStrip ? 8 : 6;
            case 8: return 6;
            case 7: return 6;
            case 6:
                if (cardType === 'revolution') return 5.6;
                return 5;
            case 5.6: return 5.5;
            case 5.5: return 4;
            case 5: return 4;
            case 4: return 3;
            case 3: return 2;
            case 2: return 1;
            default: return 1;
        }
    }

    function goNext() {
      // validation per step
      if (currentStep === 1 && !pickedColor) return;
      if (currentStep === 2) {
        if (!topMode) return;
        if (topMode === 'napis' && !napisText.trim()) return;
        if (topMode === 'logo' && !logoUrl.trim()) return;
      }
      if (currentStep === 4 && !cardType) return;
      // Bodová: validace kroku 5
      if (currentStep === 5 && cardType === 'bodova') {
        if (!isBodovaValid()) return;
      }
      // Procentní: validace kroku 5
      if (currentStep === 5 && cardType === 'procentni') {
        if (!procentniLevels || procentniLevels.length === 0) return;
        // Kontrola, že všechny úrovně mají vyplněné názvy a slevy
        for (let level of procentniLevels) {
          if (!level.name || level.name.trim() === '' || level.discount == null || level.discount < 0) return;
        }
      }
      // Revolution: validace kroku 5.5
      if (currentStep === 5.5) {
        if (!revolutionMode) return;
      }
      // Revolution: validace kroku 5.6
      if (currentStep === 5.6) {
        if (revolutionShowProgress == null) return;
        // Pokud je zapnutý progres a custom režim, kontrolujeme povinná pole
        if (revolutionShowProgress && revolutionGfxMode === 'custom') {
          if (!revolutionBonusMin || revolutionBonusMin <= 0) return;
          if (!revolutionMilestones || revolutionMilestones <= 1) return;
        }
      }
      if (currentStep === 8 && !stripText.trim()) return;
    
    stepHistory.push(currentStep); // PŘIDANÝ ŘÁDEK
      showStep(nextStepNum());
    }

    function goBack() {
        if (stepHistory.length > 0) {
            const lastStep = stepHistory.pop(); // Získáme poslední krok z historie
            showStep(lastStep);
        } else if (currentStep > 1) {
            // Fallback, pokud by byla historie prázdná
            showStep(currentStep - 1);
        }
    }

    function finishWizard() {
      alert('Hotovo! Výběry byly použity na náhledu karty.');
    }

    // utilities
    function escapeHtml(str) {
      return str.replace(/[&<>"']/g, function(m) {
        return ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[m]);
      });
    }

    // Intro preview slideshow
    function startExampleSlideshow() {
      const img = document.getElementById('examplePreview');
      if (!img) return;
      if (previewTimer) { clearInterval(previewTimer); previewTimer = null; }
      previewIndex = 0;
      img.src = previewUrls[previewIndex];
      previewTimer = setInterval(() => {
        previewIndex = (previewIndex + 1) % previewUrls.length;
        img.src = previewUrls[previewIndex];
      }, 1700);
    }

    function stopExampleSlideshow() {
      if (previewTimer) { clearInterval(previewTimer); previewTimer = null; }
    }
    
    // Nová proměnná pro sledování stavu wizardů
    let wizardStarted = false; // Sledujeme, zda proces již začal

    function startIntro() {
        // Zobrazí se úvodí animace karet
        document.getElementById('examplePreview').style.display = 'block';
        document.getElementById('fakeCard').style.display = 'none';
        startExampleSlideshow();
        
        // Nastavíme, že průvodce již běží
        wizardStarted = true;
        
        // Zobrazíme první krok (výběr barvy)
        showStep(1);
    }

    // Global scaling: auto-fit to viewport width, with optional manual override via ?scale=0.8
    function getManualScaleFromQuery() {
      try {
        const params = new URLSearchParams(location.search);
        const s = params.get('scale');
        if (!s) return null;
        const f = parseFloat(s);
        if (isFinite(f) && f > 0) return Math.max(0.3, Math.min(2, f));
      } catch (_) {}
      return null;
    }

    function applyScale(s) {
      document.documentElement.style.setProperty('--ui-scale', String(s));
      const inp = document.getElementById('scaleInput');
      if (inp && document.activeElement !== inp) {
        try { inp.value = Number(s).toFixed(2); } catch(_) {}
      }
    }

    function autoScale() {
      if (manualScale !== null) { applyScale(manualScale); return; }
      const manual = getManualScaleFromQuery();
      if (manual) { applyScale(manual); return; }
      const base = 340; // base width of builder
      const horizontalPadding = 32; // body padding: 16 left + 16 right
      const avail = Math.max(0, Math.min(window.innerWidth, document.documentElement.clientWidth) - horizontalPadding);
      const s = Math.min(1, Math.max(0.5, avail / base));
      applyScale(s);
    }

    window.addEventListener('resize', autoScale);
    window.addEventListener('orientationchange', autoScale);

    // init
    (function initScale() {
      const qp = getManualScaleFromQuery();
      if (qp !== null) { manualScale = qp; applyScale(manualScale); }
      else { autoScale(); }
      const si = document.getElementById('scaleInput');
      if (si) {
        const handle = (e) => {
          const val = parseFloat(e.target.value);
          if (isFinite(val)) {
            manualScale = Math.max(0.3, Math.min(2, val));
            applyScale(manualScale);
          }
        };
        si.addEventListener('input', handle);
        si.addEventListener('change', handle);
      }
    })();
    startIntro();

    function applyCardType(type) {
      console.log('applyCardType called with type:', type);
      cardType = type; // OPRAVA: Používáme globální `cardType`
      // schovat vše specifické
      const dis = document.getElementById('discountLevelDisplay');
      const sav = document.getElementById('savedAmountDisplay');
      const stc = document.getElementById('stampCounterDisplay');
      const bl  = document.getElementById('bodyLevelDisplay');
      const bb  = document.getElementById('bodyBottomDisplay');
      console.log('stampCounterDisplay element:', stc);
      [dis, sav, stc, bl, bb].forEach(el => { if (el) el.style.display = 'none'; });

      // nastavit výchozí text na stripu podle typu a ukázat správné bloky
      let defaultStripText = '';
      if (type === 'procentni' || type === 'revolution') {
        if (dis) dis.style.display = 'block';
        if (sav) {
          sav.style.display = 'block';
          const sl = sav.querySelector('.saved-label');
          if (sl) sl.textContent = (type === 'revolution') ? 'NASPOŘENO' : 'Ušetřil';
        }

        // Inicializace úrovní pro Revolution kartu - pouze když poprvé nastavíme typ
        if (type === 'revolution' && cardType !== 'revolution') {
          // Výchozí režim je 'preset'
          revolutionMode = 'preset';
          initializeDefaultRevolutionLevels();
          revolutionPreviewIndex = 0; // Zobrazíme první úroveň (GOLD)
        }

        defaultStripText = 'Sleva';
      } else if (type === 'razitkova') {
        console.log('Setting razitkova type, stc element:', stc);
        if (stc) {
          stc.style.display = 'block';
          console.log('Set stc display to block, current style:', stc.style.display);
          const lab = document.getElementById('stampLabel');
          const val = document.getElementById('stampVal');
          if (lab) lab.textContent = 'Razítka';
          if (val) val.textContent = '10 / 10';
          console.log('Updated stamp label and value');
        } else {
          console.error('stampCounterDisplay element not found!');
        }
        defaultStripText = 'Razítka';
      } else if (type === 'bodova') {
        if (bl) bl.style.display = 'block';
        if (bb) bb.style.display = 'block';
        const blab = document.getElementById('bodyLabel1');
        if (blab) blab.textContent = 'BODY';
        // Aktualizuj texty dole z aktuálního stavu
        try {
          const t = document.getElementById('bodyBottomTop');
          const b = document.getElementById('bodyBottomBot');
          if (t) t.textContent = bodTopMessage || 'ZA 100B KÁVA ZDARMA';
          if (b) b.textContent = bodBottomMessage || `${bodRate}Kč=1BOD`;
        } catch(_) {}
        defaultStripText = 'Body';
      } else {
        defaultStripText = '';
      }

      // Použij výchozí strip text jen pokud ho uživatel neupravil
      if (!stripTextUserEdited) {
        stripText = defaultStripText;
        const si = document.getElementById('stripInput');
        if (si) si.value = stripText;
      }

      // Nezapínej text na stripu automaticky – řídí se až potvrzením na kroku 6
      positionStrip();
      setStripBackground();
      const st = document.getElementById('stripTextElem');
      // Styling now controlled by renderStrip() with user-selected settings
      renderStrip();
      // Ensure strip background/canvas updates for razítková immediately
      setStripBackground();
      // strip background (and razítka) will be re-rendered in setStripBackground()
      
      // Debug: Check stampCounterDisplay after all strip functions
      const stcAfter = document.getElementById('stampCounterDisplay');
      console.log('After strip functions - stampCounterDisplay:', stcAfter, 'display:', stcAfter ? stcAfter.style.display : 'not found');
    }

    // --- Bodová – handlers & helpers ---
    function isBodovaValid() {
      const pointsOk = Number.isFinite(Number(bodPoints)) && Number(bodPoints) > 0;
      const rateOk = Number.isFinite(Number(bodRate)) && Number(bodRate) > 0;
      const topOk = (bodTopMessage || '').trim().length > 0;
      const botOk = (bodBottomMessage || '').trim().length > 0;
      return pointsOk && rateOk && topOk && botOk;
    }

    function updateBodovaNextEnabled() {
      const next = getCurrentNextBtn();
      if (next) next.disabled = !isBodovaValid();
    }

    function onBodPointsChange(input) {
      const v = parseInt(input && input.value, 10);
      bodPoints = isNaN(v) ? bodPoints : Math.max(1, v);
      if (!bodBottomUserEdited) {
        bodBottomMessage = `${bodRate}Kč=${bodPoints}BOD`;
        try { const bi = document.getElementById('bodBottomTextInput'); if (bi) bi.value = bodBottomMessage; } catch(_) {}
      }
      updateBodovaPreview();
      updateBodovaNextEnabled();
    }

    function onBodRateChange(input) {
      const v = parseInt(input && input.value, 10);
      bodRate = isNaN(v) ? bodRate : Math.max(1, v);
      // Pokud uživatel neupravil spodní řádek ručně, přepiš ho dle kurzu
      if (!bodBottomUserEdited) {
        bodBottomMessage = `${bodRate}Kč=${bodPoints}BOD`;
        try { const bi = document.getElementById('bodBottomTextInput'); if (bi) bi.value = bodBottomMessage; } catch(_) {}
      }
      updateBodovaPreview();
      updateBodovaNextEnabled();
    }

    function onBodTopTextInput() {
      try {
        const ti = document.getElementById('bodTopTextInput');
        bodTopMessage = (ti && typeof ti.value === 'string') ? ti.value : bodTopMessage;
        bodTopUserEdited = true;
      } catch(_) {}
      updateBodovaPreview();
      updateBodovaNextEnabled();
    }

    function onBodBottomTextInput() {
      try {
        const bi = document.getElementById('bodBottomTextInput');
        bodBottomMessage = (bi && typeof bi.value === 'string') ? bi.value : bodBottomMessage;
        bodBottomUserEdited = true;
      } catch(_) {}
      updateBodovaPreview();
      updateBodovaNextEnabled();
    }

    function updateBodovaPreview() {
      try {
        const t = document.getElementById('bodyBottomTop');
        const b = document.getElementById('bodyBottomBot');
        if (t) t.textContent = (bodTopMessage || '').trim();
        if (b) b.textContent = (bodBottomMessage || '').trim();
      } catch(_) {}
    }

    function setStripBackground() {
      const img = document.getElementById('stripResultImg');
      const cv = document.getElementById('stripCanvas');
      if (!img) return;

      let finalUrl = '';
      let useProgressImage = cardType === 'revolution' && revolutionShowProgress && revolutionGfxMode === 'custom';
      let usePerStampImage = cardType === 'razitkova' && stampMode === 'perStamp';

      if (useProgressImage) {
        const currentStep = revolutionGfxSelectedStep; // Opraveno - použijeme přímo vybraný stav místo výpočtu
        finalUrl = revolutionGfxUrls[currentStep] || selectedStripUrl || 'https://static.wixstatic.com/media/1cf87e_3ae4f6a9c66a44ef9aa950f489356001~mv2.png';
        img.src = finalUrl;
        img.style.display = 'block';
        if (cv) cv.style.display = 'none';
      } else if (usePerStampImage) {
        finalUrl = perStripUrls[perStripSelectedStep] || selectedStripUrl || 'https://static.wixstatic.com/media/1cf87e_3ae4f6a9c66a44ef9aa950f489356001~mv2.png';
        img.src = finalUrl;
        img.style.display = 'block';
        if (cv) cv.style.display = 'none';
      } else {
        finalUrl = (selectedStripUrl && selectedStripUrl.trim()) ? selectedStripUrl : 'https://static.wixstatic.com/media/1cf87e_3ae4f6a9c66a44ef9aa950f489356001~mv2.png';
        img.src = finalUrl;
        img.style.display = 'block';
        if (cv) cv.style.display = (cardType === 'razitkova') ? 'block' : 'none';
        if (cardType === 'razitkova') {
          renderStripOnCanvas(finalUrl);
        }
      }
    }

    // --- Procentní karta – handlers & helpers ---
    function onProcentniLevelChange(index, field, value) {
      if (!procentniLevels[index]) return;

      if (field === 'name' || field === 'color') {
        procentniLevels[index][field] = value;
      } else {
        const numValue = parseInt(value, 10);
        if (!isNaN(numValue) && numValue >= 0) {
          procentniLevels[index][field] = numValue;
        }
      }
      
      // VŽDY přepneme náhled na upravovanou úroveň při jakékoliv změně
      setProcentniPreview(index);
    }

    function addProcentniLevel() {
        const lastLevel = procentniLevels[procentniLevels.length - 1];
        if (lastLevel.spend === Infinity) {
            lastLevel.spend = (procentniLevels.length > 1 ? procentniLevels[procentniLevels.length - 2].spend : 0) + 4000;
        }
        
        // Náhodná barva pro novou úroveň pro inspiraci
        const randomColor = '#' + Math.floor(Math.random()*16777215).toString(16).padStart(6, '0');

        procentniLevels.push({
            name: 'UROVEN',
            discount: (lastLevel.discount || 0) + 2,
            spend: Infinity,
            color: randomColor
        });

        renderProcentniLevels();
        setProcentniPreview(procentniLevels.length - 1); // Zobrazíme náhled nově přidané úrovně
    }


    function removeProcentniLevel() {
      if (procentniLevels.length > 1) {
        procentniLevels.pop();
        if (procentniLevels.length > 0) {
          procentniLevels[procentniLevels.length - 1].spend = Infinity;
        }
        // Pokud jsme smazali zrovna zobrazenou úroveň, přepneme náhled na poslední existující
        if (procentniPreviewIndex >= procentniLevels.length) {
          setProcentniPreview(procentniLevels.length - 1);
        } else {
          renderProcentniLevels();
          updateProcentniPreview();
        }
      }
    }

    function setProcentniPreview(index) {
        procentniPreviewIndex = index;
        renderProcentniLevels(); // Překreslíme, aby se zvýraznil správný řádek
        updateProcentniPreview();
    }

    function renderProcentniLevels() {
      const container = document.getElementById('procentniLevelsContainer');
      if (!container) return;

      container.innerHTML = '';
      procentniLevels.forEach((level, index) => {
        const isLast = index === procentniLevels.length - 1;
        const fromSpend = (index === 0) ? 0 : (procentniLevels[index - 1].spend);

        const row = document.createElement('tr');
        row.onclick = () => setProcentniPreview(index);
        if (index === procentniPreviewIndex) {
            row.classList.add('preview-active');
        }

        row.innerHTML = `
          <td class="level-index">${index + 1}</td>
          <td>
            <input type="text" value="${escapeHtml(level.name)}" onchange="onProcentniLevelChange(${index}, 'name', this.value)" onclick="event.stopPropagation()">
          </td>
          <td>
            <input type="number" value="${level.discount}" min="0" onchange="onProcentniLevelChange(${index}, 'discount', this.value)" onclick="event.stopPropagation()">
          </td>
          <td>
            <div class="procentni-spending-cell">
              ${index === 0 ? '<span>0 až</span>' : `<span>${(fromSpend + 1)} až</span>`}
              ${isLast ? 
                 `<input type="text" value="a více" disabled style="background:#f9fafb; border-style:dashed;">` :
                 `<input type="number" value="${level.spend}" min="${fromSpend + 1}" onchange="onProcentniLevelChange(${index}, 'spend', this.value)" onclick="event.stopPropagation()">`
              }
            </div>
          </td>
          <td>
            ${index === 0 ? '<span>(Hlavní barva)</span>' : 
            `<div class="procentni-level-color">
                <input type="color" value="${level.color || pickedColor || '#ffffff'}" onchange="onProcentniLevelChange(${index}, 'color', this.value)" onclick="event.stopPropagation()">
             </div>`
            }
          </td>
        `;
        container.appendChild(row);
      });
      
      const removeBtn = document.getElementById('removeProcentniLevelBtn');
      if (removeBtn) {
        removeBtn.disabled = procentniLevels.length <= 1;
      }
    }

    function updateProcentniPreview() {
        const level = procentniLevels[procentniPreviewIndex];
        if (!level) return;

        const statusVal = document.getElementById('statusVal');
        const discountVal = document.getElementById('discountVal');
        const fakeCard = document.getElementById('fakeCard');

        if (statusVal) statusVal.textContent = level.name;
        if (discountVal) discountVal.textContent = `${level.discount}%`;
        
        // Změníme barvu karty na barvu úrovně, nebo na hlavní barvu, pokud je to první úroveň
        if (fakeCard) {
            const colorToShow = level.color || pickedColor || '#ffffff';
            fakeCard.style.backgroundColor = colorToShow;
        }
    }

    // Reflow při změně velikosti okna/viewportu
    window.addEventListener('resize', () => {
      positionStrip();
      setStripBackground();
      renderStrip();
    });
  </script>
</body>
</html>