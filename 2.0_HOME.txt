<!DOCTYPE html>
<html lang="cs">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Věrnostní karta – Nastavení (krok: barva)</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Plaster&family=Rubik+Spray+Paint&family=Staatliches&family=Coiny&display=swap" rel="stylesheet">
  <style>
    /* RESET */
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      background: transparent;
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Inter, Helvetica, Arial, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 16px;
    }
    /* h1 uses default system fonts */

    /* Custom font (user-provided) */
    @font-face {
      font-family: 'tan-nimbus-2-webfont';
      src: url('mojefonty/webfontkit-20250823-064711/tan-nimbus_2-webfont.woff2') format('woff2'),
           url('https://adamkolaru-ops.github.io/mojefonty/webfontkit-20250823-064711/tan-nimbus_2-webfont.woff2') format('woff2');
      font-weight: normal;
      font-style: normal;
      font-display: swap;
    }

    /* WRAPPER */
    :root { --ui-scale: 1; }
    /* Scaled root wraps the whole builder so we can scale everything at once */
    #scaleRoot {
      transform: scale(var(--ui-scale));
      transform-origin: top center;
      width: 100%; /* PC layout: využij šířku */
      margin: 0 auto;
    }
    .builder-wrap {
      /* PC layout: dvousloupcový grid */
      width: 100%;
      display: grid;
      grid-template-columns: 360px minmax(520px, 1fr);
      gap: 24px;
      align-items: start; /* OPRAVA: Zarovnání na začátek (flush s vrchem fake card) */
    }

    /* (PC) Scale control removed */

    /* TELEFON + FAKE CARD (1:1 dle WIX.txt) */
    .phone-container {
      grid-column: 1;
      position: relative;
      width: 300px; /* shodné s šířkou obrázku telefonu, kvůli centrování overlaye */
      margin: 0 auto; /* centrovat kontejner v builderu */
      margin-bottom: 0; /* držet kartu co nejblíž k otázkám */
    }
    .phone-image {
      width: 300px;
      display: block;
      margin: 0 auto; /* centrovat telefon v builderu */
    }
    .fake-card {
      position: absolute;
      top: 76px;
      left: 50%;
      transform: translateX(-50%); /* centrovat overlay na střed telefonu */
      width: 257px;
      height: 363px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 0 2px rgba(0,0,0,0.3);
      pointer-events: none;
      overflow: hidden;
    }
    /* Ukázkový rotující náhled před zahájením tvorby */
    .example-preview {
      position: absolute;
      top: 76px;
      left: 50%;
      transform: translateX(-50%);
      width: 257px;
      height: 363px;
      object-fit: cover;
      object-position: center;
      border-radius: 8px;
      box-shadow: 0 0 2px rgba(0,0,0,0.3);
      z-index: 1; /* ensure preview shows above phone image */
    }
    /* LOGO-SLOT */
    .logo-slot {
      position: absolute;
      top: 10px;
      left: 10px;
      width: 120px;
      height: 45px;
      display: flex;
      align-items: center;
      justify-content: flex-start;
      overflow: hidden;
      padding-left: 2px;
    }
    .logo-img { max-width: 100%; max-height: 100%; object-fit: contain; object-position: left center; }
    .logo-text { white-space: pre-wrap; font-weight: bold; margin: 0; padding: 0; overflow: hidden; text-align: left; }
    /* Controls (step 2) */
    .mini-label { font-size:12px; color:#374151; }
    .toggle-group, .align-group { display:flex; align-items:center; gap:6px; }
    .toggle-btn, .align-btn {
      appearance:none; border:1px solid #e5e7eb; background:#f9fafb; color:#111827;
      padding:6px 8px; border-radius:8px; cursor:pointer; font-size:12px; font-weight:600;
    }
    .toggle-btn.selected, .align-btn.selected { border-color:#4f46e5; background:#eef2ff; color:#1f2a6b; }
    .align-icons { display:flex; gap:6px; }
    .align-btn svg { width:16px; height:16px; display:block; }

    /* Dočasný náhled v kroku 2 (překryv přes slot) */
    .top-mode-preview {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center;
      display: none;
      pointer-events: none;
      z-index: 10;
    }

    /* STRIP => #stripResultImg */
    #stripResultImg {
      position: absolute;
      left: 0;
      top: 61px; /* fallback mid-band between logo and bottom area */
      width: 100%;
      height: 90px; /* fallback band height; final height is set dynamically */
      object-fit: contain; /* show the entire pattern image without cropping */
      object-position: center;
      display: none;
      pointer-events: none;
      z-index: 0;
    }

    /* Strip canvas (drawn overlay for pattern+razítka) */
    #stripCanvas {
      position: absolute;
      left: 0;
      top: 61px; /* fallback aligned with strip image */
      width: 100%;
      height: 90px;
      display: none;
      pointer-events: none;
      z-index: 1;
    }

    /* menší QR kód */
    .qr-code {
      position: absolute;
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
      width: 96px;
      z-index: 2;
    }

    /* UŠETŘIL (vpravo) */
    .saved-amount {
      position: absolute;
      top: 163px;
      right: 10px;
      text-align: right;
      display: none;
      font-family: sans-serif;
      color: var(--discountColor, #000);
      z-index: 2;
    }
    .saved-amount .saved-label { font-size: 12px; font-weight: 600; }
    .saved-amount .saved-value { display: block; margin-top: 2px; font-size: 18px; font-weight: 700; }

    /* DISCOUNT LEVEL (vpravo nahoře) - pro procentní i revolution kartu */
    .discount-level {
      position: absolute;
      top: 28px;
      right: 15px;
      width: 140px;
      text-align: right;
      display: none;
      color: var(--discountColor, #000);
      z-index: 2;
    }
    .discount-level-rows { display: flex; justify-content: space-between; font-size: 11px; font-weight: 600; }
    .discount-level-values { display: flex; justify-content: space-between; align-items: center; font-size: 14px; margin-top: 2px; font-weight: 600; }
    
    /* Specifické barvy pro zobrazení Revolution statusů na kartě */
    .revolution-status-gold { color: #A47F11; font-weight: 700; }
    .revolution-status-dia { color: #6B7280; font-weight: 700; }
    .revolution-status-vip { color: #111827; font-weight: 700; }
    
    /* Styly pro přehled předpřipravených úrovní */
    .preset-levels-overview {
      display: flex;
      justify-content: center;
      gap: 30px;
      margin-top: 15px;
    }
    .preset-level {
      text-align: center;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      padding: 15px;
      width: 120px;
    }
    .preset-level-name {
      font-size: 16px;
      margin-bottom: 5px;
    }
    .preset-level-discount {
      font-size: 22px;
      font-weight: 700;
      margin: 10px 0;
    }
    .preset-level-threshold {
      font-size: 12px;
      color: #6b7280;
    }

    /* RAZÍTKA (vpravo dole) */
    .stamp-counter {
      position: absolute;
      top: 163px;
      right: 10px;
      text-align: right;
      display: none;
      font-family: sans-serif;
      color: var(--discountColor, #000);
      z-index: 2;
    }
    .stamp-counter .saved-label { font-size: 12px; font-weight: 600; }
    .stamp-counter .saved-value { display: block; margin-top: 2px; font-size: 18px; font-weight: 700; }

    /* BODY (vpravo nahoře) */
    .body-level {
      position: absolute;
      top: 27px;
      right: 10px;
      width: 95px;
      text-align: right;
      display: none;
      color: var(--discountColor, #000);
      z-index: 2;
    }
    .body-level-rows { display: flex; justify-content: flex-end; font-size: 11px; font-weight: 600; text-transform: uppercase; }
    .body-level-values { display: flex; justify-content: flex-end; font-size: 14px; margin-top: 0px; font-weight: 600; }

    /* BODY dole (vpravo) */
    .body-bottom {
      position: absolute;
      top: 163px;
      right: 10px;
      text-align: right;
      display: none;
      font-family: sans-serif;
      color: var(--discountColor, #000);
      z-index: 2;
    }
    .body-bottom .top-line { font-size: 12px; font-weight: 600; }
    .body-bottom .bottom-line { display: block; margin-top: 2px; font-size: 18px; font-weight: 700; }

    /* ZÁKAZNÍK (vlevo) */
    .customer-info {
      position: absolute;
      top: 170px;
      left: 10px;
      text-align: left;
      display: none;
      font-family: sans-serif;
      color: var(--discountColor, #000);
      z-index: 2;
    }
    .customer-info .cust-label { font-size: 12px; font-weight: 600; }
    .customer-info .cust-value { display: block; margin-top: 2px; font-size: 18px; font-weight: 700; }

    /* Text na stripu */
    .strip-text {
      position: absolute;
      display: none; /* will be toggled to flex when enabled */
      top: 61px; /* fallback to align over the strip image */
      left: 0;
      width: 100%;
      height: 90px;
      /* Use flex to control vertical placement of text (top/center/bottom) */
      display: none;
      justify-content: center;
      align-items: flex-end; /* default = bottom */
      padding: 0 10px 6px;
      box-sizing: border-box;
      text-align: center; /* horizontal centering */
      transform: none;
      pointer-events: none;
      z-index: 3;
    }

    /* Minimal controls for strip text (step 7) */
    .strip-mini { display:flex; gap:10px; justify-content:center; align-items:center; margin-top:10px; }
    .mini-group { display:flex; gap:6px; align-items:center; }
    .mini-label { font-size:11px; color:#6b7280; }
    .mini-btn { border:1px solid #e5e7eb; background:#f9fafb; border-radius:6px; padding:6px 8px; font-size:12px; cursor:pointer; }
    .mini-btn.selected { outline:2px solid #4f46e5; outline-offset:0; }
    .mini-btn:hover {
      background: #f3f4f6;
    }
    .mini-btn.selected {
      background: #3b82f6;
      color: white;
    }

    /* --- OTÁZKOVÝ PANEL (jedno pole) --- */
    .question-panel {
      grid-column: 2;
      width: 100%;
      background: #ffffff;
      border-radius: 10px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.08);
      position: relative;
      z-index: 2;
      /* margin-top: 5cm; byl odstraněn pro zarovnání s vrchem fake card */
      border: 2px solid #d1d5db; /* výraznější ohraničení */
      padding: 6px 14px 14px; /* menší horní odsazení pro nadpis a popis */
    }
    .q-title { font-size: 16px; font-weight: 700; text-align: center; margin-bottom: 10px; }
    .q-sub { font-size: 12px; color: #6b7280; text-align: center; margin-bottom: 12px; }

    .color-row { display: flex; justify-content: center; align-items: center; gap: 12px; flex-wrap: wrap; }

    .swatch {
      width: 36px; height: 36px; border-radius: 8px; cursor: pointer; border: 2px solid transparent; transition: transform .18s, border-color .18s;
    }
    .swatch:hover { transform: translateY(-2px); }
    .swatch.selected { border-color: #4f46e5; }

    .custom-color {
      display: flex; align-items: center; gap: 6px; background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 8px; padding: 6px 8px;
    }
    .custom-color label { font-size: 12px; color: #374151; }
    .custom-color input[type="color"] { width: 28px; height: 28px; border: none; background: transparent; padding: 0; }

    .q-actions { display: flex; justify-content: center; margin-top: 12px; }
    .q-actions { display: flex; justify-content: space-between; align-items: center; gap: 8px; }
    .btn {
      appearance: none; border: none; padding: 10px 16px; border-radius: 8px; font-weight: 700; font-size: 14px;
      cursor: pointer; /* OPRAVA: Explicitní kurzor pro celé tlačítko */
      user-select: none; /* Zabrání výběru textu */
      display: inline-block; /* Zajistí správnou hit area */
      text-align: center; /* Vycentrování textu */
      line-height: 1.2; /* Správná výška řádku */
      min-width: 100px; /* Minimální šířka pro lepší hit area */
      transition: all 0.2s ease; /* Plynulé přechody */
    }
    .btn-next { background: #4f46e5; color: #fff; box-shadow: 0 4px 10px rgba(79,70,229,.25); }
    .btn-next:disabled { opacity: .6; }
    .btn-back { background: #e5e7eb; color: #111827; }

    .options-row { display: flex; justify-content: center; gap: 10px; }
    .option { padding: 10px 14px; border-radius: 10px; background: #f3f4f6; border: 1px solid #e5e7eb; cursor: pointer; font-weight: 700; color: #111827; }
    .option.selected { outline: 2px solid #4f46e5; outline-offset: 0; }
    /* Typ karty – grid a tlačítka s obrázky */
    .type-grid { display: flex; justify-content: center; align-items: flex-start; gap: 10px; }
    .type-card {
      width: 90px; height: 90px; border-radius: 12px; border: 2px solid #e5e7eb; background: #f9fafb; overflow: hidden;
      padding: 0; cursor: pointer; display: flex; align-items: center; justify-content: center;
    }
    .type-card img { width: 100%; height: 100%; object-fit: cover; }
    .type-card.selected { border-color: #4f46e5; box-shadow: 0 0 0 2px rgba(79,70,229,0.15) inset; }
    .type-item { display:flex; flex-direction:column; align-items:center; gap:6px; }
    .type-name { font-size:12px; font-weight:700; color:#374151; }

    /* Strip carousel (portrait cards) */
    .strip-carousel-container { position: relative; display:flex; align-items:center; justify-content:center; }
    .strip-track {
      display:flex; align-items:center; gap:12px; overflow-x:auto; padding: 6px 44px; max-width: 100%;
      scroll-snap-type: x mandatory; -webkit-overflow-scrolling: touch;
    }
    .strip-track::-webkit-scrollbar { display: none; }
    .strip-card {
      width: 82px; height: 124px; border-radius: 8px; border: 2px solid #e5e7eb; background: #f9fafb; overflow: hidden;
      padding: 0; cursor: pointer; display: flex; align-items: center; justify-content: center; scroll-snap-align: start;
      transition: all 0.2s ease-in-out;
    }
    .strip-card.selected {
      border-color: #4f46e5; /* Použijeme hlavní fialovou pro konzistenci */
      transform: scale(1.05); /* Mírné zvětšení pro zdůraznění */
      box-shadow: 0 4px 12px rgba(0,0,0,0.15); /* Výraznější stín */
    }
    .strip-card img { width: 100%; height: 100%; object-fit: cover; }
    .strip-nav-btn { position:absolute; top:50%; transform: translateY(-50%); width:32px; height:32px; border-radius:50%;
      background:#ffffff; border:1px solid #e5e7eb; box-shadow:0 2px 8px rgba(0,0,0,.08); cursor:pointer; font-size:18px; font-weight:700; color:#374151;
      display:flex; align-items:center; justify-content:center; }
    .strip-nav-btn:hover { background:#f9fafb; }
    .strip-nav-btn.prev { left:6px; }
    .strip-nav-btn.next { right:6px; }
    /* (removed) stamps-layer: stamps are now rendered on the strip canvas */
    /* Compact type description under Step 4 */
    .type-desc { margin-top: 10px; padding: 10px; border: 1px solid #e5e7eb; border-radius: 8px; background: #f9fafb; }
    .type-desc p { margin: 0 0 6px 0; font-size: 12px; color: #374151; }
    .type-desc ul { margin: 6px 0 0 18px; padding: 0; font-size: 12px; color: #4b5563; }
    .type-desc-actions { display: flex; justify-content: flex-end; margin-top: 6px; }
    .type-desc .mini-btn { padding: 4px 8px; font-size: 12px; }
    
    /* Stamp option styling */
    .stamp-option {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 4px;
      padding: 8px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s;
      min-width: 60px;
    }
    .stamp-option:hover {
      border-color: #3b82f6;
      background: #f8fafc;
    }
    .stamp-option[data-selected="true"] {
      border-color: #3b82f6;
      background: #eff6ff;
    }
    .stamp-option span {
      font-size: 12px;
      font-weight: 500;
      text-align: center;
    }

    /* --- Styly pro nastavení úrovní Procentní karty --- */
    .procentni-levels-panel {
      display: flex;
      flex-direction: column;
      gap: 12px;
      margin-top: 10px;
    }
    /* Společné styly pro tabulky úrovní Procentní a Revolution karty */
    .procentni-levels-table, .revolution-levels-table {
      width: 100%;
      border-collapse: collapse;
    }
    .procentni-levels-table th, .procentni-levels-table td,
    .revolution-levels-table th, .revolution-levels-table td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #e5e7eb;
      vertical-align: middle;
    }
    .procentni-levels-table th,
    .revolution-levels-table th {
      font-weight: 600;
      background-color: #f9fafb;
      color: #4b5563;
    }
    .procentni-levels-table td.level-index,
    .revolution-levels-table td.level-index {
      font-weight: bold;
      width: 30px;
      text-align: center;
    }
    .procentni-levels-table input[type="text"],
    .procentni-levels-table input[type="number"],
    .revolution-levels-table input[type="text"],
    .revolution-levels-table input[type="number"] {
      width: 100%;
      padding: 6px 8px;
      border: 1px solid #d1d5db;
      border-radius: 4px;
      font-size: 14px;
    }
    .procentni-spending-cell {
      display: flex;
      align-items: center;
      gap: 4px;
    }
    .procentni-spending-cell span {
      font-size: 12px;
      color: #6b7280;
    }
    .procentni-controls {
      display: flex;
      justify-content: center;
      gap: 8px;
      margin-top: 12px;
    }
    .procentni-level-color {
      display: flex;
      align-items: center;
      gap: 6px;
      justify-content: center;
    }
    .procentni-level-color input[type="color"] {
      width: 24px;
      height: 24px;
      border: 1px solid #d1d5db;
      border-radius: 4px;
      padding: 1px;
      cursor: pointer;
    }
    .procentni-levels-table tr,
    .revolution-levels-table tr {
      cursor: pointer;
      transition: background-color 0.2s ease;
    }
    .procentni-levels-table tr:hover,
    .revolution-levels-table tr:hover {
      background-color: #f3f4f6;
    }
    .procentni-levels-table tr.preview-active,
    .revolution-levels-table tr.preview-active {
      background-color: #e5edff;
      border-left: 3px solid #3b82f6;
    }
    /* START PŘIDANÉHO KÓDU */
    .pros-cons-list {
      list-style: none;
      padding: 0;
      margin: 10px 0 0 0;
      text-align: left;
    }
    .pros-cons-list li {
      padding-left: 22px;
      position: relative;
      margin-bottom: 8px;
      line-height: 1.4;
      font-size: 12px;
      color: #4b5563;
    }
    .pros-cons-list li::before {
      position: absolute;
      left: 0;
      top: 1px;
      font-weight: 700;
      font-size: 16px;
      line-height: 1;
    }
    .pros-cons-list li.pro::before {
      content: '+';
      color: #22c55e;
    }
    .pros-cons-list li.con::before {
      content: '–';
      color: #000000; 
    }
    .pros-cons-list .main-point {
      font-weight: 700;
      font-size: 1.15em; /* Zvětšení klíčového slova */
      color: #374151;
      display: inline;
    }
    /* KONEC PŘIDANÉHO KÓDU */
    
    /* PŘIDEJTE TENTO KÓD DO SEKCE <style> */
    .custom-color.selected {
      border-color: #4f46e5;
      background-color: #eef2ff;
    }
    
    /* PŘIDEJTE TENTO KÓD DO SEKCE <style> */
    .type-item {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      height: 100%;
    }
    
    /* --- START PŘIDANÉHO KÓDU --- */
    .preset-section {
      display: none; /* Skryté by default */
      margin-top: 15px;
      border-top: 1px solid #e5e7eb;
      padding-top: 15px;
    }
    .preset-section h4 {
      text-align: left;
      font-size: 14px;
      margin-bottom: 12px;
      color: #374151;
    }
    .preset-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
      gap: 16px;
    }
    .preset-card {
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      overflow: hidden;
      cursor: pointer;
      transition: all 0.2s ease-in-out;
      background: #f9fafb;
    }
    /* Selected state for preset cards */
    .preset-card.selected {
      border-color: #4f46e5;
      box-shadow: 0 0 0 2px rgba(79,70,229,0.15) inset;
      transform: translateY(-2px);
    }
    .preset-card:hover {
      border-color: #4f46e5;
      transform: translateY(-4px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    .preset-card img {
      width: 100%;
      height: auto;
      display: block;
    }
    /* Pagination controls for preset grids */
    .preset-pagination {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 12px;
      margin-top: 12px;
    }
    .preset-page-btn {
      padding: 6px 12px;
      border: 1px solid #e5e7eb;
      background: #ffffff;
      border-radius: 6px;
      cursor: pointer;
      font-size: 13px;
      color: #374151;
      transition: background 0.15s ease;
    }
    .preset-page-btn:hover:not([disabled]) {
      background: #f3f4f6;
    }
    .preset-page-btn[disabled] {
      opacity: 0.5;
      cursor: not-allowed;
    }
    .preset-page-indicator {
      font-size: 13px;
      color: #6b7280;
      min-width: 56px;
      text-align: center;
    }
    /* Fixed 5-column grid for presets */
    .preset-grid-5cols {
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      gap: 16px;
    }
    /* --- KONEC PŘIDANÉHO KÓDU --- */
    /* Zvýraznění textu u výběru presetu */
    #presetMessagePanel {
        font-size: 14px;
        font-weight: 600;
        color: #374151;
        padding: 8px;
        background-color: #f9fafb;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        margin-top: 15px;
    }
  </style>
</head>
<body>
  <div id="scaleRoot">
    <div class="builder-wrap">
      <!-- scale control removed in PC layout -->
    <!-- Telefon + 1:1 fake card -->
    <div class="phone-container">
      <img 
        src="https://static.wixstatic.com/media/1cf87e_7d2b3744c04f4bf6af84a1b9868ea0b2~mv2.png"
        alt="Telefon"
        class="phone-image"
      >
      <img id="examplePreview" class="example-preview" alt="Ukázková karta"
        src="https://static.wixstatic.com/media/1cf87e_8eaa5bcd78cb47acb401966c9ab36fe4~mv2.png"
      >
      <div class="fake-card" id="fakeCard" style="display:none;">
        <!-- STRIP => #stripResultImg -->
        <img id="stripResultImg" alt="Strip náhled">
        <canvas id="stripCanvas"></canvas>

        <!-- DISCOUNT LEVEL -->
        <div class="discount-level" id="discountLevelDisplay">
          <div class="discount-level-rows">
            <div id="discountLabel1">SLEVA</div>
            <div id="discountLabel2">MIN.</div>
          </div>
          <div class="discount-level-values">
            <div id="statusVal">VIP</div>
            <div id="discountVal">10%</div>
          </div>
        </div>

        <!-- UŠETŘIL (vpravo) -->
        <div class="saved-amount" id="savedAmountDisplay">
          <span class="saved-label">Ušetřil</span>
          <span class="saved-value" id="savedVal">378 Kč</span>
        </div>

        <!-- RAZÍTKA (vpravo dole) -->
        <div class="stamp-counter" id="stampCounterDisplay">
          <span class="saved-label" id="stampLabel">Razítka</span>
          <span class="saved-value" id="stampVal">0 / 10</span>
        </div>

        <!-- BODY (vpravo nahoře) -->
        <div class="body-level" id="bodyLevelDisplay">
          <div class="body-level-rows">
            <div id="bodyLabel1">BODY</div>
          </div>
          <div class="body-level-values">
            <div id="bodyVal">0</div>
          </div>
        </div>

        <!-- BODY dole (vpravo) -->
        <div class="body-bottom" id="bodyBottomDisplay">
          <span class="top-line" id="bodyBottomTop">ZA 100B KÁVA ZDARMA</span>
          <span class="bottom-line" id="bodyBottomBot">10Kč=1BOD</span>
        </div>

        <!-- Menší QR kód (URL zachována) -->
        <img 
          src="https://static.wixstatic.com/media/1cf87e_54c7b5f266684220b9746a99b53d3ffa~mv2.png"
          alt="QR kód"
          class="qr-code"
        >

        <!-- Zákazník (vlevo) -->
        <div class="customer-info" id="customerInfo">
          <span class="cust-label">Zákazník:</span>
          <span class="cust-value" id="custName">Jan Novák</span>
        </div>

        <!-- Logo / Text -->
        <div class="logo-slot" id="logoSlot"></div>

        <!-- Dočasný překryv pro krok 2 (náhled nápis/logo) -->
        <img id="topModePreview" class="top-mode-preview" alt="Preview">

        <!-- Text na stripu -->
        <div class="strip-text" id="stripTextElem"></div>
      </div>
    </div>

    <!-- INTRO: Start wizard -->
    <!-- Intro panel odstraněn - nyní začínáme rovnou barevným výběrem -->

    <!-- KROK 1: Barva karty -->
    <div class="question-panel" data-step="1" id="step-1" style="display:none;">
      <div class="q-title">Nastavte barvu vaší karty</div>
      <div class="q-sub">Vyberte jednu z předvoleb nebo zvolte vlastní barvu</div>
      <div class="color-row">
        <!-- Neutrals -->
        <div class="swatch" style="background:#FFFFFF" title="Bílá" onclick="pickPresetColor('#FFFFFF', this)"></div>
        <div class="swatch" style="background:#F3F4F6" title="Světle šedá" onclick="pickPresetColor('#F3F4F6', this)"></div>
        <div class="swatch" style="background:#9CA3AF" title="Šedá" onclick="pickPresetColor('#9CA3AF', this)"></div>
        <div class="swatch" style="background:#6B7280" title="Tmavší šedá" onclick="pickPresetColor('#6B7280', this)"></div>
        <div class="swatch" style="background:#374151" title="Tmavá šedá" onclick="pickPresetColor('#374151', this)"></div>
        <div class="swatch" style="background:#111827" title="Černá" onclick="pickPresetColor('#111827', this)"></div>
        <!-- Reds / Warm -->
        <div class="swatch" style="background:#FEE2E2" title="Světle červená" onclick="pickPresetColor('#FEE2E2', this)"></div>
        <div class="swatch" style="background:#F43F5E" title="Růžovo-červená" onclick="pickPresetColor('#F43F5E', this)"></div>
        <div class="swatch" style="background:#EF4444" title="Červená" onclick="pickPresetColor('#EF4444', this)"></div>
        <div class="swatch" style="background:#DC2626" title="Tmavší červená" onclick="pickPresetColor('#DC2626', this)"></div>
        <div class="swatch" style="background:#F97316" title="Oranžová" onclick="pickPresetColor('#F97316', this)"></div>
        <div class="swatch" style="background:#F59E0B" title="Amber" onclick="pickPresetColor('#F59E0B', this)"></div>
        <div class="swatch" style="background:#EAB308" title="Žlutá" onclick="pickPresetColor('#EAB308', this)"></div>
        <!-- Greens -->
        <div class="swatch" style="background:#84CC16" title="Limetková" onclick="pickPresetColor('#84CC16', this)"></div>
        <div class="swatch" style="background:#22C55E" title="Zelená" onclick="pickPresetColor('#22C55E', this)"></div>
        <div class="swatch" style="background:#10B981" title="Smaragdová" onclick="pickPresetColor('#10B981', this)"></div>
        <div class="swatch" style="background:#14B8A6" title="Tyrkysová" onclick="pickPresetColor('#14B8A6', this)"></div>
        <!-- Blues -->
        <div class="swatch" style="background:#06B6D4" title="Cyan" onclick="pickPresetColor('#06B6D4', this)"></div>
        <div class="swatch" style="background:#38BDF8" title="Nebesky modrá" onclick="pickPresetColor('#38BDF8', this)"></div>
        <div class="swatch" style="background:#3B82F6" title="Modrá" onclick="pickPresetColor('#3B82F6', this)"></div>
        <div class="swatch" style="background:#2563EB" title="Tmavší modrá" onclick="pickPresetColor('#2563EB', this)"></div>
        <div class="swatch" style="background:#6366F1" title="Indigo" onclick="pickPresetColor('#6366F1', this)"></div>
        <!-- Purples -->
        <div class="swatch" style="background:#8B5CF6" title="Fialová" onclick="pickPresetColor('#8B5CF6', this)"></div>
        <div class="swatch" style="background:#A855F7" title="Purple" onclick="pickPresetColor('#A855F7', this)"></div>
        <div class="swatch" style="background:#D946EF" title="Fuchsiová" onclick="pickPresetColor('#D946EF', this)"></div>
        <div class="swatch" style="background:#EC4899" title="Růžová" onclick="pickPresetColor('#EC4899', this)"></div>
        <!-- Custom -->
        <div class="custom-color">
          <label for="customColor">Vlastní</label>
          <input type="color" id="customColor" value="#ffffff" onchange="pickCustomColor(this.value)">
        </div>
      </div>
      <div class="q-actions">
        <button class="btn btn-next" onclick="(function(){ try{ if(typeof stopExampleSlideshow==='function') stopExampleSlideshow(); }catch(_){} try{ var ex=document.getElementById('examplePreview'); if(ex) ex.style.display='none'; var fake=document.getElementById('fakeCard'); if(fake) fake.style.display='block'; }catch(_){} if(typeof pickedColor==='undefined'||!pickedColor){ setCardColor('#111827'); } goNext(); })()" style="font-size:18px; padding:14px 22px; width:100%;">ZAČNI VYTVÁŘET</button>
      </div>
    </div>

    <!-- KROK 2: Pravý horní roh -->
    <div class="question-panel" data-step="2" id="step-2" style="display:none;">
      <div class="q-title">Co bude v levém horním rohu?</div>
      <div class="q-sub">Zvolte text nebo logo</div>
      <div class="options-row">
        <button class="option" onclick="pickTopMode('napis', this)">Text</button>
        <button class="option" onclick="pickTopMode('logo', this)">Vlastní logo</button>
      </div>
      <!-- Inline nastavení podle volby -->
      <!-- Text nápisu (inline ve kroku 2) -->
      <div id="napisWrapper" style="display:none; justify-content:center; flex-direction:column; gap:8px; margin-top:10px;">
        <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
            <div class="align-group">
                <label class="mini-label">Zarovnání</label>
                <div class="align-icons">
                  <button class="align-btn" id="alignLeftBtn" onclick="pickNapisAlign('left', this)" title="Zarovnat vlevo">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <line x1="3" y1="5" x2="21" y2="5"/>
                      <line x1="3" y1="11" x2="15" y2="11"/>
                      <line x1="3" y1="17" x2="18" y2="17"/>
                    </svg>
                  </button>
                  <button class="align-btn" id="alignCenterBtn" onclick="pickNapisAlign('center', this)" title="Zarovnat na střed">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <line x1="6" y1="5" x2="18" y2="5"/>
                      <line x1="4" y1="11" x2="20" y2="11"/>
                      <line x1="6" y1="17" x2="18" y2="17"/>
                    </svg>
                  </button>
                  <button class="align-btn" id="alignRightBtn" onclick="pickNapisAlign('right', this)" title="Zarovnat vpravo">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <line x1="3" y1="5" x2="21" y2="5"/>
                      <line x1="9" y1="11" x2="21" y2="11"/>
                      <line x1="6" y1="17" x2="21" y2="17"/>
                    </svg>
                  </button>
                </div>
            </div>
            <div class="align-group">
                <label class="mini-label">Velikost písma</label>
                <input type="number" id="napisManualSizeInput" value="16" min="8" max="50" oninput="onNapisManualSizeChange(this)" style="width: 60px; padding: 6px 8px; border: 1px solid #e5e7eb; border-radius: 8px;">
                <button id="napisResetSizeBtn" class="toggle-btn" onclick="resetNapisSizeToAuto()" style="display: none;">Resetovat na Auto</button>
            </div>
        </div>
        <!-- Víceřádkové pole -->
        <textarea id="napisTextarea" placeholder="Zadejte text (max. 2 řádky, řádek 2 až po Enteru)" oninput="onNapisInput()" onkeydown="napisKeyDown(event)" rows="2" wrap="off" style="width:100%; padding:10px; border:1px solid #e5e7eb; border-radius:8px; resize: none; overflow-y: hidden;"></textarea>
        <div style="display:flex; align-items:center; justify-content:space-between; gap:10px; flex-wrap:wrap;">
          <div style="display:flex; align-items:center; gap:6px;">
            <label for="napisFont" style="font-size:12px; color:#374151;">Styl písma</label>
            <select id="napisFont" onchange="onNapisFontChange()" style="padding:6px 8px; border:1px solid #e5e7eb; border-radius:8px;">
              <option value="tan-nimbus-2-webfont">Karrli</option>
              <option value="Rubik Spray Paint">Rubik Spray Paint</option>
              <option value="Staatliches">Staatliches</option>
              <option value="Plaster">Plaster</option>
              <option value="Coiny">Coiny</option>
              <option value="Arial">Arial</option>
              <option value="Georgia">Georgia</option>
              <option value="Helvetica">Helvetica</option>
              <option value="Tahoma">Tahoma</option>
              <option value="Trebuchet MS">Trebuchet MS</option>
              <option value="Verdana">Verdana</option>
              <option value="Wix Bold Sans">Wix Bold Sans</option>
              <option value="Wix Handwritten">Wix Handwritten</option>
              <option value="Wix Fancy Cursive">Wix Fancy Cursive</option>
            </select>
          </div>
          <div style="display:flex; align-items:center; gap:6px;">
            <button type="button" class="toggle-btn" onclick="toggleTextPalette()" title="Vyberte barvu textu" style="font-size:13px; font-weight:700; background:#fef3c7; border-color:#f59e0b; box-shadow:0 0 0 2px rgba(245,158,11,0.15) inset;">Vyberte si barvu</button>
            <input type="color" id="napisColor" value="#000000" onchange="onNapisColorChange()" onmousedown="openTextPaletteFromColor(event)" onclick="return false;" onfocus="this.blur();" style="width: 32px; height: 32px; border:none; background:transparent; padding:0;">
          </div>
          <!-- Paleta barev pro text (stejná jako krok 1), zobrazí se po kliknutí na tlačítko -->
          <div id="textColorPalette" style="display:none; margin-top:8px;">
            <div class="color-row">
              <!-- Neutrals -->
              <div class="swatch text-swatch" style="background:#FFFFFF" title="Bílá" onclick="pickTextPresetColor('#FFFFFF', this)"></div>
              <div class="swatch text-swatch" style="background:#F3F4F6" title="Světle šedá" onclick="pickTextPresetColor('#F3F4F6', this)"></div>
              <div class="swatch text-swatch" style="background:#9CA3AF" title="Šedá" onclick="pickTextPresetColor('#9CA3AF', this)"></div>
              <div class="swatch text-swatch" style="background:#6B7280" title="Tmavší šedá" onclick="pickTextPresetColor('#6B7280', this)"></div>
              <div class="swatch text-swatch" style="background:#374151" title="Tmavá šedá" onclick="pickTextPresetColor('#374151', this)"></div>
              <div class="swatch text-swatch" style="background:#111827" title="Černá" onclick="pickTextPresetColor('#111827', this)"></div>
              <!-- Reds / Warm -->
              <div class="swatch text-swatch" style="background:#FEE2E2" title="Světle červená" onclick="pickTextPresetColor('#FEE2E2', this)"></div>
              <div class="swatch text-swatch" style="background:#F43F5E" title="Růžovo-červená" onclick="pickTextPresetColor('#F43F5E', this)"></div>
              <div class="swatch text-swatch" style="background:#EF4444" title="Červená" onclick="pickTextPresetColor('#EF4444', this)"></div>
              <div class="swatch text-swatch" style="background:#DC2626" title="Tmavší červená" onclick="pickTextPresetColor('#DC2626', this)"></div>
              <div class="swatch text-swatch" style="background:#F97316" title="Oranžová" onclick="pickTextPresetColor('#F97316', this)"></div>
              <div class="swatch text-swatch" style="background:#F59E0B" title="Amber" onclick="pickTextPresetColor('#F59E0B', this)"></div>
              <div class="swatch text-swatch" style="background:#EAB308" title="Žlutá" onclick="pickTextPresetColor('#EAB308', this)"></div>
              <!-- Greens -->
              <div class="swatch text-swatch" style="background:#84CC16" title="Limetková" onclick="pickTextPresetColor('#84CC16', this)"></div>
              <div class="swatch text-swatch" style="background:#22C55E" title="Zelená" onclick="pickTextPresetColor('#22C55E', this)"></div>
              <div class="swatch text-swatch" style="background:#10B981" title="Smaragdová" onclick="pickTextPresetColor('#10B981', this)"></div>
              <div class="swatch text-swatch" style="background:#14B8A6" title="Tyrkysová" onclick="pickTextPresetColor('#14B8A6', this)"></div>
              <!-- Blues -->
              <div class="swatch text-swatch" style="background:#06B6D4" title="Cyan" onclick="pickTextPresetColor('#06B6D4', this)"></div>
              <div class="swatch text-swatch" style="background:#38BDF8" title="Nebesky modrá" onclick="pickTextPresetColor('#38BDF8', this)"></div>
              <div class="swatch text-swatch" style="background:#3B82F6" title="Modrá" onclick="pickTextPresetColor('#3B82F6', this)"></div>
              <div class="swatch text-swatch" style="background:#2563EB" title="Tmavší modrá" onclick="pickTextPresetColor('#2563EB', this)"></div>
              <div class="swatch text-swatch" style="background:#6366F1" title="Indigo" onclick="pickTextPresetColor('#6366F1', this)"></div>
              <!-- Purples -->
              <div class="swatch text-swatch" style="background:#8B5CF6" title="Fialová" onclick="pickTextPresetColor('#8B5CF6', this)"></div>
              <div class="swatch text-swatch" style="background:#A855F7" title="Purple" onclick="pickTextPresetColor('#A855F7', this)"></div>
              <div class="swatch text-swatch" style="background:#D946EF" title="Fuchsiová" onclick="pickTextPresetColor('#D946EF', this)"></div>
              <div class="swatch text-swatch" style="background:#EC4899" title="Růžová" onclick="pickTextPresetColor('#EC4899', this)"></div>
              <!-- Custom -->
              <div class="custom-color">
                <label for="textCustomColor">Vlastní</label>
                <input type="color" id="textCustomColor" value="#000000" onchange="pickTextCustomColor(this.value)">
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- Logo upload (inline ve kroku 2) -->
      <div id="logoWrapper" style="display:none; justify-content:center; margin-top:10px;">
        <input type="file" id="logoFileInput" accept="image/*" onchange="onLogoFileChange(this)" style="width:100%; padding:10px; border:1px solid #e5e7eb; border-radius:8px;">
      </div>
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 3: Typ karty -->
    <div class="question-panel" data-step="3" id="step-3" style="display:none;">
      <div class="q-title">Vyberte vzhled stripu</div>
      <div class="q-sub">Zvolte jeden z předpřipravených stripů nebo nahrajte vlastní</div>
      <div class="strip-carousel-container" id="stripCarousel">
        <button type="button" class="strip-nav-btn prev" aria-label="Předchozí" onclick="scrollStrip(-1)">‹</button>
        <div class="strip-track" id="stripTrack">
          <button class="strip-card" data-url="https://static.wixstatic.com/media/1cf87e_2fb228538c8f4f76b7c27f489c9ec86d~mv2.png" onclick="pickStrip('https://static.wixstatic.com/media/1cf87e_2fb228538c8f4f76b7c27f489c9ec86d~mv2.png', this)" aria-label="Strip A">
            <img src="https://static.wixstatic.com/media/1cf87e_42c16166df474011b268ed32c9ac20f8~mv2.png" alt="Strip A">
          </button>
          <button class="strip-card" data-url="https://static.wixstatic.com/media/1cf87e_9e03bf4b81fc434b8525abfc5c179da2~mv2.png" onclick="pickStrip('https://static.wixstatic.com/media/1cf87e_9e03bf4b81fc434b8525abfc5c179da2~mv2.png', this)" aria-label="Strip B">
            <img src="https://static.wixstatic.com/media/1cf87e_1cda969fb17a4202b31e3a41ab485eed~mv2.png" alt="Strip B">
          </button>
          <button class="strip-card" data-url="https://static.wixstatic.com/media/1cf87e_feb21ec9d6614055ae0820b4704c1b80~mv2.png" onclick="pickStrip('https://static.wixstatic.com/media/1cf87e_feb21ec9d6614055ae0820b4704c1b80~mv2.png', this)" aria-label="Strip C">
            <img src="https://static.wixstatic.com/media/1cf87e_64d2c7ad7b6644dc96a9b0de8bebe268~mv2.png" alt="Strip C">
          </button>
          <button class="strip-card" data-url="https://static.wixstatic.com/media/1cf87e_f1c5b37e7ed548ec9d61769b2ab1bf40~mv2.png" onclick="pickStrip('https://static.wixstatic.com/media/1cf87e_f1c5b37e7ed548ec9d61769b2ab1bf40~mv2.png', this)" aria-label="Strip D">
            <img src="https://static.wixstatic.com/media/1cf87e_c50a75b5045a412293dc11dc5b39e5f3~mv2.png" alt="Strip D">
          </button>
          <button id="stripCustomBtn" class="strip-card" type="button" onclick="document.getElementById('customStripInput').click()" title="Vlastní strip">
            <span style="font-weight:700; font-size:12px; color:#374151;">Vlastní</span>
          </button>
          <input type="file" id="customStripInput" accept="image/*" style="display:none" onchange="onCustomStripFileChange(this)">
        </div>
        <button type="button" class="strip-nav-btn next" aria-label="Další" onclick="scrollStrip(1)">›</button>
      </div>

      <!-- Typ karty přesunut do kroku 4 -->
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 4: Typ karty (až po potvrzení stripu) -->
    <div class="question-panel" data-step="4" id="step-4" style="display:none;">
      <div class="q-title">Vyberte typ karty</div>

      <div class="type-grid">
        <div class="type-item">
          <div class="type-name">Revolution</div>
          <button class="type-card" data-type="revolution" onclick="pickCardType('revolution', this)" aria-label="Revolution">
            <img src="https://static.wixstatic.com/media/1cf87e_7bd4c3edcda74b0c966ecb5471f14d30~mv2.png" alt="Revolution">
          </button>
        </div>
        <div class="type-item">
          <div class="type-name">Procentí</div>
          <button class="type-card" data-type="procentni" onclick="pickCardType('procentni', this)" aria-label="Procentí">
            <img src="https://static.wixstatic.com/media/1cf87e_e218f5381e0748b2ad6d1c57b337af9f~mv2.png" alt="Procentí">
          </button>
        </div>
        <div class="type-item">
          <div class="type-name">Bodová</div>
          <button class="type-card" data-type="bodova" onclick="pickCardType('bodova', this)" aria-label="Bodová">
            <img src="https://static.wixstatic.com/media/1cf87e_8c4334c0221641acb421515383310cc6~mv2.png" alt="Bodová">
          </button>
        </div>
        <div class="type-item">
          <div class="type-name">Razítková</div>
          <button class="type-card" data-type="razitkova" onclick="pickCardType('razitkova', this)" aria-label="Razítková">
            <img src="https://static.wixstatic.com/media/1cf87e_522dc8abb98b4484adf341ccdddcabd2~mv2.png" alt="Razítková">
          </button>
        </div>
      </div>
      
      <!-- Doporučení pod všemi typy -->
      <div style="text-align: center; margin-top: 10px;">
        <div style="color:#22c55e; font-size:14px; font-weight:600;">Revolution - Doporučujeme</div>
      </div>
      
      <!-- Compact description panel -->
      <div id="typeDescPanel" class="type-desc" style="display:none;">
        <p id="typeDescShort"></p>
        <div id="typeDescMore" style="display:none;"></div>
        <div class="type-desc-actions">
          <button type="button" id="typeDescToggle" class="mini-btn" onclick="toggleTypeDesc()">Více informací</button>
        </div>
      </div>
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 4.2: Barva karty (dodatečně pro Bodová/Procentní) -->
    <div class="question-panel" data-step="4.2" id="step-4-2" style="display:none;">
      <div class="q-title">Nastavte barvu vaší karty</div>
      <div class="q-sub">Vyberte jednu z předvoleb nebo zvolte vlastní barvu</div>
      <div class="color-row">
        <!-- Neutrals -->
        <div class="swatch" style="background:#FFFFFF" title="Bílá" onclick="pickPresetColor('#FFFFFF', this)"></div>
        <div class="swatch" style="background:#F3F4F6" title="Světle šedá" onclick="pickPresetColor('#F3F4F6', this)"></div>
        <div class="swatch" style="background:#9CA3AF" title="Šedá" onclick="pickPresetColor('#9CA3AF', this)"></div>
        <div class="swatch" style="background:#6B7280" title="Tmavší šedá" onclick="pickPresetColor('#6B7280', this)"></div>
        <div class="swatch" style="background:#374151" title="Tmavá šedá" onclick="pickPresetColor('#374151', this)"></div>
        <div class="swatch" style="background:#111827" title="Černá" onclick="pickPresetColor('#111827', this)"></div>
        <!-- Reds / Warm -->
        <div class="swatch" style="background:#FEE2E2" title="Světle červená" onclick="pickPresetColor('#FEE2E2', this)"></div>
        <div class="swatch" style="background:#F43F5E" title="Růžovo-červená" onclick="pickPresetColor('#F43F5E', this)"></div>
        <div class="swatch" style="background:#EF4444" title="Červená" onclick="pickPresetColor('#EF4444', this)"></div>
        <div class="swatch" style="background:#DC2626" title="Tmavší červená" onclick="pickPresetColor('#DC2626', this)"></div>
        <div class="swatch" style="background:#F97316" title="Oranžová" onclick="pickPresetColor('#F97316', this)"></div>
        <div class="swatch" style="background:#F59E0B" title="Amber" onclick="pickPresetColor('#F59E0B', this)"></div>
        <div class="swatch" style="background:#EAB308" title="Žlutá" onclick="pickPresetColor('#EAB308', this)"></div>
        <!-- Greens -->
        <div class="swatch" style="background:#84CC16" title="Limetková" onclick="pickPresetColor('#84CC16', this)"></div>
        <div class="swatch" style="background:#22C55E" title="Zelená" onclick="pickPresetColor('#22C55E', this)"></div>
        <div class="swatch" style="background:#10B981" title="Smaragdová" onclick="pickPresetColor('#10B981', this)"></div>
        <div class="swatch" style="background:#14B8A6" title="Tyrkysová" onclick="pickPresetColor('#14B8A6', this)"></div>
        <!-- Blues -->
        <div class="swatch" style="background:#06B6D4" title="Cyan" onclick="pickPresetColor('#06B6D4', this)"></div>
        <div class="swatch" style="background:#38BDF8" title="Nebesky modrá" onclick="pickPresetColor('#38BDF8', this)"></div>
        <div class="swatch" style="background:#3B82F6" title="Modrá" onclick="pickPresetColor('#3B82F6', this)"></div>
        <div class="swatch" style="background:#2563EB" title="Tmavší modrá" onclick="pickPresetColor('#2563EB', this)"></div>
        <div class="swatch" style="background:#6366F1" title="Indigo" onclick="pickPresetColor('#6366F1', this)"></div>
        <!-- Purples -->
        <div class="swatch" style="background:#8B5CF6" title="Fialová" onclick="pickPresetColor('#8B5CF6', this)"></div>
        <div class="swatch" style="background:#A855F7" title="Purple" onclick="pickPresetColor('#A855F7', this)"></div>
        <div class="swatch" style="background:#D946EF" title="Fuchsiová" onclick="pickPresetColor('#D946EF', this)"></div>
        <div class="swatch" style="background:#EC4899" title="Růžová" onclick="pickPresetColor('#EC4899', this)"></div>
        <!-- Custom -->
        <div class="custom-color">
          <label for="customColorLate">Vlastní</label>
          <input type="color" id="customColorLate" value="#ffffff" onchange="pickCustomColor(this.value)">
        </div>
      </div>
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 2.5: Barva textu -->
    <div class="question-panel" data-step="2.5" id="step-2-5" style="display:none;">
      <div class="q-title">Barva textů na kartě</div>
      <div class="q-sub">Tato barva se použije na zobrazení slev, bodů a dalších informací.</div>
      <div class="color-row" id="textColorRow">
        <!-- Neutrals for text -->
        <div class="swatch" style="background:#000000" title="Černá" onclick="pickTextColor('#000000', this)"></div>
        <div class="swatch" style="background:#111827" title="Témně šedá" onclick="pickTextColor('#111827', this)"></div>
        <div class="swatch" style="background:#374151" title="Tmavá šedá" onclick="pickTextColor('#374151', this)"></div>
        <div class="swatch" style="background:#6B7280" title="Šedá" onclick="pickTextColor('#6B7280', this)"></div>
        <div class="swatch" style="background:#9CA3AF" title="Světle šedá" onclick="pickTextColor('#9CA3AF', this)"></div>
        <div class="swatch" style="background:#FFFFFF" title="Bílá" onclick="pickTextColor('#FFFFFF', this)"></div>
        <!-- Accent colors for emphasis -->
        <div class="swatch" style="background:#EF4444" title="Červená" onclick="pickTextColor('#EF4444', this)"></div>
        <div class="swatch" style="background:#F97316" title="Oranžová" onclick="pickTextColor('#F97316', this)"></div>
        <div class="swatch" style="background:#F59E0B" title="Amber" onclick="pickTextColor('#F59E0B', this)"></div>
        <div class="swatch" style="background:#EAB308" title="Žlutá" onclick="pickTextColor('#EAB308', this)"></div>
        <div class="swatch" style="background:#22C55E" title="Zelená" onclick="pickTextColor('#22C55E', this)"></div>
        <div class="swatch" style="background:#10B981" title="Smaragdová" onclick="pickTextColor('#10B981', this)"></div>
        <div class="swatch" style="background:#06B6D4" title="Cyan" onclick="pickTextColor('#06B6D4', this)"></div>
        <div class="swatch" style="background:#3B82F6" title="Modrá" onclick="pickTextColor('#3B82F6', this)"></div>
        <div class="swatch" style="background:#2563EB" title="Tmavší modrá" onclick="pickTextColor('#2563EB', this)"></div>
        <div class="swatch" style="background:#6366F1" title="Indigo" onclick="pickTextColor('#6366F1', this)"></div>
        <div class="swatch" style="background:#8B5CF6" title="Fialová" onclick="pickTextColor('#8B5CF6', this)"></div>
        <div class="swatch" style="background:#A855F7" title="Purple" onclick="pickTextColor('#A855F7', this)"></div>
        <div class="swatch" style="background:#D946EF" title="Fuchsiová" onclick="pickTextColor('#D946EF', this)"></div>
        <div class="swatch" style="background:#EC4899" title="Růžová" onclick="pickTextColor('#EC4899', this)"></div>
        <!-- Custom -->
        <div class="custom-color">
          <label for="customTextColor">Vlastní</label>
          <input type="color" id="customTextColor" value="#000000" onchange="pickCustomTextColor(this.value)">
        </div>
      </div>
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 5: Podmíněný krok – Razítka režim NEBO Bodová nastavení -->
    <div class="question-panel" data-step="5" id="step-5" style="display:none;">
      <!-- Razítková: výběr režimu -->
      <div id="step5StampModePanel" style="display:none;">
        <div class="q-title">Razítka – vyberte způsob</div>
        <div class="q-sub">Zvolte jak chcete razítka nastavit</div>
        <div class="options-row" style="justify-content:center;">
          <button type="button" id="stampModeStandardBtn" class="option" onclick="pickStampMode('standard', this)">Standardní</button>
          <button type="button" id="stampModePerBtn" class="option" onclick="pickStampMode('perStamp', this)">Vlastní pro každé</button>
        </div>
        <div id="stampPerNote" style="display:none; margin-top:8px; font-size:12px; color:#6b7280; text-align:center;">Režim "Vlastní pro každé": V dalším kroku nastavíte počet razítek (1–20) a nahrajete strip pro každý stav (0 = bez razítek, 1 = po 1. razítku, …, N = po N. razítku).</div>
      </div>

      <!-- Bodová: nastavení směnného kurzu a textů -->
      <div id="step5BodovaPanel" style="display:none;">
        <div class="q-title">Bodová karta – nastavení</div>
        <div class="q-sub">Zadejte směnný kurz a texty, které se zobrazí v náhledu karty.</div>
        <div style="display:flex; gap:16px; justify-content:center; align-items:flex-end; flex-wrap:wrap; margin-top:8px;">
          <div style="display:flex; flex-direction:column; gap:6px;">
            <label style="font-size:13px; color:#374151; font-weight:600; text-align:center;">Směnný kurz</label>
            <div style="display:flex; align-items:center; gap:8px; justify-content:center;">
              <input type="number" id="bodPointsInput" min="1" value="1" oninput="onBodPointsChange(this)" style="width:80px; height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
              <span style="font-weight:600; color:#374151;">BODŮ =</span>
              <input type="number" id="bodRateInput" min="1" value="10" oninput="onBodRateChange(this)" style="width:80px; height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
              <span style="font-weight:600; color:#374151;">Kč</span>
            </div>
          </div>
          <div style="display:flex; flex-direction:column; gap:6px; min-width:260px;">
            <label style="font-size:13px; color:#374151; font-weight:600;">Horní řádek (malý text)</label>
            <input type="text" id="bodTopTextInput" placeholder="Např. ZA 100B KÁVA ZDARMA" oninput="onBodTopTextInput()" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px;">
          </div>
          <div style="display:flex; flex-direction:column; gap:6px; min-width:260px;">
            <label style="font-size:13px; color:#374151; font-weight:600;">Spodní řádek (kurz nebo poznámka)</label>
            <input type="text" id="bodBottomTextInput" placeholder="Např. 10Kč=1BOD" oninput="onBodBottomTextInput()" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px;">
          </div>
        </div>
        <div style="text-align:center; margin-top:8px; font-size:12px; color:#6b7280;">Změny se okamžitě projeví v náhledu karty vpravo.</div>
      </div>

      <div id="step5ProcentniPanel" style="display:none;">
        <div class="q-title">Procentní karta – Nastavení úrovní</div>
        <div class="q-sub">Nastavte slevy podle celkové útraty zákazníka.</div>
        <div class="procentni-levels-panel">
          <table class="procentni-levels-table">
            <thead>
              <tr>
                <th>Úroveň</th>
                <th>Název statusu</th>
                <th>Sleva (%)</th>
                <th>Celková útrata (Kč)</th>
                <th>Barva karty</th>
              </tr>
            </thead>
            <tbody id="procentniLevelsContainer">
            </tbody>
          </table>
          <div class="procentni-controls">
            <button type="button" class="mini-btn" onclick="addProcentniLevel()">+ Přidat úroveň</button>
          </div>
          <div id="procentniWarnings" style="margin-top:8px; font-size:12px; color:#b45309; display:none;"></div>
        </div>
      </div>
      
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>
    
    <!-- Revolution Card Settings -->
    <div class="question-panel" data-step="4.5" id="step-4-5-revolution" style="display:none;">
      <div class="q-title">Vyberte si nastavení Revolution</div>
      <div class="q-sub">Zvolte jednu z předpřipravených šablon nebo si vytvořte vlastní.</div>
      <div class="options-row" style="justify-content:center;">
        <button type="button" class="option" onclick="pickDesignChoice('preset', this, 'revolution')">Předpřipravené (doporučeno)</button>
        <button type="button" class="option" onclick="pickDesignChoice('custom', this, 'revolution')">Vlastní návrh</button>
      </div>

      <!-- Nápis se zobrazí hned po výběru "Předpřipravené" -->
      <div id="presetMessagePanel-revolution" class="q-sub" style="display: none; margin-top: 15px; text-align: center; color: #374151; font-size: 18px; font-weight: 600;">
          Kartu si v dalších krocích můžete poupravit.
      </div>

      <!-- Revolution Card Presets -->
      <div id="presetSelectionPanel-revolution" class="preset-section" style="display: none;">
          <div id="revolutionStateSwitcher" class="strip-mini" style="justify-content:center; gap:8px; margin-bottom:8px;">
            <button type="button" class="mini-btn" onclick="revolutionPrevState()" aria-label="Předchozí stav">‹</button>
            <select id="revolutionStateSelect" onchange="onRevolutionStateSelect(this)" style="height:34px; padding:6px 10px; border:1px solid #e5e7eb; border-radius:8px;"></select>
            <button type="button" class="mini-btn" onclick="revolutionNextState()" aria-label="Další stav">›</button>
            <button type="button" id="revolutionAnimToggleBtn" class="mini-btn" onclick="revolutionToggleAnimation()">Spustit animaci</button>
          </div>
          <div id="revolutionPresetGrid" class="preset-grid-5cols"></div>
          <div class="preset-pagination" id="revolutionPresetPagination" style="display:none;">
            <button type="button" class="preset-page-btn" id="revPrevBtn" onclick="revolutionPrevPage()">Předchozí</button>
            <span class="preset-page-indicator" id="revPageIndicator">1 / 1</span>
            <button type="button" class="preset-page-btn" id="revNextBtn" onclick="revolutionNextPage()">Další</button>
          </div>
      </div>
      
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 4.6 (Revolution): Zachovat nebo změnit barvu -->
    <div class="question-panel" data-step="4.6" id="step-4-6-revolution" style="display:none;">
      <div class="keep-color-section" id="keepColorSection-revolution" style="margin-top:16px;">
        <div class="q-title">Chcete zachovat barvu karty?</div>
        <div class="q-sub">Současná barva (pokud jste spokojeni klidněte na Pokračovat)</div>
        <div class="color-row">
          <div class="swatch selected" id="currentColorSwatch-revolution" title="Současná barva" onclick="chooseCurrentColor('keepColorSection-revolution', this)"></div>
        </div>
        <div class="q-sub collapsible-toggle" style="margin-top:8px; cursor:pointer;" onclick="toggleChangeColor('revolution')">Změnit barvu na</div>
        <div id="changeColorToggleIcon-revolution" onclick="toggleChangeColor('revolution')" style="color:#9CA3AF; font-size:0; line-height:0; margin:2px 0 6px 0; cursor:pointer; user-select:none; text-align:center;">▸</div>
        <div id="changeColorContainer-revolution" class="collapsible-content" style="display:none;">
          <div class="color-row">
          <!-- Neutrals -->
          <div class="swatch" style="background:#FFFFFF" title="Bílá" onclick="pickPresetColor('#FFFFFF', this)"></div>
          <div class="swatch" style="background:#F3F4F6" title="Světle šedá" onclick="pickPresetColor('#F3F4F6', this)"></div>
          <div class="swatch" style="background:#9CA3AF" title="Šedá" onclick="pickPresetColor('#9CA3AF', this)"></div>
          <div class="swatch" style="background:#6B7280" title="Tmavší šedá" onclick="pickPresetColor('#6B7280', this)"></div>
          <div class="swatch" style="background:#374151" title="Tmavá šedá" onclick="pickPresetColor('#374151', this)"></div>
          <div class="swatch" style="background:#111827" title="Černá" onclick="pickPresetColor('#111827', this)"></div>
          <!-- Reds / Warm -->
          <div class="swatch" style="background:#FEE2E2" title="Světle červená" onclick="pickPresetColor('#FEE2E2', this)"></div>
          <div class="swatch" style="background:#F43F5E" title="Růžovo-červená" onclick="pickPresetColor('#F43F5E', this)"></div>
          <div class="swatch" style="background:#EF4444" title="Červená" onclick="pickPresetColor('#EF4444', this)"></div>
          <div class="swatch" style="background:#DC2626" title="Tmavší červená" onclick="pickPresetColor('#DC2626', this)"></div>
          <div class="swatch" style="background:#F97316" title="Oranžová" onclick="pickPresetColor('#F97316', this)"></div>
          <div class="swatch" style="background:#F59E0B" title="Amber" onclick="pickPresetColor('#F59E0B', this)"></div>
          <div class="swatch" style="background:#EAB308" title="Žlutá" onclick="pickPresetColor('#EAB308', this)"></div>
          <!-- Greens -->
          <div class="swatch" style="background:#84CC16" title="Limetková" onclick="pickPresetColor('#84CC16', this)"></div>
          <div class="swatch" style="background:#22C55E" title="Zelená" onclick="pickPresetColor('#22C55E', this)"></div>
          <div class="swatch" style="background:#10B981" title="Smaragdová" onclick="pickPresetColor('#10B981', this)"></div>
          <div class="swatch" style="background:#14B8A6" title="Tyrkysová" onclick="pickPresetColor('#14B8A6', this)"></div>
          <!-- Blues -->
          <div class="swatch" style="background:#06B6D4" title="Cyan" onclick="pickPresetColor('#06B6D4', this)"></div>
          <div class="swatch" style="background:#38BDF8" title="Nebesky modrá" onclick="pickPresetColor('#38BDF8', this)"></div>
          <div class="swatch" style="background:#3B82F6" title="Modrá" onclick="pickPresetColor('#3B82F6', this)"></div>
          <div class="swatch" style="background:#2563EB" title="Tmavší modrá" onclick="pickPresetColor('#2563EB', this)"></div>
          <div class="swatch" style="background:#6366F1" title="Indigo" onclick="pickPresetColor('#6366F1', this)"></div>
          <!-- Purples -->
          <div class="swatch" style="background:#8B5CF6" title="Fialová" onclick="pickPresetColor('#8B5CF6', this)"></div>
          <div class="swatch" style="background:#A855F7" title="Purple" onclick="pickPresetColor('#A855F7', this)"></div>
          <div class="swatch" style="background:#D946EF" title="Fuchsiová" onclick="pickPresetColor('#D946EF', this)"></div>
          <div class="swatch" style="background:#EC4899" title="Růžová" onclick="pickPresetColor('#EC4899', this)"></div>
          <!-- Custom -->
          <div class="custom-color">
            <label for="customColorAfter45-revolution">Vlastní</label>
            <input type="color" id="customColorAfter45-revolution" value="#ffffff" onchange="pickCustomColor(this.value)">
          </div>
          </div>
        </div>
      </div>
      
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 4.6 (Razítková): Zachovat nebo změnit barvu -->
    <div class="question-panel" data-step="4.6" id="step-4-6-razitkova" style="display:none;">
      <div class="keep-color-section" id="keepColorSection-razitkova" style="margin-top:16px;">
        <div class="q-title">Chcete zachovat barvu karty?</div>
        <div class="q-sub">Současná barva (pokud jste spokojeni klidněte na Pokračovat)</div>
        <div class="color-row">
          <div class="swatch selected" id="currentColorSwatch-razitkova" title="Současná barva" onclick="chooseCurrentColor('keepColorSection-razitkova', this)"></div>
        </div>
        <div class="q-sub collapsible-toggle" style="margin-top:8px; cursor:pointer;" onclick="toggleChangeColor('razitkova')">Změnit barvu na</div>
        <div id="changeColorToggleIcon-razitkova" onclick="toggleChangeColor('razitkova')" style="color:#9CA3AF; font-size:0; line-height:0; margin:2px 0 6px 0; cursor:pointer; user-select:none; text-align:center;">▸</div>
        <div id="changeColorContainer-razitkova" class="collapsible-content" style="display:none;">
          <div class="color-row">
          <!-- Neutrals -->
          <div class="swatch" style="background:#FFFFFF" title="Bílá" onclick="pickPresetColor('#FFFFFF', this)"></div>
          <div class="swatch" style="background:#F3F4F6" title="Světle šedá" onclick="pickPresetColor('#F3F4F6', this)"></div>
          <div class="swatch" style="background:#9CA3AF" title="Šedá" onclick="pickPresetColor('#9CA3AF', this)"></div>
          <div class="swatch" style="background:#6B7280" title="Tmavší šedá" onclick="pickPresetColor('#6B7280', this)"></div>
          <div class="swatch" style="background:#374151" title="Tmavá šedá" onclick="pickPresetColor('#374151', this)"></div>
          <div class="swatch" style="background:#111827" title="Černá" onclick="pickPresetColor('#111827', this)"></div>
          <!-- Reds / Warm -->
          <div class="swatch" style="background:#FEE2E2" title="Světle červená" onclick="pickPresetColor('#FEE2E2', this)"></div>
          <div class="swatch" style="background:#F43F5E" title="Růžovo-červená" onclick="pickPresetColor('#F43F5E', this)"></div>
          <div class="swatch" style="background:#EF4444" title="Červená" onclick="pickPresetColor('#EF4444', this)"></div>
          <div class="swatch" style="background:#DC2626" title="Tmavší červená" onclick="pickPresetColor('#DC2626', this)"></div>
          <div class="swatch" style="background:#F97316" title="Oranžová" onclick="pickPresetColor('#F97316', this)"></div>
          <div class="swatch" style="background:#F59E0B" title="Amber" onclick="pickPresetColor('#F59E0B', this)"></div>
          <div class="swatch" style="background:#EAB308" title="Žlutá" onclick="pickPresetColor('#EAB308', this)"></div>
          <!-- Greens -->
          <div class="swatch" style="background:#84CC16" title="Limetková" onclick="pickPresetColor('#84CC16', this)"></div>
          <div class="swatch" style="background:#22C55E" title="Zelená" onclick="pickPresetColor('#22C55E', this)"></div>
          <div class="swatch" style="background:#10B981" title="Smaragdová" onclick="pickPresetColor('#10B981', this)"></div>
          <div class="swatch" style="background:#14B8A6" title="Tyrkysová" onclick="pickPresetColor('#14B8A6', this)"></div>
          <!-- Blues -->
          <div class="swatch" style="background:#06B6D4" title="Cyan" onclick="pickPresetColor('#06B6D4', this)"></div>
          <div class="swatch" style="background:#38BDF8" title="Nebesky modrá" onclick="pickPresetColor('#38BDF8', this)"></div>
          <div class="swatch" style="background:#3B82F6" title="Modrá" onclick="pickPresetColor('#3B82F6', this)"></div>
          <div class="swatch" style="background:#2563EB" title="Tmavší modrá" onclick="pickPresetColor('#2563EB', this)"></div>
          <div class="swatch" style="background:#6366F1" title="Indigo" onclick="pickPresetColor('#6366F1', this)"></div>
          <!-- Purples -->
          <div class="swatch" style="background:#8B5CF6" title="Fialová" onclick="pickPresetColor('#8B5CF6', this)"></div>
          <div class="swatch" style="background:#A855F7" title="Purple" onclick="pickPresetColor('#A855F7', this)"></div>
          <div class="swatch" style="background:#D946EF" title="Fuchsiová" onclick="pickPresetColor('#D946EF', this)"></div>
          <div class="swatch" style="background:#EC4899" title="Růžová" onclick="pickPresetColor('#EC4899', this)"></div>
          <!-- Custom -->
          <div class="custom-color">
            <label for="customColorAfter45-razitkova">Vlastní</label>
            <input type="color" id="customColorAfter45-razitkova" value="#ffffff" onchange="pickCustomColor(this.value)">
          </div>
          </div>
        </div>
      </div>
      
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- Procentní Card Settings -->
    <div class="question-panel" data-step="4.5" id="step-4-5-procentni" style="display:none;">
      <div class="q-title">Vyberte si nastavení Procentní</div>
      <div class="q-sub">Zvolte jednu z předpřipravených šablon nebo si vytvořte vlastní.</div>
{{ ... }}
      <div class="options-row" style="justify-content:center;">
        <button type="button" class="option" onclick="pickDesignChoice('preset', this, 'procentni')">Předpřipravené (doporučeno)</button>
        <button type="button" class="option" onclick="pickDesignChoice('custom', this, 'procentni')">Vlastní návrh</button>
      </div>

      <!-- Nápis se zobrazí hned po výběru "Předpřipravené" -->
      <div id="presetMessagePanel-procentni" class="q-sub" style="display: none; margin-top: 15px; text-align: center; color: #374151; font-size: 18px; font-weight: 600;">
          Kartu si v dalších krocích můžete poupravit.
      </div>

      <!-- Procentní Card Presets -->
      <div id="presetSelectionPanel-procentni" class="preset-section" style="display: none;">
          <h4>Procentní - Obchody a služby</h4>
          <div class="preset-grid">
              <div class="preset-card" onclick="applyPreset('procentni-obchod')">
                  <img src="https://via.placeholder.com/200x120/4f46e5/ffffff?text=Obchod" alt="Procentní Obchod">
              </div>
              <div class="preset-card" onclick="applyPreset('procentni-restaurace')">
                  <img src="https://via.placeholder.com/200x120/059669/ffffff?text=Restaurace" alt="Procentní Restaurace">
              </div>
          </div>
      </div>
      
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- Bodová Card Settings -->
    <div class="question-panel" data-step="4.5" id="step-4-5-bodova" style="display:none;">
      <div class="q-title">Vyberte si nastavení Bodová</div>
      <div class="q-sub">Zvolte jednu z předpřipravených šablon nebo si vytvořte vlastní.</div>
      <div class="options-row" style="justify-content:center;">
        <button type="button" class="option" onclick="pickDesignChoice('preset', this, 'bodova')">Předpřipravené (doporučeno)</button>
        <button type="button" class="option" onclick="pickDesignChoice('custom', this, 'bodova')">Vlastní návrh</button>
      </div>

      <!-- Nápis se zobrazí hned po výběru "Předpřipravené" -->
      <div id="presetMessagePanel-bodova" class="q-sub" style="display: none; margin-top: 15px; text-align: center; color: #374151; font-size: 18px; font-weight: 600;">
          Kartu si v dalších krocích můžete poupravit.
      </div>

      <!-- Bodová Card Presets -->
      <div id="presetSelectionPanel-bodova" class="preset-section" style="display: none;">
          <h4>Bodová - Kavárny a rychlé občerstvení</h4>
          <div class="preset-grid">
              <div class="preset-card" onclick="applyPreset('bodova-kavarna')">
                  <img src="https://via.placeholder.com/200x120/dc2626/ffffff?text=Kavárna" alt="Bodová Kavárna">
              </div>
              <div class="preset-card" onclick="applyPreset('bodova-fastfood')">
                  <img src="https://via.placeholder.com/200x120/ea580c/ffffff?text=Fast+Food" alt="Bodová Fast Food">
              </div>
          </div>
      </div>
      
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- Razítková Card Settings -->
    <div class="question-panel" data-step="4.5" id="step-4-5-razitkova" style="display:none;">
      <div class="q-title">Vyberte si nastavení Razítková</div>
      <div class="q-sub">Zvolte jednu z předpřipravených šablon nebo si vytvořte vlastní.</div>
      <div class="options-row" style="justify-content:center;">
        <button type="button" class="option" onclick="pickDesignChoice('preset', this, 'razitkova')">Předpřipravené (doporučeno)</button>
        <button type="button" class="option" onclick="pickDesignChoice('custom', this, 'razitkova')">Vlastní návrh</button>
      </div>

      <!-- Nápis se zobrazí hned po výběru "Předpřipravené" -->
      <div id="presetMessagePanel-razitkova" class="q-sub" style="display: none; margin-top: 15px; text-align: center; color: #374151; font-size: 18px; font-weight: 600;">
          Kartu si v dalších krocích můžete poupravit.
      </div>

      <!-- Razítková Card Presets -->
      <div id="presetSelectionPanel-razitkova" class="preset-section" style="display: none;">
          <div id="razitkovaStateSwitcher" class="strip-mini" style="justify-content:center; gap:8px; margin-bottom:8px;">
            <button type="button" class="mini-btn" onclick="razitkovaPrevState()" aria-label="Předchozí stav">‹</button>
            <select id="razitkovaStateSelect" onchange="onRazitkovaStateSelect(this)" style="height:34px; padding:6px 10px; border:1px solid #e5e7eb; border-radius:8px;"></select>
            <button type="button" class="mini-btn" onclick="razitkovaNextState()" aria-label="Další stav">›</button>
            <button type="button" id="razitkovaAnimToggleBtn" class="mini-btn" onclick="razitkovaToggleAnimation()">Spustit animaci</button>
          </div>
          <div id="razitkovaPresetGrid" class="preset-grid-5cols"></div>
          <div class="preset-pagination" id="razitkovaPresetPagination" style="display:none;">
            <button type="button" class="preset-page-btn" id="razPrevBtn" onclick="razitkovaPrevPage()">Předchozí</button>
            <span class="preset-page-indicator" id="razPageIndicator">1 / 1</span>
            <button type="button" class="preset-page-btn" id="razNextBtn" onclick="razitkovaNextPage()">Další</button>
          </div>
       </div>
      
      <!-- (4.6 move) keep-color UI removed from 4.5 -->
      
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <div class="question-panel" data-step="5.5" id="step-5b" style="display:none;">
        <div class="q-title">Revolution – Nastavení úrovní</div>
      <div class="q-sub">Nastavte slevy a limity pro přechod mezi úrovněmi.</div>
      <div class="revolution-levels-panel" style="display: flex; flex-direction: column; gap: 12px; margin-top: 10px;">
            <div style="display:flex; flex-direction:column; align-items:center; gap:6px; margin-top:6px;">
                <label style="font-size:13px; font-weight:600; color:#374151;">Min. částka pro výběr (Kč)</label>
                <input type="number" id="revBonusMinAmount" value="500" min="1" style="width:150px; text-align:center; height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; margin-top: 5px;">
                <div class="q-sub" style="margin-top:6px; text-align:center; max-width:600px;">Zákazníci mohou cashback vybrat až po dosažení této částky. Tato hodnota se používá i pro výpočet milníků vizuálního progresu.</div>
            </div>
            <div style="border-top: 1px solid #e5e7eb; margin: 12px 0;"></div>
            <table class="revolution-levels-table">
                <thead>
                    <tr>
                        <th>Úroveň</th>
                        <th>Název statusu</th>
                        <th>Sleva (%)</th>
                        <th>Cílová částka (Kč)</th>
                        <th>Barva karty</th>
                    </tr>
                </thead>
                <tbody id="revolutionLevelsContainer">
                </tbody>
            </table>
            <div class="procentni-controls">
                <button type="button" class="mini-btn" onclick="addRevolutionLevel()">+ Přidat úroveň</button>
                <button type="button" class="mini-btn" id="removeRevolutionLevelBtn" onclick="removeRevolutionLevel()">– Odebrat</button>
            </div>
        </div>
         <div class="q-actions">
            <button class="btn btn-back" onclick="goBack()">Zpět</button>
            <button class="btn btn-next" onclick="goNext()">Pokračovat</button>
        </div>
    </div>

    <div class="question-panel" data-step="5.6" id="step-5c" style="display:none;">
      <div class="q-title">Revolution – Vizuální progres</div>
      <div class="q-sub">Chcete zákazníkům zobrazovat vizuální progres k získání odměny?</div>
      <div class="options-row" style="margin-top: 15px;">
        <button type="button" class="option" onclick="pickRevolutionProgress(true, this)">Dynamická grafika</button>
        <button type="button" class="option" onclick="pickRevolutionProgress(false, this)">Statická grafika</button>
      </div>
      <div class="option-descriptions" style="margin-top:8px; text-align:center; font-size:12px; color:#6b7280;">
        <div><strong>Dynamická grafika:</strong> Zákazníci uvidí vizuální postup směrem k odměně.</div>
        <div style="margin-top:4px;"><strong>Statická grafika:</strong> Zobrazí se pouze fixní obrázek bez postupného vyplňování.</div>
      </div>

      <div id="revolutionWithProgressPanel" style="display:none;">
        <div class="q-sub" style="margin-bottom: 15px;">Zvolte typ grafiky pro zobrazení progresu.</div>
        <div class="options-row">
          <button type="button" class="option" onclick="pickRevolutionGfxMode('preset', this)">Předpřipravené</button>
          <button type="button" class="option" onclick="pickRevolutionGfxMode('custom', this)">Vlastní grafika</button>
        </div>

        <div id="revolutionGfxPresetNote" style="display:none; margin-top:15px; text-align:center; font-size:12px; color:#6b7280;">
          Tato možnost je v přípravě.
        </div>

        <div id="revolutionGfxCustomPanel" style="display:none; margin-top:15px; border-top: 1px solid #e5e7eb; padding-top: 15px;">
          <div style="display:flex; flex-direction:column; gap:12px; align-items: center;">
                          <div style="display:flex; flex-wrap:wrap; gap: 20px; align-items: flex-end; justify-content: center;">
              <!-- Min. částka přesunuta do kroku 5.5 (Revolution – Nastavení úrovní) -->
              <div>
                <label style="font-size:13px; font-weight:600; color:#374151;">Počet milníků (obrázků)</label>
                <input type="number" id="revMilestoneCount" value="11" min="2" max="20" style="width:150px; text-align:center; height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; margin-top: 5px;">
              </div>
              <div style="display:flex; flex-direction:column; gap:6px;">
                <label style="font-size:13px; color:#374151; font-weight:600;">Náhled a stažení</label>
                <div style="display:flex; gap:8px; align-items:center;">
                  <select id="revMilestoneStepSelect" onchange="onRevolutionGfxStepChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px;"></select>
                  <a id="revGfxDownloadBtn" href="#" download="progress.png" class="mini-btn" onclick="return onRevolutionGfxDownloadClick(event)">Stáhnout</a>
                </div>
              </div>
              </div>
              <div id="revMilestoneCalc" style="font-size:12px; color:#6b7280; text-align:center; min-height: 18px;"></div>
              <div style="display:flex; justify-content:center; margin-bottom:12px;">
                <img id="revGfxTopPreview" alt="Náhled progresu" style="max-width:100%; height:auto; border:1px solid #e5e7eb; border-radius:8px; display: none;">
              </div>
              <div id="revGfxUploads" style="width:100%; display:grid; grid-template-columns:repeat(auto-fit, minmax(220px, 1fr)); gap:12px; align-items:start; margin-top:10px;"></div>
            </div>
          </div>
      </div>
      
       <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <!-- KROK 6: Nastavení razítek
         - Pokud Razítková + Standardní: detailní nastavení razítek
         - Pokud Razítková + Vlastní pro každé: nahrávání stripů pro jednotlivé stavy -->
    <div class="question-panel" data-step="6" id="step-6" style="display:none;">
      <div id="step6StampStandard" style="display:none;">
        <div class="q-title">Razítka – standardní nastavení</div>
        
        <div class="q-sub" style="margin-bottom:8px;">Maximální počet razítek (1–20)</div>
        <div style="display:flex; gap:8px; justify-content:center; align-items:center; margin-bottom:16px;">
          <input type="number" id="stampTotalInput" min="1" max="20" value="10" oninput="onStampTotalChange(this)" style="width:90px; padding:8px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
        </div>

        <div class="q-sub" style="margin-bottom:8px;">Design razítka</div>
        <div style="display:flex; gap:8px; justify-content:center; align-items:center; flex-wrap:wrap; margin-bottom:16px;">
          <div class="stamp-option" onclick="pickStampIcon('https://static.wixstatic.com/media/1cf87e_f7284a8ad6d1438c9e79eb3d0818890a~mv2.png', this)" data-selected="true">
            <img src="https://static.wixstatic.com/media/1cf87e_f7284a8ad6d1438c9e79eb3d0818890a~mv2.png" alt="Výchozí" style="width:32px; height:32px; border-radius:4px;">
            <span>Výchozí</span>
          </div>
          <div class="stamp-option" onclick="pickStampIcon('https://static.wixstatic.com/media/1cf87e_b902bf7ff01d45679dc1964eedc548d2~mv2.png', this)">
            <img src="https://static.wixstatic.com/media/1cf87e_b902bf7ff01d45679dc1964eedc548d2~mv2.png" alt="Káva" style="width:32px; height:32px; border-radius:4px;">
            <span>Káva</span>
          </div>
          <div class="stamp-option" onclick="pickStampIcon('https://static.wixstatic.com/media/1cf87e_4f9563aebb5d4391ab392f456c1f8c74~mv2.png', this)">
            <img src="https://static.wixstatic.com/media/1cf87e_4f9563aebb5d4391ab392f456c1f8c74~mv2.png" alt="Hvězda" style="width:32px; height:32px; border-radius:4px;">
            <span>Hvězda</span>
          </div>
          <div class="stamp-option custom-upload">
            <input type="file" id="stampIconFile" accept="image/*" onchange="onStampCustomIconChange(this)" style="display:none;">
            <div onclick="document.getElementById('stampIconFile').click()" style="width:32px; height:32px; border:2px dashed #ccc; border-radius:4px; display:flex; align-items:center; justify-content:center; cursor:pointer;">
              <span style="font-size:18px; color:#999;">+</span>
            </div>
            <span>Vlastní</span>
          </div>
        </div>

        <div style="display:flex; gap:16px; justify-content:center; align-items:flex-end; flex-wrap:wrap; margin-top:8px;">
          <div style="display:flex; flex-direction:column; gap:6px; min-width:160px;">
            <label style="font-size:13px; color:#374151; font-weight:600;">Velikost razítka (px)</label>
            <input type="number" id="stampSizeInput" min="1" value="44" oninput="onStampSizeChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
          </div>
          <div style="display:flex; flex-direction:column; gap:6px; min-width:160px;">
            <label style="font-size:13px; color:#374151; font-weight:600;">Rozestup mezi razítky (px)</label>
            <input type="number" id="stampGapInput" min="2" max="30" value="2" oninput="onStampGapChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
          </div>
          <div style="display:flex; flex-direction:column; gap:6px; min-width:160px;">
            <label style="font-size:13px; color:#374151; font-weight:600;">Průhlednost razítka (%)</label>
            <input type="number" id="stampOpacityInput" min="0" max="100" value="100" oninput="onStampOpacityChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
          </div>
        </div>

        </div>
        
        <div id="step6StampPer" style="display:none;">
          <div class="q-title">Razítka – Vlastní pro každé</div>
          <div class="q-sub">Zadejte počet razítek (1–20) a nahrajte obrázky stripu pro každý stav (0 až N).</div>
          <div style="display:flex; gap:12px; justify-content:center; align-items:flex-end; flex-wrap:wrap; margin-bottom:12px;">
            <div style="display:flex; flex-direction:column; gap:6px; min-width:160px;">
              <label style="font-size:13px; color:#374151; font-weight:600;">Počet razítek (1–20)</label>
              <input type="number" id="perStampTotalInput" min="1" max="20" value="10" oninput="onPerStampTotalChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
            </div>
            <div style="display:flex; flex-direction:column; gap:6px; min-width:220px;">
              <label style="font-size:13px; color:#374151; font-weight:600;">Náhled a stažení</label>
              <div style="display:flex; gap:8px; align-items:center;">
                <select id="perStripStepSelect" onchange="onPerStripStepChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px;"></select>
                <a id="perStripDownloadBtn" href="#" download="strip.png" class="mini-btn" onclick="return onPerStripDownloadClick(event)">Stáhnout</a>
              </div>
            </div>
          </div>
          <div style="text-align:center; margin-bottom:8px; font-size:12px; color:#6b7280;">
            Nejprve nahrajte obrázek stripu bez razítek (stav 0). Poté nahrajte, jak vypadá strip po přidání 1., 2., … razítka.
          </div>
          <div style="display:flex; justify-content:center; margin-bottom:12px;">
            <img id="perStripTopPreview" alt="Náhled stripu" style="max-width:100%; height:auto; border:1px solid #e5e7eb; border-radius:8px;">
          </div>
          <div id="perStripUploads" style="display:grid; grid-template-columns:repeat(auto-fit, minmax(220px, 1fr)); gap:12px; align-items:start;"></div>
        </div>

        <div class="q-actions">
          <button class="btn btn-back" onclick="goBack()">Zpět</button>
          <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
        </div>
      </div>
    <!-- KROK 7: Ohraničení razítek -->
    <div class="question-panel" data-step="7" id="step-7" style="display:none;">
      <div class="q-title">Nastavení ohraničení</div>
      <div class="q-sub">Chcete u razítek zobrazovat ohraničení?</div>
      <div class="options-row">
        <button id="borderToggleYes" class="option" onclick="pickStampBorderEnabled(true, this)">Zobrazovat ohraničení</button>
        <button id="borderToggleNo" class="option" onclick="pickStampBorderEnabled(false, this)">Nezobrazovat ohraničení</button>
      </div>
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" disabled onclick="goNext()">Pokračovat</button>
      </div>
    </div>

    <div class="question-panel" data-step="7.5" id="step-7b" style="display:none;">
        <div class="q-title">Vzhled ohraničení</div>
        <div class="q-sub">Zvolte, jak chcete ohraničení zobrazit v náhledu.</div>
        <div class="options-row" style="margin-bottom:14px;">
            <button class="option selected" onclick="setStampPreviewMode('partial', this)">Zobrazit částečně</button>
            <button class="option" onclick="setStampPreviewMode('none', this)">Zobrazit bez razítek</button>
            <button class="option" onclick="setStampPreviewMode('all', this)">Zobrazit s razítky</button>
        </div>
        <div id="stampBorderPanel" style="display:block;">
            <div class="q-sub" style="margin-bottom:8px;">Tvar ohraničení</div>
            <div class="options-row" style="margin-bottom:12px;">
                <button id="borderShapeOutlineBtn" class="option selected" onclick="pickStampBorderShape('outline', this)" title="Obrys" aria-label="Obrys">
                    <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg" style="display:block;">
                        <path d="M14 24C19.5228 24 24 19.5228 24 14C24 8.47715 19.5228 4 14 4C8.47715 4 4 8.47715 4 14C4 19.5228 8.47715 24 14 24ZM14 21C17.866 21 21 17.866 21 14C21 10.134 17.866 7 14 7C10.134 7 7 10.134 7 14C7 17.866 10.134 21 14 21Z" fill="currentColor"/>
                    </svg>
                </button>
                <button id="borderShapeIconBtn" class="option" onclick="pickStampBorderShape('icon', this)" title="Silueta razítka" aria-label="Silueta razítka">
                    <img id="borderShapeIconImg" src="" alt="Silueta razítka" style="display:block; width:28px; height:28px; object-fit:contain;" />
                </button>
                <button id="borderShapeCircleBtn" class="option" onclick="pickStampBorderShape('circle', this)" title="Kruh" aria-label="Kruh">
                    <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg" style="display:block;">
                        <circle cx="14" cy="14" r="10" stroke="currentColor" stroke-width="2" fill="none" />
                    </svg>
                </button>
                <button id="borderShapeRoundedBtn" class="option" onclick="pickStampBorderShape('rounded', this)" title="Zaoblený čtverec" aria-label="Zaoblený čtverec">
                    <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg" style="display:block;">
                        <rect x="6" y="6" width="16" height="16" rx="5" stroke="currentColor" stroke-width="2" fill="none" />
                    </svg>
                </button>
                <button id="borderShapeSquareBtn" class="option" onclick="pickStampBorderShape('square', this)" title="Čtverec" aria-label="Čtverec">
                    <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg" style="display:block;">
                        <rect x="6" y="6" width="16" height="16" stroke="currentColor" stroke-width="2" fill="none" />
                    </svg>
                </button>
                <button id="borderShapeCustomBtn" class="option" onclick="pickStampBorderShape('custom', this)" title="Nahrát vlastní">
                    <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display:block;"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="17 8 12 3 7 8"/><line x1="12" y1="3" x2="12" y2="15"/></svg>
                </button>
            </div>
            <input type="file" id="stampBorderFileInput" style="display:none;" accept="image/*" onchange="onStampBorderFileChange(this)">
            <div style="display:flex; gap:16px; flex-wrap:wrap; justify-content:center; align-items:flex-end; margin-bottom:12px;">
                <div style="display:flex; flex-direction:column; gap:6px; min-width:160px;">
                    <label style="font-size:13px; color:#374151; font-weight:600;">Tloušťka čáry (px)</label>
                    <input type="number" id="stampBorderSizeInput" min="1" max="12" value="2" oninput="onStampBorderSizeChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
                </div>
                <div style="display:flex; flex-direction:column; gap:6px; min-width:200px;">
                    <label style="font-size:13px; color:#374151; font-weight:600;">Vzdálenost od razítka (px)</label>
                    <input type="number" id="stampBorderOffsetInput" min="-20" max="40" value="-3" oninput="onStampBorderOffsetChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
                </div>
                <div style="display:flex; flex-direction:column; gap:6px; min-width:160px;">
                    <label style="font-size:13px; color:#374151; font-weight:600;">Průhlednost (%)</label>
                    <input type="number" id="stampBorderOpacityInput" min="0" max="100" value="100" oninput="onStampBorderOpacityChange(this)" style="height:38px; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; text-align:center;">
                </div>
                <div style="display:flex; flex-direction:column; gap:6px; min-width:180px;">
                    <label style="font-size:13px; color:#374151; font-weight:600;">Barva</label>
                    <input type="color" id="stampBorderColorInput" value="#000000" oninput="onStampBorderColorChange(this)" style="height:38px; padding:0; border:1px solid #e5e7eb; border-radius:8px;">
                </div>
            </div>
        </div>
        <div class="q-actions">
            <button class="btn btn-back" onclick="goBack()">Zpět</button>
            <button class="btn btn-next" onclick="goNext()">Pokračovat</button>
        </div>
    </div>

    
    
    <!-- KROK 10: Shrnutí -->
    <div class="question-panel" data-step="10" id="step-10" style="display:none;">
      <div class="q-title">Shrnutí</div>
      <div class="q-sub" id="summaryText" style="text-align:left; line-height:1.6;">
        
      </div>
      <div id="advancedDataWrap" style="margin-top:10px;">
        <button class="btn" id="toggleAdvancedBtn" onclick="toggleAdvancedData()">Zobrazit pokročilá data</button>
        <div id="advancedDataPanel" style="display:none; margin-top:8px; padding:10px; border:1px solid #e5e7eb; border-radius:8px; background:#f9fafb;">
          <div style="display:flex; gap:8px; margin-bottom:8px; flex-wrap:wrap;">
            <button type="button" class="btn" onclick="copyAdvancedDataToClipboard()">Kopírovat JSON</button>
            <button type="button" class="btn" onclick="downloadAdvancedData()">Stáhnout JSON</button>
          </div>
          <pre id="advancedDataPre" style="white-space:pre-wrap; word-break:break-word; max-height:220px; overflow:auto; margin:0;"></pre>
        </div>
      </div>
      <div class="q-actions">
        <button class="btn btn-back" onclick="goBack()">Zpět</button>
        <button class="btn btn-next" onclick="finishWizard()">Dokončit</button>
      </div>
    </div>
    <script>

          // --- Global state ---
          let currentStep = 1;
          let stepHistory = [];
          let cardType = '';
          let designChoice = 'preset';
          let pickedColor = null;
          let colorExplicitlyPicked = false;
          let textColor = '#000000';
          let topMode = null;
          let napisText = 'Text';
          let napisFont = 'tan-nimbus-2-webfont';
          let napisColor = '#000000';
          let napisColorUserEdited = false;
          let napisAlign = 'left';
          let logoUrl = '';
          let logoObjectUrl = null;
          
          // Nastavení pro Revolution kartu - GLOBÁLNÍ PROMĚNNÉ
          let revolutionMode = null; // 'preset' nebo 'custom'
          let revolutionLevels = [
            { name: 'GOLD', discount: 10, threshold: 2000, color: null },
            { name: 'DIA', discount: 15, threshold: 6000, color: null },
            { name: 'VIP', discount: 20, threshold: Infinity, color: null }
          ];
          let revolutionPreviewIndex = 0;
          let revolutionShowProgress = false;
          let revolutionGfxMode = null;
          let revolutionBonusMin = 500;
          let revolutionMilestones = 11;
          let revolutionGfxUrls = [];
          let revolutionGfxSelectedStep = 0;
          
          // PŘIDEJTE K OSTATNÍM GLOBÁLNÍM PROMĚNNÝM
          let napisSizeMode = 'auto';
          let napisManualSize = 16;
          let selectedStripUrl = '';
          
          // Pro uložení stavu a preset logiku - GLOBÁLNÍ PROMĚNNÉ
          let cardStateBeforePreset = null; // Pro uložení stavu
          let presetApplied = false; // Příznak, zda je preset aktivní
          

          let customStripObjectUrl = null;
          let stripText = '';
          let stripTextUserEdited = false;
          let stripTextPos = 'bottom';
          let stripTextSize = 'XS';
          let stripTextColor = '#FFFFFF';
          let stripTextFont = 'Arial';
          let stripTextBorder = false;
          let stripTextBorderSize = 1;
          let showStrip = false;
          let manualScale = null;

          // Nastavení pro Razítkovou kartu
          let stampMode = null;
          let stampTotal = 10;
          let stampOpacity = 1;
          let stampSize = 48;
          let stampGap = 6;
          let stampIconUrl = 'https://static.wixstatic.com/media/1cf87e_f7284a8ad6d1438c9e79eb3d0818890a~mv2.png';
          let stampCustomObjectUrl = null;
          let stampBorderEnabled = true;
          let stampBorderSize = 1; // Změněno na 1
          let stampBorderOffset = 1; // Nastaveno na výchozí hodnotu z inputu
          let stampBorderOpacity = 50; // Změněno na 50
          let stampBorderColor = '#374151'; // Změněno na tmavě šedou
          let stampBorderShape = 'outline';
          let stampPreviewMode = 'partial';
          // TOTO PŘIDEJ
          let stampBorderCustomUrl = null;
          let currentCustomBorderImg = null;
          // KONEC PŘIDÁNÍ
          let currentStampImg = null;
          let defaultStampUrl = 'https://static.wixstatic.com/media/1cf87e_f7284a8ad6d1438c9e79eb3d0818890a~mv2.png';
          let perStampTotal = 10;
          let perStripSelectedStep = 0;
          let perStripUrls = [];

          // Razítková strip animation controls
          let razitkovaAnimTimer = null;
          let razitkovaAnimPausedByUser = false;

          // Revolution strip animation controls
          let revolutionAnimTimer = null;
          let revolutionAnimPausedByUser = false;

          // Nastavení pro Bodovou kartu
          let bodRate = 10;
          let bodPoints = 1;
          let bodTopMessage = 'ZA 100B KÁVA ZDARMA';
          let bodBottomMessage = '10Kč=1BOD';
          let bodTopUserEdited = false;
          let bodBottomUserEdited = false;

          // Nastavení pro Procentní kartu
          let procentniLevels = [
            { name: 'GOLD', discount: 10, spend: 2000, color: null },
            { name: 'DIA', discount: 15, spend: 6000, color: null },
            { name: 'VIP', discount: 20, spend: Infinity, color: null }
          ];
          let procentniPreviewIndex = 0;

          // --- PRESET DEFINITIONS (DATA-DRIVEN) ---
          const PRESET_DEFINITIONS = {
            // Revolution Card Presets
            'revolution-kadernictvi': {
              cardType: 'revolution',
              pickedColor: '#111827',
              textColor: '#FFF3D1',
              topMode: 'napis',
              napisText: 'Your\nLogo',
              napisFont: 'tan-nimbus-2-webfont',
              napisColor: '#FFF3D1',
              napisColorUserEdited: true,
              napisSizeMode: 'auto',
              revolutionShowProgress: true,
              revolutionGfxMode: 'custom',
              revolutionMilestones: 9,
              revolutionGfxUrls: [
                'https://static.wixstatic.com/media/1cf87e_a021e374f19f41b5b50d7e6cf2448705~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_3b0da08ae4354d2a82df27e7e4d35faf~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_868147e4411741fe88a2fcb90bd368a9~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_73f53948440b4a3b8accd0077395933b~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_cc5e3831c2e34ba484eee2c96cab16b4~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_b681578544fe425eb26fdbef2a5b15c5~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_dfd37ff7fa194329a94c63ab21070470~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_7a1fb509a3f44a20b6122015b366681b~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_bac580fca3ef4fb9bdf601453d7c2289~mv2.png'
              ],
              showStrip: false,
              stripText: 'Naspořené peníze lze uplatnit od 500 Kč.'
            },
            'revolution-kadernictvi-2': {
              cardType: 'revolution',
              pickedColor: '#113FA2',
              textColor: '#AC7E02',
              topMode: 'napis',
              napisText: 'Your\nLogo',
              napisFont: 'tan-nimbus-2-webfont',
              napisColor: '#AC7E02',
              napisColorUserEdited: true,
              napisSizeMode: 'auto',
              revolutionShowProgress: true,
              revolutionGfxMode: 'custom',
              revolutionMilestones: 9,
              revolutionGfxUrls: [
                'https://static.wixstatic.com/media/1cf87e_a021e374f19f41b5b50d7e6cf2448705~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_3b0da08ae4354d2a82df27e7e4d35faf~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_868147e4411741fe88a2fcb90bd368a9~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_73f53948440b4a3b8accd0077395933b~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_cc5e3831c2e34ba484eee2c96cab16b4~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_b681578544fe425eb26fdbef2a5b15c5~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_dfd37ff7fa194329a94c63ab21070470~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_7a1fb509a3f44a20b6122015b366681b~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_bac580fca3ef4fb9bdf601453d7c2289~mv2.png'
              ],
              showStrip: false,
              stripText: 'Naspořené peníze lze uplatnit od 500 Kč.'
            },
            'revolution-blue': {
              cardType: 'revolution',
              pickedColor: '#1e40af',
              textColor: '#ffffff',
              topMode: 'napis',
              napisText: 'Your\nLogo',
              napisFont: 'tan-nimbus-2-webfont',
              napisColor: '#ffffff',
              napisColorUserEdited: true,
              napisSizeMode: 'auto',
              revolutionShowProgress: true,
              revolutionGfxMode: 'custom',
              revolutionMilestones: 9,
              revolutionGfxUrls: [
                'https://static.wixstatic.com/media/1cf87e_a021e374f19f41b5b50d7e6cf2448705~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_3b0da08ae4354d2a82df27e7e4d35faf~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_868147e4411741fe88a2fcb90bd368a9~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_73f53948440b4a3b8accd0077395933b~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_cc5e3831c2e34ba484eee2c96cab16b4~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_b681578544fe425eb26fdbef2a5b15c5~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_dfd37ff7fa194329a94c63ab21070470~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_7a1fb509a3f44a20b6122015b366681b~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_bac580fca3ef4fb9bdf601453d7c2289~mv2.png'
              ],
              showStrip: false,
              stripText: 'Naspořené peníze lze uplatnit od 500 Kč.'
            },
            'revolution-green': {
              cardType: 'revolution',
              pickedColor: '#059669',
              textColor: '#ffffff',
              topMode: 'napis',
              napisText: 'Your\nLogo',
              napisFont: 'tan-nimbus-2-webfont',
              napisColor: '#ffffff',
              napisColorUserEdited: true,
              napisSizeMode: 'auto',
              revolutionShowProgress: true,
              revolutionGfxMode: 'custom',
              revolutionMilestones: 9,
              revolutionGfxUrls: [
                'https://static.wixstatic.com/media/1cf87e_a021e374f19f41b5b50d7e6cf2448705~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_3b0da08ae4354d2a82df27e7e4d35faf~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_868147e4411741fe88a2fcb90bd368a9~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_73f53948440b4a3b8accd0077395933b~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_cc5e3831c2e34ba484eee2c96cab16b4~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_b681578544fe425eb26fdbef2a5b15c5~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_dfd37ff7fa194329a94c63ab21070470~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_7a1fb509a3f44a20b6122015b366681b~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_bac580fca3ef4fb9bdf601453d7c2289~mv2.png'
              ],
              showStrip: false,
              stripText: 'Naspořené peníze lze uplatnit od 500 Kč.'
            },
            'revolution-purple': {
              cardType: 'revolution',
              pickedColor: '#7c3aed',
              textColor: '#ffffff',
              topMode: 'napis',
              napisText: 'Your\nLogo',
              napisFont: 'tan-nimbus-2-webfont',
              napisColor: '#ffffff',
              napisColorUserEdited: true,
              napisSizeMode: 'auto',
              revolutionShowProgress: true,
              revolutionGfxMode: 'custom',
              revolutionMilestones: 9,
              revolutionGfxUrls: [
                'https://static.wixstatic.com/media/1cf87e_a021e374f19f41b5b50d7e6cf2448705~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_3b0da08ae4354d2a82df27e7e4d35faf~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_868147e4411741fe88a2fcb90bd368a9~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_73f53948440b4a3b8accd0077395933b~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_cc5e3831c2e34ba484eee2c96cab16b4~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_b681578544fe425eb26fdbef2a5b15c5~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_dfd37ff7fa194329a94c63ab21070470~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_7a1fb509a3f44a20b6122015b366681b~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_bac580fca3ef4fb9bdf601453d7c2289~mv2.png'
              ],
              showStrip: false,
              stripText: 'Naspořené peníze lze uplatnit od 500 Kč.'
            },
            'revolution-red': {
              cardType: 'revolution',
              pickedColor: '#dc2626',
              textColor: '#ffffff',
              topMode: 'napis',
              napisText: 'Your\nLogo',
              napisFont: 'tan-nimbus-2-webfont',
              napisColor: '#ffffff',
              napisColorUserEdited: true,
              napisSizeMode: 'auto',
              revolutionShowProgress: true,
              revolutionGfxMode: 'custom',
              revolutionMilestones: 9,
              revolutionGfxUrls: [
                'https://static.wixstatic.com/media/1cf87e_a021e374f19f41b5b50d7e6cf2448705~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_3b0da08ae4354d2a82df27e7e4d35faf~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_868147e4411741fe88a2fcb90bd368a9~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_73f53948440b4a3b8accd0077395933b~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_cc5e3831c2e34ba484eee2c96cab16b4~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_b681578544fe425eb26fdbef2a5b15c5~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_dfd37ff7fa194329a94c63ab21070470~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_7a1fb509a3f44a20b6122015b366681b~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_bac580fca3ef4fb9bdf601453d7c2289~mv2.png'
              ],
              showStrip: false,
              stripText: 'Naspořené peníze lze uplatnit od 500 Kč.'
            },
            // Procentní Card Presets
            'procentni-obchod': {
              cardType: 'procentni',
              pickedColor: '#4f46e5',
              textColor: '#ffffff',
              topMode: 'napis',
              napisText: 'OBCHOD\nNÁZEV',
              napisFont: 'system-ui',
              napisColor: '#ffffff',
              napisColorUserEdited: true,
              napisSizeMode: 'auto',
              selectedStripUrl: '',
              showStrip: true,
              stripText: 'Sleva',
              stripTextPos: 'center',
              stripTextSize: '16',
              stripTextColor: '#ffffff'
            },
            'procentni-restaurace': {
              cardType: 'procentni',
              pickedColor: '#059669',
              textColor: '#ffffff',
              topMode: 'napis',
              napisText: 'RESTAURACE\nNÁZEV',
              napisFont: 'system-ui',
              napisColor: '#ffffff',
              napisColorUserEdited: true,
              napisSizeMode: 'auto',
              selectedStripUrl: '',
              showStrip: true,
              stripText: 'Sleva',
              stripTextPos: 'center',
              stripTextSize: '16',
              stripTextColor: '#ffffff'
            },
            // Bodová Card Presets
            'bodova-kavarna': {
              cardType: 'bodova',
              pickedColor: '#dc2626',
              textColor: '#ffffff',
              topMode: 'napis',
              napisText: 'KAVÁRNA\nNÁZEV',
              napisFont: 'system-ui',
              napisColor: '#ffffff',
              napisColorUserEdited: true,
              napisSizeMode: 'auto',
              bodRate: 10,
              bodPoints: 1,
              bodTopMessage: 'BODY',
              bodBottomMessage: 'K VYUŽITÍ',
              selectedStripUrl: '',
              showStrip: true,
              stripText: 'Věrnostní body',
              stripTextPos: 'center',
              stripTextSize: '14',
              stripTextColor: '#ffffff'
            },
            'bodova-fastfood': {
              cardType: 'bodova',
              pickedColor: '#ea580c',
              textColor: '#ffffff',
              topMode: 'napis',
              napisText: 'FAST FOOD\nNÁZEV',
              napisFont: 'system-ui',
              napisColor: '#ffffff',
              napisColorUserEdited: true,
              napisSizeMode: 'auto',
              bodRate: 5,
              bodPoints: 1,
              bodTopMessage: 'BODY',
              bodBottomMessage: 'AKTIVNÍ',
              selectedStripUrl: '',
              showStrip: true,
              stripText: 'Rychlé občerstvení',
              stripTextPos: 'center',
              stripTextSize: '14',
              stripTextColor: '#ffffff'
            },
            // Razítková Card Presets
            'razitkova-klasik': {
              cardType: 'razitkova',
              pickedColor: '#7c3aed',
              textColor: '#ffffff',
              topMode: 'napis',
              napisText: 'PODNIK\nNÁZEV',
              napisFont: 'system-ui',
              napisColor: '#ffffff',
              napisColorUserEdited: true,
              napisSizeMode: 'auto',
              stampMode: 'standard',
              stampTotal: 10,
              stampSize: 24,
              stampGap: 8,
              stampOpacity: 0.3,
              stampBorderEnabled: true,
              stampBorderShape: 'outline',
              stampBorderSize: 2,
              stampBorderOffset: 4,
              stampBorderColor: '#ffffff',
              stampBorderOpacity: 80,
              selectedStripUrl: '',
              showStrip: true,
              stripText: 'Věrnostní karta',
              stripTextPos: 'center',
              stripTextSize: '14',
              stripTextColor: '#ffffff'
            },
            'razitkova-modern': {
              cardType: 'razitkova',
              pickedColor: '#0891b2',
              textColor: '#ffffff',
              topMode: 'napis',
              napisText: 'MODERNÍ\nPODNIK',
              napisFont: 'system-ui',
              napisColor: '#ffffff',
              napisColorUserEdited: true,
              napisSizeMode: 'auto',
              stampMode: 'standard',
              stampTotal: 8,
              stampSize: 28,
              stampGap: 12,
              stampOpacity: 0.4,
              stampBorderEnabled: true,
              stampBorderShape: 'circle',
              stampBorderSize: 3,
              stampBorderOffset: 6,
              stampBorderColor: '#ffffff',
              stampBorderOpacity: 90,
              selectedStripUrl: '',
              showStrip: true,
              stripText: 'Moderní design',
              stripTextPos: 'center',
              stripTextSize: '14',
              stripTextColor: '#ffffff'
            }
            ,
            // --- RAZÍTKOVÁ: 11 identických presetů (data-driven, stránkované) ---
            'razitkova-01': {
              cardType: 'razitkova',
              pickedColor: '#113FA2',
              textColor: '#AC7E02',
              topMode: 'napis',
              napisText: 'Your\nLogo',
              napisFont: 'tan-nimbus-2-webfont',
              napisColor: '#AC7E02',
              napisColorUserEdited: true,
              napisSizeMode: 'auto',
              stampMode: 'perStamp',
              stampTotal: 8,
              stampSize: 24,
              stampGap: 8,
              stampOpacity: 0.3,
              stampBorderEnabled: true,
              stampBorderShape: 'outline',
              stampBorderSize: 2,
              stampBorderOffset: 4,
              stampBorderColor: '#ffffff',
              stampBorderOpacity: 80,
              stampIconUrl: 'https://static.wixstatic.com/media/1cf87e_f7284a8ad6d1438c9e79eb3d0818890a~mv2.png',
              perStampTotal: 8,
              perStripUrls: [
                'https://static.wixstatic.com/media/1cf87e_a021e374f19f41b5b50d7e6cf2448705~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_3b0da08ae4354d2a82df27e7e4d35faf~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_868147e4411741fe88a2fcb90bd368a9~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_73f53948440b4a3b8accd0077395933b~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_cc5e3831c2e34ba484eee2c96cab16b4~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_b681578544fe425eb26fdbef2a5b15c5~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_dfd37ff7fa194329a94c63ab21070470~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_7a1fb509a3f44a20b6122015b366681b~mv2.png',
                'https://static.wixstatic.com/media/1cf87e_bac580fca3ef4fb9bdf601453d7c2289~mv2.png'
              ],
              selectedStripUrl: '',
              showStrip: false,
              stripText: '',
              stripTextPos: 'center',
              stripTextSize: '14',
              stripTextColor: '#ffffff',
              previewUrl: 'https://static.wixstatic.com/media/1cf87e_cae0bddb2ce341a7ae5b0aed871f2360~mv2.png'
            },
            'razitkova-02': { $copy: 'razitkova-01' },
            'razitkova-03': { $copy: 'razitkova-01' },
            'razitkova-04': { $copy: 'razitkova-01' },
            'razitkova-05': { $copy: 'razitkova-01' },
            'razitkova-06': { $copy: 'razitkova-01' },
            'razitkova-07': { $copy: 'razitkova-01' },
            'razitkova-08': { $copy: 'razitkova-01' },
            'razitkova-09': { $copy: 'razitkova-01' },
            'razitkova-10': { $copy: 'razitkova-01' },
            'razitkova-11': { $copy: 'razitkova-01' }
          };

          // --- START PŘIDANÉHO KÓDU ---
function applyPreset(presetName) {
    stopExampleSlideshow();
    try { stopRazitkovaAnimation(); } catch(_) {}
    try { stopRevolutionAnimation(); } catch(_) {}
    document.getElementById('examplePreview').style.display = 'none';
    document.getElementById('fakeCard').style.display = 'block';

    // KLÍČOVÁ ZMĚNA: Příznak nastavíme HNED NA ZAČÁTKU
    presetApplied = true; 

    // Resolve preset data (supports $copy aliasing) and handle by card type
    let presetData = (typeof PRESET_DEFINITIONS !== 'undefined') ? PRESET_DEFINITIONS[presetName] : null;
    if (presetData && typeof presetData.$copy === 'string') {
        try {
            const base = PRESET_DEFINITIONS[presetData.$copy] || {};
            presetData = Object.assign({}, base, presetData);
            delete presetData.$copy;
        } catch (_) {}
    }
    // Revolution Card Presets (data-driven)
    if (presetData && presetData.cardType === 'revolution') {
        // 1. Nastavíme všechny globální proměnné podle presetu (pouze definované klíče)
        if (presetData.cardType) cardType = presetData.cardType;
        if (presetData.pickedColor) pickedColor = presetData.pickedColor;
        if (presetData.textColor) textColor = presetData.textColor;

        if (presetData.topMode) topMode = presetData.topMode;
        if (typeof presetData.napisText !== 'undefined') napisText = presetData.napisText;
        if (typeof presetData.napisFont !== 'undefined') napisFont = presetData.napisFont;
        if (typeof presetData.napisColor !== 'undefined') napisColor = presetData.napisColor;
        if (typeof presetData.napisColorUserEdited !== 'undefined') napisColorUserEdited = presetData.napisColorUserEdited;
        if (typeof presetData.napisSizeMode !== 'undefined') napisSizeMode = presetData.napisSizeMode;

        if (typeof presetData.revolutionShowProgress !== 'undefined') revolutionShowProgress = presetData.revolutionShowProgress;
        if (typeof presetData.revolutionGfxMode !== 'undefined') revolutionGfxMode = presetData.revolutionGfxMode;
        if (typeof presetData.revolutionMilestones !== 'undefined') revolutionMilestones = presetData.revolutionMilestones;
        if (Array.isArray(presetData.revolutionGfxUrls)) {
            revolutionGfxUrls = presetData.revolutionGfxUrls.slice();
            if (!revolutionMilestones) {
                revolutionMilestones = revolutionGfxUrls.length;
            }
            revolutionGfxSelectedStep = Math.max(0, revolutionMilestones - 1);
            selectedStripUrl = revolutionGfxUrls[revolutionGfxSelectedStep];
            // Pokud preset dodal konkrétní sadu obrázků, vynutíme dynamický progres a custom režim
            if (typeof revolutionShowProgress === 'undefined') revolutionShowProgress = true;
            if (!revolutionGfxMode) revolutionGfxMode = 'custom';
            try { updateRevolutionGfxPreview(); } catch(_) {}
        }

        if (typeof presetData.showStrip !== 'undefined') showStrip = presetData.showStrip;
        if (typeof presetData.stripText !== 'undefined') stripText = presetData.stripText;
        if (typeof presetData.stripTextPos !== 'undefined') stripTextPos = presetData.stripTextPos;
        if (typeof presetData.stripTextSize !== 'undefined') stripTextSize = presetData.stripTextSize;
        if (typeof presetData.stripTextColor !== 'undefined') stripTextColor = presetData.stripTextColor;

        // Inicializace UI a automatické spuštění animace po kliknutí na preset (jen v kroku 4.5)
        try { initRevolutionStateUI(); } catch(_) {}
        revolutionAnimPausedByUser = false;
        try { startRevolutionAnimation({ reset: true }); } catch(_) {}
        try { updateRevolutionAnimToggleLabel(); } catch(_) {}
    }
    // Razítková Card Presets (data-driven)
    else if (presetData && presetData.cardType === 'razitkova') {
        if (presetData.cardType) cardType = presetData.cardType;
        if (presetData.pickedColor) pickedColor = presetData.pickedColor;
        if (presetData.textColor) textColor = presetData.textColor;

        if (presetData.topMode) topMode = presetData.topMode;
        if (typeof presetData.napisText !== 'undefined') napisText = presetData.napisText;
        if (typeof presetData.napisFont !== 'undefined') napisFont = presetData.napisFont;
        if (typeof presetData.napisColor !== 'undefined') napisColor = presetData.napisColor;
        if (typeof presetData.napisColorUserEdited !== 'undefined') napisColorUserEdited = presetData.napisColorUserEdited;
        if (typeof presetData.napisSizeMode !== 'undefined') napisSizeMode = presetData.napisSizeMode;

        if (typeof presetData.stampMode !== 'undefined') stampMode = presetData.stampMode;
        if (typeof presetData.stampTotal !== 'undefined') { stampTotal = presetData.stampTotal; perStampTotal = presetData.stampTotal; }
        if (typeof presetData.stampSize !== 'undefined') stampSize = presetData.stampSize;
        if (typeof presetData.stampGap !== 'undefined') stampGap = presetData.stampGap;
        if (typeof presetData.stampOpacity !== 'undefined') stampOpacity = presetData.stampOpacity;
        if (typeof presetData.stampIconUrl !== 'undefined') stampIconUrl = presetData.stampIconUrl;
        if (typeof presetData.stampBorderEnabled !== 'undefined') stampBorderEnabled = presetData.stampBorderEnabled;
        if (typeof presetData.stampBorderShape !== 'undefined') stampBorderShape = presetData.stampBorderShape;
        if (typeof presetData.stampBorderSize !== 'undefined') stampBorderSize = presetData.stampBorderSize;
        if (typeof presetData.stampBorderOffset !== 'undefined') stampBorderOffset = presetData.stampBorderOffset;
        if (typeof presetData.stampBorderColor !== 'undefined') stampBorderColor = presetData.stampBorderColor;
        if (typeof presetData.stampBorderOpacity !== 'undefined') stampBorderOpacity = presetData.stampBorderOpacity;
        
        // Optional: per-stamp (per state) preset support
        // If a preset provides per-state strip images, preconfigure per-stamp mode
        if (typeof presetData.perStampTotal !== 'undefined') {
            perStampTotal = presetData.perStampTotal;
        }
        if (Array.isArray(presetData.perStripUrls)) {
            try {
                perStripUrls = presetData.perStripUrls.slice();
            } catch(_) { perStripUrls = []; }
            // If stampTotal not explicitly provided, derive it from perStampTotal or the array length - 1 (states 0..N)
            if (typeof presetData.stampTotal === 'undefined') {
                if (typeof presetData.perStampTotal !== 'undefined') {
                    stampTotal = presetData.perStampTotal;
                } else {
                    stampTotal = Math.max(0, perStripUrls.length - 1);
                }
            }
            // Default selected step to provided value, otherwise to perStampTotal or last array index
            const fallbackSel = (typeof presetData.perStampTotal !== 'undefined') ? presetData.perStampTotal : Math.max(0, perStripUrls.length - 1);
            try {
                const desired = (typeof presetData.perStripSelectedStep !== 'undefined') ? presetData.perStripSelectedStep : fallbackSel;
                perStripSelectedStep = Math.max(0, Math.min(Math.max(0, perStripUrls.length - 1), desired));
            } catch(_) {
                perStripSelectedStep = fallbackSel;
            }
            // Ensure mode switches to perStamp unless explicitly specified otherwise in the preset
            if (!presetData.stampMode) {
                stampMode = 'perStamp';
            }
        }

        if (typeof presetData.showStrip !== 'undefined') showStrip = presetData.showStrip;
        if (typeof presetData.stripText !== 'undefined') stripText = presetData.stripText;
        if (typeof presetData.stripTextPos !== 'undefined') stripTextPos = presetData.stripTextPos;
        if (typeof presetData.stripTextSize !== 'undefined') stripTextSize = presetData.stripTextSize;
        if (typeof presetData.stripTextColor !== 'undefined') stripTextColor = presetData.stripTextColor;
        if (typeof presetData.selectedStripUrl !== 'undefined') selectedStripUrl = presetData.selectedStripUrl;

        // Initialize manual state UI and start animation for Razítková presets
        try { initRazitkovaStateUI(); } catch(_) {}
        try { startRazitkovaAnimation(); } catch(_) {}
    }
    // Legacy explicit presets
    else if (presetName === 'revolution-kadernictvi') {
        try { stopRazitkovaAnimation(); } catch(_) {}
        // 1. Nastavíme všechny globální proměnné podle presetu
        pickedColor = '#111827';
        textColor = '#FFF3D1';
        topMode = 'napis';
        napisText = 'Your\nLogo';
        napisFont = 'tan-nimbus-2-webfont';
        napisColor = '#FFF3D1';
        napisColorUserEdited = true;
        napisSizeMode = 'auto';
        cardType = 'revolution';
        revolutionShowProgress = true;
        revolutionGfxMode = 'custom';
        revolutionMilestones = 9;
        revolutionGfxUrls = [
            'https://static.wixstatic.com/media/1cf87e_a021e374f19f41b5b50d7e6cf2448705~mv2.png', 'https://static.wixstatic.com/media/1cf87e_3b0da08ae4354d2a82df27e7e4d35faf~mv2.png',
            'https://static.wixstatic.com/media/1cf87e_868147e4411741fe88a2fcb90bd368a9~mv2.png', 'https://static.wixstatic.com/media/1cf87e_73f53948440b4a3b8accd0077395933b~mv2.png',
            'https://static.wixstatic.com/media/1cf87e_cc5e3831c2e34ba484eee2c96cab16b4~mv2.png', 'https://static.wixstatic.com/media/1cf87e_b681578544fe425eb26fdbef2a5b15c5~mv2.png',
            'https://static.wixstatic.com/media/1cf87e_dfd37ff7fa194329a94c63ab21070470~mv2.png', 'https://static.wixstatic.com/media/1cf87e_7a1fb509a3f44a20b6122015b366681b~mv2.png',
            'https://static.wixstatic.com/media/1cf87e_bac580fca3ef4fb9bdf601453d7c2289~mv2.png'
        ];
        revolutionGfxSelectedStep = revolutionMilestones - 1;
        selectedStripUrl = revolutionGfxUrls[revolutionGfxSelectedStep];
        showStrip = false;
        stripText = 'Naspořené peníze lze uplatnit od 500 Kč.';

        // Auto-start animace při kliknutí na legacy Revolution preset (v kroku 4.5)
        try { initRevolutionStateUI(); } catch(_) {}
        revolutionAnimPausedByUser = false;
        try { if (currentStep === 4.5) startRevolutionAnimation({ reset: true }); } catch(_) {}
        try { updateRevolutionAnimToggleLabel(); } catch(_) {}
    }
    // Procentní Card Presets
    else if (presetName === 'procentni-obchod') {
        pickedColor = '#4f46e5';
        textColor = '#ffffff';
        topMode = 'napis';
        napisText = 'OBCHOD\nNÁZEV';
        napisFont = 'system-ui';
        napisColor = '#ffffff';
        napisColorUserEdited = true;
        napisSizeMode = 'auto';
        cardType = 'procentni';
        selectedStripUrl = '';
        showStrip = true;
        stripText = 'Sleva';
        stripTextPos = 'center';
        stripTextSize = '16';
        stripTextColor = '#ffffff';
    }
    else if (presetName === 'procentni-restaurace') {
        pickedColor = '#059669';
        textColor = '#ffffff';
        topMode = 'napis';
        napisText = 'RESTAURACE\nNÁZEV';
        napisFont = 'system-ui';
        napisColor = '#ffffff';
        napisColorUserEdited = true;
        napisSizeMode = 'auto';
        cardType = 'procentni';
        selectedStripUrl = '';
        showStrip = true;
        stripText = 'Sleva';
        stripTextPos = 'center';
        stripTextSize = '16';
        stripTextColor = '#ffffff';
    }
    // Bodová Card Presets
    else if (presetName === 'bodova-kavarna') {
        pickedColor = '#dc2626';
        textColor = '#ffffff';
        topMode = 'napis';
        napisText = 'KAVÁRNA\nNÁZEV';
        napisFont = 'system-ui';
        napisColor = '#ffffff';
        napisColorUserEdited = true;
        napisSizeMode = 'auto';
        cardType = 'bodova';
        bodRate = 10;
        bodPoints = 1;
        bodTopMessage = 'BODY';
        bodBottomMessage = 'K VYUŽITÍ';
        selectedStripUrl = '';
        showStrip = true;
        stripText = 'Věrnostní body';
        stripTextPos = 'center';
        stripTextSize = '14';
        stripTextColor = '#ffffff';
    }
    else if (presetName === 'bodova-fastfood') {
        pickedColor = '#ea580c';
        textColor = '#ffffff';
        topMode = 'napis';
        napisText = 'FAST FOOD\nNÁZEV';
        napisFont = 'system-ui';
        napisColor = '#ffffff';
        napisColorUserEdited = true;
        napisSizeMode = 'auto';
        cardType = 'bodova';
        bodRate = 5;
        bodPoints = 1;
        bodTopMessage = 'BODY';
        bodBottomMessage = 'AKTIVNÍ';
        selectedStripUrl = '';
        showStrip = true;
        stripText = 'Rychlé občerstvení';
        stripTextPos = 'center';
        stripTextSize = '14';
        stripTextColor = '#ffffff';
    }
    // Razítková Card Presets
    else if (presetName === 'razitkova-klasik') {
        pickedColor = '#7c3aed';
        textColor = '#ffffff';
        topMode = 'napis';
        napisText = 'PODNIK\nNÁZEV';
        napisFont = 'system-ui';
        napisColor = '#ffffff';
        napisColorUserEdited = true;
        napisSizeMode = 'auto';
        cardType = 'razitkova';
        stampMode = 'standard';
        stampTotal = 10;
        stampSize = 24;
        stampGap = 8;
        stampOpacity = 0.3;
        stampBorderEnabled = true;
        stampBorderShape = 'outline';
        stampBorderSize = 2;
        stampBorderOffset = 4;
        stampBorderColor = '#ffffff';
        stampBorderOpacity = 80;
        selectedStripUrl = '';
        showStrip = true;
        stripText = 'Věrnostní karta';
        stripTextPos = 'center';
        stripTextSize = '14';
        stripTextColor = '#ffffff';
    }
    else if (presetName === 'razitkova-modern') {
        pickedColor = '#0891b2';
        textColor = '#ffffff';
        topMode = 'napis';
        napisText = 'MODERNÍ\nPODNIK';
        napisFont = 'system-ui';
        napisColor = '#ffffff';
        napisColorUserEdited = true;
        napisSizeMode = 'auto';
        cardType = 'razitkova';
        stampMode = 'standard';
        stampTotal = 8;
        stampSize = 28;
        stampGap = 12;
        stampOpacity = 0.4;
        stampBorderEnabled = true;
        stampBorderShape = 'circle';
        stampBorderSize = 3;
        stampBorderOffset = 6;
        stampBorderColor = '#ffffff';
        stampBorderOpacity = 90;
        selectedStripUrl = '';
        showStrip = true;
        stripText = 'Moderní design';
        stripTextPos = 'center';
        stripTextSize = '14';
        stripTextColor = '#ffffff';
    }

    // Common synchronization for all presets
    if (presetName) {
        // 2. Synchronizujeme UI prvky v ostatních krocích
        document.querySelectorAll('#step-1 .swatch').forEach(s => s.classList.toggle('selected', toHex(s.style.backgroundColor) === pickedColor));
        document.getElementById('customColor').value = pickedColor;
        
        document.querySelector('#step-2 .option[onclick*="\'napis\'"]').classList.add('selected');
        document.querySelector('#step-2 .option[onclick*="\'logo\'"]').classList.remove('selected');
        document.getElementById('napisTextarea').value = napisText;
        document.getElementById('napisFont').value = napisFont;
        document.getElementById('napisColor').value = napisColor;

        // Explicitní synchronizace barvy textů na kartě
        document.querySelectorAll('#step-2-5 .swatch').forEach(s => s.classList.remove('selected'));
        const targetSwatch = Array.from(document.querySelectorAll('#step-2-5 .swatch')).find(s => {
            const swatchColor = toHex(s.style.backgroundColor).toUpperCase();
            return swatchColor === textColor.toUpperCase();
        });
        if (targetSwatch) {
            targetSwatch.classList.add('selected');
        }
        const customTextColorInput = document.getElementById('customTextColor');
        if (customTextColorInput) customTextColorInput.value = textColor;

        document.querySelectorAll('#step-4 .type-card').forEach(btn => btn.classList.toggle('selected', btn.dataset.type === cardType));
        
        // Revolution-specific UI sync
        if (cardType === 'revolution') {
            document.querySelectorAll('#step-5c .option').forEach((btn, index) => {
                btn.classList.toggle('selected', (index === 0 && revolutionShowProgress === true) || (index === 1 && revolutionShowProgress === false));
            });
        }
        
        // 3. Vykreslíme finální podobu karty
        (async () => {
            await setCardColor(pickedColor, { skipAutoTextColor: true });
            await setTextColor(textColor);
            await applyCardType(cardType);
            await renderLogoSlot();
        })();

        // 4. Povolíme pokračování - najdeme správné tlačítko podle typu karty
        const currentSection = document.getElementById(`step-4-5-${cardType}`);
        if (currentSection) {
            const nextBtn = currentSection.querySelector('.btn-next');
            if (nextBtn) nextBtn.disabled = false;
        }
    }
}

// --- Revolution Preset Grid + Pagination (5x2) ---
let revPresetList = [];
let revPresetPage = 0;
const revPresetPageSize = 10; // 5 x 2
const REV_PREVIEW_FALLBACK = 'https://static.wixstatic.com/media/1cf87e_c66475389057414f989c3da03d7fa38c~mv2.png';
// Explicit preview thumbnails (match original static previews)
const REVOLUTION_PRESET_PREVIEWS = {
  'revolution-kadernictvi': 'https://static.wixstatic.com/media/1cf87e_c66475389057414f989c3da03d7fa38c~mv2.png',
  'revolution-kadernictvi-2': 'https://static.wixstatic.com/media/1cf87e_cae0bddb2ce341a7ae5b0aed871f2360~mv2.png',
  'revolution-blue': 'https://static.wixstatic.com/media/1cf87e_c66475389057414f989c3da03d7fa38c~mv2.png',
  'revolution-green': 'https://static.wixstatic.com/media/1cf87e_c66475389057414f989c3da03d7fa38c~mv2.png',
  'revolution-purple': 'https://static.wixstatic.com/media/1cf87e_c66475389057414f989c3da03d7fa38c~mv2.png',
  'revolution-red': 'https://static.wixstatic.com/media/1cf87e_c66475389057414f989c3da03d7fa38c~mv2.png'
};

function collectRevolutionPresetList() {
  const list = [];
  try {
    if (typeof PRESET_DEFINITIONS === 'object' && PRESET_DEFINITIONS) {
      for (const [key, val] of Object.entries(PRESET_DEFINITIONS)) {
        if (val && val.cardType === 'revolution') {
          // Prefer explicit preview mapping (keeps original thumbnails), then optional val.previewUrl, then fallback
          let preview = REVOLUTION_PRESET_PREVIEWS[key] || val.previewUrl || REV_PREVIEW_FALLBACK;
          list.push({ key, title: key, preview });
        }
      }
    }
  } catch(_) {}
  // Fallback to known presets if none were found
  if (!list.length) {
    [
      'revolution-kadernictvi',
      'revolution-kadernictvi-2',
      'revolution-blue',
      'revolution-green',
      'revolution-purple',
      'revolution-red'
    ].forEach(k => list.push({ key: k, title: k, preview: REV_PREVIEW_FALLBACK }));
  }
  return list;
}

function initRevolutionPresetPaging() {
  revPresetList = collectRevolutionPresetList();
  renderRevolutionPresetPage(0);
}

// Remember which Revolution preset is currently selected (for visual persistence)
// Use window-scoped variable to avoid TDZ issues on redefinitions
try { window.selectedRevolutionPresetKey = window.selectedRevolutionPresetKey || ''; } catch(_) { /* browser context expected */ }

function renderRevolutionPresetPage(pageIndex) {
  const grid = document.getElementById('revolutionPresetGrid');
  if (!grid) return;
  const totalPages = Math.max(1, Math.ceil(revPresetList.length / revPresetPageSize));
  let idx = Number.isFinite(pageIndex) ? pageIndex : 0;
  idx = Math.max(0, Math.min(totalPages - 1, idx));
  revPresetPage = idx;

  const start = idx * revPresetPageSize;
  const slice = revPresetList.slice(start, start + revPresetPageSize);
  grid.innerHTML = '';
  slice.forEach(item => {
    const card = document.createElement('div');
    card.className = 'preset-card';
    card.dataset.presetKey = item.key;
    // Highlight if this is the previously selected preset
    if (window.selectedRevolutionPresetKey && item.key === window.selectedRevolutionPresetKey) {
      card.classList.add('selected');
      try {
        const nextBtn = document.querySelector('#step-4-5-revolution .btn-next');
        if (nextBtn) nextBtn.disabled = false;
      } catch(_) {}
    }
    card.onclick = () => {
      applyPreset(item.key);
      // After applying, immediately reflect the selection in UI
      try {
        window.selectedRevolutionPresetKey = item.key;
        // Clear previous selections on current page
        grid.querySelectorAll('.preset-card.selected').forEach(el => el.classList.remove('selected'));
        card.classList.add('selected');
        // Enable Next button once a preset is picked
        const nextBtn = document.querySelector('#step-4-5-revolution .btn-next');
        if (nextBtn) nextBtn.disabled = false;
      } catch(_) {}
    };
    const img = document.createElement('img');
    img.src = item.preview || REV_PREVIEW_FALLBACK;
    img.alt = item.title || item.key || 'Revolution Preset';
    card.appendChild(img);
    grid.appendChild(card);
  });

  updateRevolutionPaginationControls(totalPages);
  // If we have a saved selection (even if on another page), keep Next enabled
  try {
    if (window.selectedRevolutionPresetKey) {
      const nextBtn = document.querySelector('#step-4-5-revolution .btn-next');
      if (nextBtn) nextBtn.disabled = false;
    }
  } catch(_) {}
}

function updateRevolutionPaginationControls(totalPages) {
  const pag = document.getElementById('revolutionPresetPagination');
  if (!pag) return;
  if (totalPages <= 1) {
    pag.style.display = 'none';
    return;
  }
  pag.style.display = 'flex';
  const prev = document.getElementById('revPrevBtn');
  const next = document.getElementById('revNextBtn');
  const ind = document.getElementById('revPageIndicator');
  if (ind) ind.textContent = `${revPresetPage + 1} / ${totalPages}`;
  if (prev) prev.disabled = (revPresetPage <= 0);
  if (next) next.disabled = (revPresetPage >= totalPages - 1);
}

function revolutionPrevPage() { renderRevolutionPresetPage(revPresetPage - 1); }
function revolutionNextPage() { renderRevolutionPresetPage(revPresetPage + 1); }
// --- KONEC NOVÉ FUNKCE ---
          
          // --- Razítková Preset Grid + Pagination (5x2) ---
          let razPresetList = [];
          let razPresetPage = 0;
          const razPresetPageSize = 10; // 5 x 2
          const RAZ_PREVIEW_FALLBACK = 'https://via.placeholder.com/200x120/113FA2/AC7E02?text=Raz%C3%ADtkov%C3%A1';
          
          function collectRazitkovaPresetList() {
            const list = [];
            try {
              if (typeof PRESET_DEFINITIONS === 'object' && PRESET_DEFINITIONS) {
                for (const [key, val] of Object.entries(PRESET_DEFINITIONS)) {
                  if (!val) continue;
                  // Accept direct razitkova definitions or $copy that points to a razitkova base
                  let isRazitkova = (val.cardType === 'razitkova');
                  if (!isRazitkova && typeof val.$copy === 'string') {
                    try {
                      const base = PRESET_DEFINITIONS[val.$copy];
                      isRazitkova = !!(base && base.cardType === 'razitkova');
                    } catch(_) { isRazitkova = false; }
                  }
                  if (!isRazitkova) continue;
                  // Pouze nová stránkovaná řada razitkova-01 .. razitkova-11
                  if (!/^razitkova-(0[1-9]|10|11)$/.test(key)) continue;
                  let preview = '';
                  if (val && typeof val.previewUrl === 'string' && val.previewUrl) {
                    preview = val.previewUrl;
                  } else if (val && typeof val.$copy === 'string') {
                    try {
                      const base = PRESET_DEFINITIONS[val.$copy];
                      preview = (base && base.previewUrl) ? base.previewUrl : RAZ_PREVIEW_FALLBACK;
                    } catch(_) { preview = RAZ_PREVIEW_FALLBACK; }
                  } else {
                    preview = RAZ_PREVIEW_FALLBACK;
                  }
                  list.push({ key, title: key, preview });
                }
              }
            } catch(_) {}
            // Fallback: vygeneruj názvy, pokud nic nenalezeno
            if (!list.length) {
              const keys = ['01','02','03','04','05','06','07','08','09','10','11'].map(n => `razitkova-${n}`);
              keys.forEach(k => list.push({ key: k, title: k, preview: RAZ_PREVIEW_FALLBACK }));
            }
            return list;
          }
          
          function initRazitkovaPresetPaging() {
            razPresetList = collectRazitkovaPresetList();
            renderRazitkovaPresetPage(0);
          }
          
          // Remember selected Razítková preset across renders
          try { window.selectedRazitkovaPresetKey = window.selectedRazitkovaPresetKey || ''; } catch(_) {}
          
          function renderRazitkovaPresetPage(pageIndex) {
            const grid = document.getElementById('razitkovaPresetGrid');
            if (!grid) return;
            const totalPages = Math.max(1, Math.ceil(razPresetList.length / razPresetPageSize));
            let idx = Number.isFinite(pageIndex) ? pageIndex : 0;
            idx = Math.max(0, Math.min(totalPages - 1, idx));
            razPresetPage = idx;
            
            const start = idx * razPresetPageSize;
            const slice = razPresetList.slice(start, start + razPresetPageSize);
            grid.innerHTML = '';
            slice.forEach(item => {
              const card = document.createElement('div');
              card.className = 'preset-card';
              card.dataset.presetKey = item.key;
              // Highlight if previously selected
              if (window.selectedRazitkovaPresetKey && item.key === window.selectedRazitkovaPresetKey) {
                card.classList.add('selected');
                try {
                  const nextBtn = document.querySelector('#step-4-5-razitkova .btn-next');
                  if (nextBtn) nextBtn.disabled = false;
                } catch(_) {}
              }
              card.onclick = () => {
                applyPreset(item.key);
                try {
                  window.selectedRazitkovaPresetKey = item.key;
                  // Clear previous selections on current page
                  grid.querySelectorAll('.preset-card.selected').forEach(el => el.classList.remove('selected'));
                  card.classList.add('selected');
                  // Enable Next button once a preset is picked
                  const nextBtn = document.querySelector('#step-4-5-razitkova .btn-next');
                  if (nextBtn) nextBtn.disabled = false;
                } catch(_) {}
              };
              const img = document.createElement('img');
              img.src = item.preview || RAZ_PREVIEW_FALLBACK;
              img.alt = item.title || item.key || 'Razítková Preset';
              card.appendChild(img);
              grid.appendChild(card);
            });
            
            updateRazitkovaPaginationControls(totalPages);
            // If we have a saved selection (even if on another page), keep Next enabled
            try {
              if (window.selectedRazitkovaPresetKey) {
                const nextBtn = document.querySelector('#step-4-5-razitkova .btn-next');
                if (nextBtn) nextBtn.disabled = false;
              }
            } catch(_) {}
          }
          
          function updateRazitkovaPaginationControls(totalPages) {
            const pag = document.getElementById('razitkovaPresetPagination');
            if (!pag) return;
            if (totalPages <= 1) {
              pag.style.display = 'none';
              return;
            }
            pag.style.display = 'flex';
            const prev = document.getElementById('razPrevBtn');
            const next = document.getElementById('razNextBtn');
            const ind = document.getElementById('razPageIndicator');
            if (ind) ind.textContent = `${razPresetPage + 1} / ${totalPages}`;
            if (prev) prev.disabled = (razPresetPage <= 0);
            if (next) next.disabled = (razPresetPage >= totalPages - 1);
          }
          
          function razitkovaPrevPage() { renderRazitkovaPresetPage(razPresetPage - 1); }
          function razitkovaNextPage() { renderRazitkovaPresetPage(razPresetPage + 1); }
          // --- KONEC RAZÍTKOVÁ PAGINACE ---
          
          // --- KONEC PŘIDANÉHO KÓDU ---
          
          // --- Bodová handlers ---
          function pickBodRate(rate, el) {
            bodRate = rate;
            try {
              document.querySelectorAll('#step-5 .option').forEach(b => b.classList.remove('selected'));
              if (el) el.classList.add('selected');
            } catch (_) {}
          }
    
    // --- Strip selection handlers ---
    function highlightSelectedStrip(el) {
      try {
        document.querySelectorAll('#step-3 .strip-card').forEach(b => b.classList.remove('selected'));
        if (el) el.classList.add('selected');
      } catch (_) {}
    }
    
    function pickStrip(url, el) {
      try {
        selectedStripUrl = url || '';
        // If switching from custom to preset, release previous object URL
        if (customStripObjectUrl) {
          try { URL.revokeObjectURL(customStripObjectUrl); } catch (_) {}
          customStripObjectUrl = null;
        }
        highlightSelectedStrip(el);
        positionStrip();
        setStripBackground();
        renderStrip();
      } catch (_) {}
    }
    
    function onCustomStripFileChange(input) {
      try {
        const file = input && input.files && input.files[0];
        if (!file) return;
        if (customStripObjectUrl) {
          try { URL.revokeObjectURL(customStripObjectUrl); } catch (_) {}
        }
        const objUrl = URL.createObjectURL(file);
        customStripObjectUrl = objUrl;
        selectedStripUrl = objUrl;
        const customBtn = document.getElementById('stripCustomBtn');
        highlightSelectedStrip(customBtn);
        positionStrip();
        setStripBackground();
        renderStrip();
      } catch (_) {}
    }
    
    // Scroll the strip carousel by N items (negative for prev, positive for next)
    function scrollStrip(direction) {
      const track = document.getElementById('stripTrack');
      if (!track) return;
      const first = track.querySelector('.strip-card');
      const gap = 12; // must match CSS gap
      const cardW = first ? first.getBoundingClientRect().width + gap : 100;
      const step = Math.max(cardW, 100) * 3; // scroll by ~3 cards
      const delta = direction > 0 ? step : -step;
      try {
        track.scrollBy({ left: delta, behavior: 'smooth' });
      } catch (_) {
        track.scrollLeft += delta;
      }
    }

    // Helper to draw stamp border according to current settings
    function drawStampBorder(ctx, x, y, size) {
      if (stampBorderShape === 'custom') {
        if (currentCustomBorderImg) {
          ctx.save();
          ctx.globalAlpha = Math.max(0, Math.min(1, (stampBorderOpacity || 100) / 100));
          ctx.drawImage(currentCustomBorderImg, x, y, size, size);
          ctx.restore();
        }
        return;
      }
      try {
        const lw = Math.max(1, stampBorderSize);
        const g = Number.isFinite(stampBorderOffset) ? stampBorderOffset : 0;
        ctx.save();
        ctx.globalAlpha = Math.max(0, Math.min(1, (stampBorderOpacity || 0) / 100));
        ctx.strokeStyle = stampBorderColor || '#000000';
        ctx.lineWidth = lw;
        if (stampBorderShape === 'circle') {
          const r = Math.max(lw / 2, (size / 2) + g + (lw / 2));
          ctx.beginPath();
          ctx.arc(x + size / 2, y + size / 2, r, 0, Math.PI * 2);
          ctx.stroke();
        } else if (stampBorderShape === 'rounded') {
          const w0 = Math.max(1, (size + 2 * g) - lw);
          const h0 = w0;
          const x0 = (x - g) + (lw / 2);
          const y0 = (y - g) + (lw / 2);
          const radBase = Math.max(2, Math.min(w0/2, (size + 2 * g) * 0.25));
          ctx.beginPath();
          ctx.moveTo(x0 + radBase, y0);
          ctx.lineTo(x0 + w0 - radBase, y0);
          ctx.quadraticCurveTo(x0 + w0, y0, x0 + w0, y0 + radBase);
          ctx.lineTo(x0 + w0, y0 + h0 - radBase);
          ctx.quadraticCurveTo(x0 + w0, y0 + h0, x0 + w0 - radBase, y0 + h0);
          ctx.lineTo(x0 + radBase, y0 + h0);
          ctx.quadraticCurveTo(x0, y0 + h0, x0, y0 + h0 - radBase);
          ctx.lineTo(x0, y0 + radBase);
          ctx.quadraticCurveTo(x0, y0, x0 + radBase, y0);
          ctx.closePath();
          ctx.stroke();
        } else if (stampBorderShape === 'icon' || stampBorderShape === 'outline') {
          const baseImg = currentStampImg;
          if (baseImg) {
            const innerSize = Math.max(1, Math.round((size + 2 * g) + lw));
            const ox = Math.round(x + (size - innerSize) / 2);
            const oy = Math.round(y + (size - innerSize) / 2);
            
            const off = document.createElement('canvas');
            off.width = innerSize; off.height = innerSize;
            const octx = off.getContext('2d');
            octx.imageSmoothingEnabled = true;
            octx.drawImage(baseImg, 0, 0, innerSize, innerSize);
            octx.globalCompositeOperation = 'source-in';
            octx.fillStyle = stampBorderColor || '#000000';
            octx.fillRect(0, 0, innerSize, innerSize);
            
            if (stampBorderShape === 'icon') { // Silueta
              const tmax = Math.max(1, Math.round(lw));
              for (let t = 1; t <= tmax; t++) {
                ctx.drawImage(off, ox - t, oy); ctx.drawImage(off, ox + t, oy);
                ctx.drawImage(off, ox, oy - t); ctx.drawImage(off, ox, oy + t);
                ctx.drawImage(off, ox - t, oy - t); ctx.drawImage(off, ox + t, oy - t);
                ctx.drawImage(off, ox - t, oy + t); ctx.drawImage(off, ox + t, oy + t);
              }
            } else { // Obrys
                const outlineCanvas = document.createElement('canvas');
                const padding = lw * 2;
                outlineCanvas.width = innerSize + padding;
                outlineCanvas.height = innerSize + padding;
                const outCtx = outlineCanvas.getContext('2d');
                const tmax = Math.max(1, Math.round(lw));
                for (let t = 1; t <= tmax; t++) {
                    outCtx.drawImage(off, padding/2 - t, padding/2); outCtx.drawImage(off, padding/2 + t, padding/2);
                    outCtx.drawImage(off, padding/2, padding/2 - t); outCtx.drawImage(off, padding/2, padding/2 + t);
                    outCtx.drawImage(off, padding/2 - t, padding/2 - t); outCtx.drawImage(off, padding/2 + t, padding/2 - t);
                    outCtx.drawImage(off, padding/2 - t, padding/2 + t); outCtx.drawImage(off, padding/2 + t, padding/2 + t);
                }
                outCtx.globalCompositeOperation = 'destination-out';
                outCtx.drawImage(off, padding/2, padding/2);
                ctx.drawImage(outlineCanvas, ox - padding/2, oy - padding/2);
            }
          }
        } else { // 'square'
          const w0 = Math.max(1, (size + 2 * g) - lw);
          const h0 = w0;
          const x0 = (x - g) + (lw / 2);
          const y0 = (y - g) + (lw / 2);
          ctx.strokeRect(x0, y0, w0, h0);
        }
        ctx.restore();
      } catch(_) {}
    }
    const previewUrls = [
      'https://static.wixstatic.com/media/1cf87e_8eaa5bcd78cb47acb401966c9ab36fe4~mv2.png',
      'https://static.wixstatic.com/media/1cf87e_c0958eccec69453792ac9a7cec8f7f05~mv2.png',
      'https://static.wixstatic.com/media/1cf87e_fd48ad49147c406dba2f1b53d26bd739~mv2.png'
    ];
    let previewIndex = 0;
    let previewTimer = null;

    function steps() {
      return Array.from(document.querySelectorAll('.question-panel[data-step]'));
    }

    function getStepEl(n) {
      return document.querySelector('.question-panel[data-step="' + n + '"]');
    }

    function showStep(n) {
      // Zapamatujeme si, odkud odcházíme (kvůli zamrznutí Razítková animace mimo 4.5)
      const prevStepBeforeShow = currentStep;
      // Special handling for step 4.5 - show the card type-specific section
      if (n === 4.5) {
        steps().forEach(p => { p.style.display = 'none'; });
        const targetSectionId = `step-4-5-${cardType}`;
        const targetSection = document.getElementById(targetSectionId);
        if (targetSection) {
          targetSection.style.display = 'block';
          // Při vstupu do razítkové sekce znovu spustíme animaci (pokud je relevantní)
          try {
            if (cardType === 'razitkova' && stampMode === 'perStamp') {
              startRazitkovaAnimation({ reset: false });
            }
          } catch(_) {}
          // Inicializace přepínače stavů pro Revolution (nepouštíme animaci automaticky)
          try {
            if (cardType === 'revolution') {
              initRevolutionStateUI();
              updateRevolutionAnimToggleLabel();
            }
          } catch(_) {}
          // Inicializace sekce zachování barvy: nastavíme "Současná barva" na pickedColor a označíme ji
          try {
            const cur = document.getElementById(`currentColorSwatch-${cardType}`);
            if (cur) {
              const colorToUse = pickedColor || '#ffffff';
              cur.style.background = colorToUse;
              const container = document.getElementById(`keepColorSection-${cardType}`);
              if (container) {
                container.querySelectorAll('.swatch').forEach(s => s.classList.remove('selected'));
                cur.classList.add('selected');
              }
              const inp = document.getElementById(`customColorAfter45-${cardType}`);
              if (inp) { try { inp.value = toHex(colorToUse); } catch(_) { inp.value = colorToUse; } }
            }
          } catch(_) {}
        } else {
          console.warn(`No section found for card type: ${cardType}, falling back to revolution`);
          const fallbackSection = document.getElementById('step-4-5-revolution');
          if (fallbackSection) fallbackSection.style.display = 'block';
        }
      } else if (n === 4.6) {
        // Special handling for step 4.6 - card type-specific keep-color section
        steps().forEach(p => { p.style.display = 'none'; });
        const targetSectionId = `step-4-6-${cardType}`;
        const targetSection = document.getElementById(targetSectionId);
        if (targetSection) {
          targetSection.style.display = 'block';
          // Collapsible starts closed each time we enter this step
          resetChangeColorCollapse(cardType);
          // Inicializace: nastavíme "Současná barva" na pickedColor a označíme ji
          try {
            const cur = document.getElementById(`currentColorSwatch-${cardType}`);
            if (cur) {
              const colorToUse = pickedColor || '#ffffff';
              cur.style.background = colorToUse;
              const container = document.getElementById(`keepColorSection-${cardType}`);
              if (container) {
                container.querySelectorAll('.swatch').forEach(s => s.classList.remove('selected'));
                cur.classList.add('selected');
              }
              const inp = document.getElementById(`customColorAfter45-${cardType}`);
              if (inp) { try { inp.value = toHex(colorToUse); } catch(_) { inp.value = colorToUse; } }
            }
          } catch(_) {}
        } else {
          console.warn(`No 4.6 section found for card type: ${cardType}`);
        }
      } else {
        steps().forEach(p => { p.style.display = (Number(p.dataset.step) === n || p.dataset.step === String(n)) ? 'block' : 'none'; });
      }
      currentStep = n;
      updateNavState();
      const tmpPrev = document.getElementById('topModePreview');
      if (tmpPrev) tmpPrev.style.display = 'none';

      // Pokud odcházíme z razítkové sekce 4.5 do jiné sekce,
      // zastavíme animaci a zajistíme, že mimo 4.5 se bude ukazovat vždy maximální stav
      if (prevStepBeforeShow === 4.5 && currentStep !== 4.5 && cardType === 'razitkova') {
        try { stopRazitkovaAnimation(); } catch(_) {}
        try { setStripBackground(); } catch(_) {}
      }
      // Pokud odcházíme z Revolution sekce 4.5 do jiné sekce, zastavíme animaci a nastavíme max stav
      if (prevStepBeforeShow === 4.5 && currentStep !== 4.5 && cardType === 'revolution') {
        try {
          revolutionAnimPausedByUser = true;
          stopRevolutionAnimation();
          const maxIdx = (Array.isArray(revolutionGfxUrls) && revolutionGfxUrls.length > 0)
            ? Math.max(0, revolutionGfxUrls.length - 1)
            : Math.max(0, (revolutionMilestones || 1) - 1);
          revolutionGfxSelectedStep = maxIdx;
          setStripBackground();
        } catch(_) {}
      }
      
      if (n === 2) {
        // --- ZDE JE NOVÁ LOGIKA ---
        // Pokud uživatel ještě ručně nezměnil barvu nápisu, nastavíme ji
        // automaticky podle toho, jestli je pozadí karty tmavé.
        if (!napisColorUserEdited) {
            napisColor = isColorDark(pickedColor) ? '#FFFFFF' : '#000000';
        }
        // --- KONEC NOVÉ LOGIKY ---

        if (!topMode) topMode = 'napis';
        const opts = document.querySelectorAll('#step-2 .option');
        opts.forEach((o, i) => o.classList.toggle('selected', (topMode === 'napis' ? i === 0 : i === 1)));
        const napisWrapper = document.getElementById('napisWrapper');
        const logoWrapper = document.getElementById('logoWrapper');
        const next = getCurrentNextBtn();
        if (topMode === 'napis') {
          if (napisWrapper) napisWrapper.style.display = 'flex';
          if (logoWrapper) logoWrapper.style.display = 'none';
          const textarea = document.getElementById('napisTextarea');
          if (textarea) textarea.value = napisText;
          updateNapisUI();
          renderLogoSlot();
          setTimeout(renderLogoSlot, 50);
          if (next) next.disabled = (napisText.trim().split('\n')[0].length === 0);

          // START NAHRAZENÉHO KÓDU
          // Nastavení UI pro velikost písma
          const manualInput = document.getElementById('napisManualSizeInput');
          const resetBtn = document.getElementById('napisResetSizeBtn');
          if (manualInput) {
              manualInput.value = napisManualSize;
          }
          if (resetBtn) {
              resetBtn.style.display = (napisSizeMode === 'manual') ? 'inline-block' : 'none';
          }
          // KONEC NAHRAZENÉHO KÓDU
        } else {
          if (napisWrapper) napisWrapper.style.display = 'none';
          if (logoWrapper) logoWrapper.style.display = 'flex';
          renderLogoSlot();
          if (next) next.disabled = (logoUrl.trim().length === 0);
        }
        setTopModePreviewSrc();
      }
      if (n === 2.5) {
        // Pokud není aplikován preset, synchronizujeme výchozí barvu z barvy nápisu
        // Pokud je aplikován preset, zachováme barvu z presetu
        if (!presetApplied) {
          textColor = napisColor;
        }
        // Pokud je preset aplikován, textColor už je nastavená z applyPreset funkce
        
        const customColorInput = document.getElementById('customTextColor');
        if (customColorInput) {
          customColorInput.value = toHex(textColor);
        }
        
        // Aplikujeme barvu na texty na kartě
        setTextColor(textColor);

        // Aktualizujeme vizuální výběr (které tlačítko je "zakliklé")
        updateTextColorSelectionUI();
        
        const nextBtn = getCurrentNextBtn();
        if (nextBtn) {
          nextBtn.disabled = !textColor;
        }

        if (pickedColor) {
          const colorRow = document.getElementById('textColorRow');
          if (colorRow) {
            const oldSwatch = document.getElementById('cardColorSwatch');
            if (oldSwatch) {
              oldSwatch.remove();
            }
            const cardColorSwatch = document.createElement('div');
            cardColorSwatch.id = 'cardColorSwatch';
            cardColorSwatch.className = 'swatch';
            cardColorSwatch.style.background = pickedColor;
            cardColorSwatch.title = 'Barva karty';
            cardColorSwatch.setAttribute('onclick', `pickTextColor('${pickedColor}', this)`);
            colorRow.prepend(cardColorSwatch);
          }
        }
      }
      if (n === 3) {
        const next = getCurrentNextBtn();
        if (next) next.disabled = false;
        try {
          const stripButtons = document.querySelectorAll('#step-3 .strip-card');
          if (!selectedStripUrl && stripButtons.length) {
            const first = stripButtons[0];
            selectedStripUrl = first.dataset.url || '';
            first.classList.add('selected');
            positionStrip();
            setStripBackground();
            renderStrip();
          } else {
            if (customStripObjectUrl) {
              const customBtn = document.getElementById('stripCustomBtn');
              if (customBtn) {
                stripButtons.forEach(b => b.classList.remove('selected'));
                customBtn.classList.add('selected');
              }
            } else {
              stripButtons.forEach(b => b.classList.toggle('selected', b.dataset.url === selectedStripUrl));
            }
          }
        } catch (_) {}
      }
      if (n === 4) {
        if (!cardType) cardType = 'revolution';
        const cards = document.querySelectorAll('#step-4 .type-card');
        cards.forEach(btn => btn.classList.toggle('selected', btn.dataset.type === cardType));
        const next = getCurrentNextBtn();
        if (next) next.disabled = false;
        applyCardType(cardType);
        updateTypeDescription(cardType);
        const descPanel = document.getElementById('typeDescPanel');
        if (descPanel) descPanel.style.display = 'block';
      }
      if (n === 4.5) {
        // KRITICKÉ: Uložíme aktuální stav karty hned při vstupu do kroku 4.5
        // aby se zachovala např. zelená barva nastavená v předchozích krocích
        if (!cardStateBeforePreset) {
            cardStateBeforePreset = {
                // Základní hodnoty
                cardType: cardType,
                designChoice: designChoice,
                pickedColor: pickedColor,
                textColor: textColor,
                topMode: topMode,
                napisText: napisText,
                napisFont: napisFont,
                napisColor: napisColor,
                napisSizeMode: napisSizeMode,
                napisManualSize: napisManualSize,
                napisAlign: napisAlign,
                logoUrl: logoUrl,
                // Nastavení stripu
                selectedStripUrl: selectedStripUrl,
                customStripObjectUrl: customStripObjectUrl,
                showStrip: showStrip,
                stripText: stripText,
                stripTextUserEdited: stripTextUserEdited,
                stripTextPos: stripTextPos,
                stripTextSize: stripTextSize,
                stripTextColor: stripTextColor,
                stripTextFont: stripTextFont,
                stripTextBorder: stripTextBorder,
                stripTextBorderSize: stripTextBorderSize,
                manualScale: manualScale,
                // Revolution specifické hodnoty
                revolutionShowProgress: revolutionShowProgress,
                revolutionGfxMode: revolutionGfxMode,
                revolutionBonusMin: revolutionBonusMin,
                revolutionMilestones: revolutionMilestones,
                revolutionGfxUrls: [...revolutionGfxUrls],
                revolutionGfxSelectedStep: revolutionGfxSelectedStep,
                // Uložíme také Revolution úrovně a náhled, aby se po návratu neaplikovaly barvy z presetů
                revolutionLevels: (Array.isArray(revolutionLevels) ? revolutionLevels.map(l => ({ ...l })) : []),
                revolutionPreviewIndex: revolutionPreviewIndex,
                revolutionMode: revolutionMode
            };
            // Synchronizace s window pro debug
            window.cardStateBeforePreset = cardStateBeforePreset;
            console.log('=== STAV ULOŽEN PŘI VSTUPU DO KROKU 4.5 ===');
            console.log('Uložený stav:', cardStateBeforePreset);
        }
        
        // Defaultně je vybrán vlastní návrh (custom)
        if (!designChoice) {
          designChoice = 'custom';
        }
        
        // Aktualizujeme UI podle aktuální volby
        const presetBtn = document.querySelector('#step-4-5 .option[onclick*="\'preset\']');
        const customBtn = document.querySelector('#step-4-5 .option[onclick*="\'custom\']');
        
        // Odstraníme všechny selected třídy
        document.querySelectorAll('#step-4-5 .option').forEach(o => o.classList.remove('selected'));
        
        // Označíme správné tlačítko podle aktuální volby
        if (designChoice === 'preset' && presetBtn) {
          presetBtn.classList.add('selected');
        } else if (designChoice === 'custom' && customBtn) {
          customBtn.classList.add('selected');
        }
        
        // Aktualizujeme zobrazení panelů
        const presetPanel = document.getElementById('presetSelectionPanel');
        const messagePanel = document.getElementById('presetMessagePanel');
        
        if (designChoice === 'preset') {
          if (presetPanel) presetPanel.style.display = 'block';
          if (messagePanel) messagePanel.style.display = 'block';
        } else {
          if (presetPanel) presetPanel.style.display = 'none';
          if (messagePanel) messagePanel.style.display = 'none';
        }

        const next = getCurrentNextBtn();
        if (next) next.disabled = false; // Always enabled as there is a default
      }
      if (n === 5.5) {
        renderRevolutionLevels();
        setRevolutionPreview(revolutionPreviewIndex);
        // Live update of card preview when min amount changes in step 5.5
        try {
          const minInp = document.getElementById('revBonusMinAmount');
          if (minInp && !minInp.dataset.revMinListener) {
            minInp.addEventListener('input', () => { try { updateFakeCardRevolutionLevel(); } catch(_) {} });
            minInp.dataset.revMinListener = 'true';
          }
        } catch(_) {}
        const next = getCurrentNextBtn();
        if (next) next.disabled = false;
      }
      if (n === 5.6) {
        // Inicializace Revolution nastavení pro custom mode
        if (cardType === 'revolution' && revolutionMode === 'custom') {
          // Nastavíme základní Revolution parametry pro custom mode
          if (!revolutionGfxMode) revolutionGfxMode = 'custom';
          if (!revolutionMilestones) revolutionMilestones = 9;
          if (!revolutionGfxUrls || revolutionGfxUrls.length === 0) {
            revolutionGfxUrls = [
              'https://static.wixstatic.com/media/1cf87e_a021e374f19f41b5b50d7e6cf2448705~mv2.png',
              'https://static.wixstatic.com/media/1cf87e_3b0da08ae4354d2a82df27e7e4d35faf~mv2.png',
              'https://static.wixstatic.com/media/1cf87e_868147e4411741fe88a2fcb90bd368a9~mv2.png',
              'https://static.wixstatic.com/media/1cf87e_73f53948440b4a3b8accd0077395933b~mv2.png',
              'https://static.wixstatic.com/media/1cf87e_cc5e3831c2e34ba484eee2c96cab16b4~mv2.png',
              'https://static.wixstatic.com/media/1cf87e_b681578544fe425eb26fdbef2a5b15c5~mv2.png',
              'https://static.wixstatic.com/media/1cf87e_dfd37ff7fa194329a94c63ab21070470~mv2.png',
              'https://static.wixstatic.com/media/1cf87e_7a1fb509a3f44a20b6122015b366681b~mv2.png',
              'https://static.wixstatic.com/media/1cf87e_bac580fca3ef4fb9bdf601453d7c2289~mv2.png'
            ];
          }
          
          // Vykreslení Revolution levelů a nastavení preview
          renderRevolutionLevels();
          setRevolutionPreview(0);
        }
        
        const noButton = document.querySelector('#step-5c .option[onclick*="false"]');
        if (noButton && !noButton.classList.contains('selected')) {
          pickRevolutionProgress(false, noButton);
        }
      }
      if (n === 5) {
        const isRazitkova = (cardType === 'razitkova');
        const isBodova = (cardType === 'bodova');
        const isProcentni = (cardType === 'procentni');
        const rz = document.getElementById('step5StampModePanel');
        const bd = document.getElementById('step5BodovaPanel');
        const pr = document.getElementById('step5ProcentniPanel');
        if (rz) rz.style.display = isRazitkova ? 'block' : 'none';
        if (bd) bd.style.display = isBodova ? 'block' : 'none';
        if (pr) pr.style.display = isProcentni ? 'block' : 'none';
        const next = getCurrentNextBtn();
        if (isRazitkova) {
          if (next) next.disabled = !stampMode;
          const preNote = document.getElementById('stampPresetNote');
          if (preNote) preNote.style.display = (stampMode === 'preset') ? 'block' : 'none';
          const perNote = document.getElementById('stampPerNote');
          if (perNote) perNote.style.display = (stampMode === 'perStamp') ? 'block' : 'none';
          const prBtn = document.getElementById('stampModePresetBtn');
          const sBtn = document.getElementById('stampModeStandardBtn');
          const pBtn = document.getElementById('stampModePerBtn');
          if (prBtn) prBtn.classList.toggle('selected', stampMode === 'preset');
          if (sBtn) sBtn.classList.toggle('selected', stampMode === 'standard');
          if (pBtn) pBtn.classList.toggle('selected', stampMode === 'perStamp');
        } else if (isBodova) {
          try {
            document.getElementById('bodPointsInput').value = String(bodPoints);
            document.getElementById('bodRateInput').value = String(bodRate);
            document.getElementById('bodTopTextInput').value = bodTopMessage;
            document.getElementById('bodBottomTextInput').value = bodBottomMessage;
          } catch(_) {}
          updateBodovaPreview();
          updateBodovaNextEnabled();
        } else if (isProcentni) {
          loadProcentniFromStorage();
          renderProcentniLevels();
          updateProcentniPreview();
          if (typeof showProcentniWarnings === 'function') showProcentniWarnings();
          if (next) next.disabled = false;
        } else {
          if (next) next.disabled = false;
        }
      }
      if (n === 6) {
        const isStampStandard = (cardType === 'razitkova' && stampMode === 'standard');
        const isStampPer = (cardType === 'razitkova' && stampMode === 'perStamp');
        const std = document.getElementById('step6StampStandard');
        const per = document.getElementById('step6StampPer');
        const strip = document.getElementById('step6StripPanel');
        if (std) std.style.display = isStampStandard ? 'block' : 'none';
        if (per) per.style.display = isStampPer ? 'block' : 'none';
        if (strip) {
            // U razítkové karty se dotaz přesouvá na samostatný krok 7.8
            strip.style.display = (cardType !== 'razitkova') ? 'block' : 'none';
            // PŘIDÁNO: Synchronizace UI podle proměnné showStrip
            const yesBtn = strip.querySelector('.option[onclick*="true"]');
            const noBtn = strip.querySelector('.option[onclick*="false"]');
            if(yesBtn) yesBtn.classList.toggle('selected', showStrip === true);
            if(noBtn) noBtn.classList.toggle('selected', showStrip === false);
        }

        const next = getCurrentNextBtn();
        if (next) next.disabled = false;
        if (isStampStandard) {
          try {
            document.getElementById('stampTotalInput').value = String(stampTotal);
            document.getElementById('stampOpacityInput').value = String(Math.round(Math.max(0, Math.min(1, stampOpacity)) * 100));
            document.getElementById('stampSizeInput').value = String(stampSize);
            document.getElementById('stampGapInput').value = String(stampGap);
            const stampOptions = document.querySelectorAll('.stamp-option');
            stampOptions.forEach(opt => opt.removeAttribute('data-selected'));
            const currentOption = Array.from(stampOptions).find(opt => (opt.getAttribute('onclick') || '').includes(stampIconUrl));
            if (currentOption) currentOption.setAttribute('data-selected', 'true');
          } catch(_) {}
        } else if (isStampPer) {
          try {
            document.getElementById('perStampTotalInput').value = String(perStampTotal);
            buildPerStripUI();
            updatePerStripPreviewAndDownload();
          } catch(_) {}
        }
      }
      if (n === 7) {
        const yes = document.getElementById('borderToggleYes');
        const no  = document.getElementById('borderToggleNo');
        if (yes) yes.classList.toggle('selected', stampBorderEnabled === true);
        if (no)  no.classList.toggle('selected', stampBorderEnabled === false);
        const next = getCurrentNextBtn();
        if (next) next.disabled = false;
      }
      if (n === 7.5) {
        // DEFINITIVNÍ OPRAVA: Vždy nastavíme výchozí hodnoty a zajistíme funkční navigaci
        if (!stampBorderShape) {
          stampBorderShape = 'outline';
        }
        if (!stampPreviewMode) {
          stampPreviewMode = 'partial';
        }

        // Najdeme a označíme výchozí tlačítka BEZ volání funkčních handlerů
        try {
          // NEJDŘÍVE označíme režim náhledu (horní řada tlačítek)
          const previewButtons = document.querySelectorAll('#step-7b > .options-row .option');
          previewButtons.forEach(btn => btn.classList.remove('selected'));
          const previewButton = document.querySelector(`#step-7b > .options-row .option[onclick*="'${stampPreviewMode}'"]`);
          if (previewButton) previewButton.classList.add('selected');
          
          // POTÉ označíme tvar ohraničení (dolní řada tlačítek)
          const shapeButtons = document.querySelectorAll('#step-7b #stampBorderPanel .options-row .option');
          shapeButtons.forEach(btn => btn.classList.remove('selected'));
          const shapeButton = document.getElementById('borderShapeOutlineBtn');
          if (shapeButton) {
            shapeButton.classList.add('selected');
            // OPRAVA: Skutečně zavoláme funkci pro inicializaci výchozího ohraničení
            pickStampBorderShape('outline', shapeButton);
          }
          
        } catch(e) {
          console.warn('Chyba při označování tlačítek v kroku 7.5:', e);
        }
        
        // Zobrazíme panel
        const panel = document.getElementById('stampBorderPanel');
        if (panel) panel.style.display = 'block';
        
        // DEFINITIVNÍ ŘEŠENÍ: Tlačítka navigace jsou VŽDY funkční
        const forceEnableNavigation = () => {
          // Přímé vyhledání tlačítek v kroku 7.5
          const step7bElement = document.getElementById('step-7b');
          if (step7bElement) {
            const nextBtn = step7bElement.querySelector('.btn-next');
            const backBtn = step7bElement.querySelector('.btn-back');
            
            if (nextBtn) {
              nextBtn.disabled = false;
              nextBtn.style.pointerEvents = 'auto';
              nextBtn.style.opacity = '1';
              nextBtn.style.cursor = 'pointer';
              // Přepsání onclick pro jistotu
              nextBtn.onclick = () => goNext();
            }
            
            if (backBtn) {
              backBtn.disabled = false;
              backBtn.style.pointerEvents = 'auto';
              backBtn.style.opacity = '1';
              backBtn.style.cursor = 'pointer';
              // Přepsání onclick pro jistotu
              backBtn.onclick = () => goBack();
            }
          }
          
          // EXTRA KONTROLA: Znovu označíme tvar ohraničení pro jistotu
          const shapeButton = document.getElementById('borderShapeOutlineBtn');
          if (shapeButton && !shapeButton.classList.contains('selected')) {
            shapeButton.classList.add('selected');
          }
        };
        
        // Spustíme okamžitě
        forceEnableNavigation();
        
        // A ještě jednou po krátké prodlevě
        setTimeout(forceEnableNavigation, 50);
        
        // A ještě jednou po delší prodlevě pro jistotu
        setTimeout(forceEnableNavigation, 200);
        
        // INTERVAL: Každou sekundu zkontrolujeme, zda jsou tlačítka funkční
        const step7bInterval = setInterval(() => {
          if (currentStep === 7.5) {
            forceEnableNavigation();
          } else {
            clearInterval(step7bInterval); // Ukončíme interval, když už nejsme v kroku 7.5
          }
        }, 1000);
      }
      if (n === 9) {
        const next = getCurrentNextBtn();
        if (next) next.disabled = !textColor;
      }
      if (n === 10) {
        const s = document.getElementById('summaryText');
        // Prepare derived values
        const cardTypeLabel = (cardType === 'bodova' ? 'Bodová' : cardType === 'procentni' ? 'Procentní' : cardType === 'razitkova' ? 'Razítková' : cardType === 'revolution' ? 'Revolution' : '');
        const logoPreviewUrl = getLogoSummaryImageUrl();
        const isRevolutionDynamic = (cardType === 'revolution' && !!revolutionShowProgress && revolutionGfxMode === 'custom' && Array.isArray(revolutionGfxUrls) && revolutionGfxUrls.length > 0);
        const hasPerStripArray = Array.isArray(perStripUrls) && perStripUrls.length > 0;
        const isRazDynamic = (cardType === 'razitkova' && stampMode === 'perStamp' && hasPerStripArray);
        const dynamicStripCount = isRevolutionDynamic ? revolutionGfxUrls.length : (isRazDynamic ? perStripUrls.length : 0);
        const lastDynamicStripUrl = isRevolutionDynamic ? revolutionGfxUrls[revolutionGfxUrls.length - 1] : (isRazDynamic ? perStripUrls[perStripUrls.length - 1] : null);

        // Per-level details for Revolution
        let levelsHtml = '';
        if (cardType === 'revolution' && Array.isArray(revolutionLevels)) {
          levelsHtml += `<strong>Počet úrovní:</strong> ${revolutionLevels.length}<br>`;
          revolutionLevels.forEach((lvl, idx) => {
            const color = (lvl && lvl.color) ? lvl.color : (pickedColor || '#ffffff');
            levelsHtml += `${idx+1}. úroveň — <strong>Název:</strong> ${escapeHtml(lvl?.name || '')}, <strong>Sleva:</strong> ${Number(lvl?.discount||0)}%, <strong>Cílová částka:</strong> ${Number(lvl?.threshold||0) === Infinity ? '∞' : Number(lvl?.threshold||0)} Kč, <strong>Barva:</strong> <span style="display:inline-block; width:12px; height:12px; background:${color}; border:1px solid #e5e7eb; vertical-align:middle;"></span> ${color}<br>`;
          });
        }

        // Strip section (static vs dynamic)
        let stripSectionHtml = '';
        if (isRevolutionDynamic || isRazDynamic) {
          // First show state 0 separately under plain label
          const list = isRevolutionDynamic ? revolutionGfxUrls : perStripUrls;
          if (Array.isArray(list) && list.length > 0) {
            const state0 = list[0];
            stripSectionHtml += `<strong>Grafika stripu:</strong> stav 0`;
            if (state0) {
              stripSectionHtml += ` <img src="${state0}" alt="Strip stav 0" style="display:inline-block; width:60px; height:14px; object-fit:cover; border-radius:2px; border:1px solid #e5e7eb; vertical-align:middle; margin-left:6px;"> <a href="${state0}" target="_blank" style="font-size:12px; margin-left:6px;">odkaz</a>`;
            }
            stripSectionHtml += '<br>';
            // Then list remaining dynamic states (1..max)
            const restCount = Math.max(list.length - 1, 0);
            if (restCount > 0) {
              stripSectionHtml += `<strong>Grafika stripu:</strong> Dynamická (${restCount} stavů)<br>`;
              stripSectionHtml += list.slice(1).map((u, i) => `<div style="margin-left:6px; font-size:12px;">stav ${i+1} <a href="${u}" target="_blank">${escapeHtml(u)}</a></div>`).join('');
            }
          }
        } else {
          stripSectionHtml += `<strong>Grafika stripu:</strong> ${selectedStripUrl ? (customStripObjectUrl ? 'Vlastní' : 'Předvolená') : '—'}`;
          if (selectedStripUrl) {
            stripSectionHtml += ` <img src="${selectedStripUrl}" alt="Strip" style="display:inline-block; width:60px; height:14px; object-fit:cover; border-radius:2px; border:1px solid #e5e7eb; vertical-align:middle; margin-left:6px;"> <a href="${selectedStripUrl}" target="_blank" style="font-size:12px; margin-left:6px;">odkaz</a>`;
          }
          stripSectionHtml += '<br>';
        }

        // Build final summary
        s.innerHTML = `
          <strong>Barva karty:</strong> <span style="display:inline-block; width:12px; height:12px; background:${pickedColor || '#ffffff'}; border:1px solid #e5e7eb; vertical-align:middle;"></span> ${pickedColor || '#ffffff'}<br>
          <strong>Barva textů na kartě:</strong> <span style="display:inline-block; width:12px; height:12px; background:${textColor || '#000000'}; border:1px solid #e5e7eb; vertical-align:middle;"></span> ${textColor || '#000000'}<br>
          <strong>Logo(Text):</strong> ${topMode === 'napis' ? `${escapeHtml(napisText)}` : (logoUrl ? `${escapeHtml(logoUrl)}` : '—')}<br>
          <strong>Logo (náhled + odkaz):</strong> ${logoPreviewUrl ? `<img src="${logoPreviewUrl}" alt="Logo náhled" style="display:inline-block; width:60px; height:28px; object-fit:contain; border-radius:2px; border:1px solid #e5e7eb; vertical-align:middle;"> <a href="${logoPreviewUrl}" target="_blank" style="font-size:12px; margin-left:6px;">odkaz</a>` : '—'}<br>
          <strong>Typ karty:</strong> ${cardTypeLabel}<br>
          ${cardType === 'bodova' ? `<strong>Směnný kurz:</strong> ${bodPoints} BOD = ${Number(bodRate)} Kč<br><strong>Horní řádek:</strong> ${escapeHtml(bodTopMessage)}<br><strong>Spodní řádek:</strong> ${escapeHtml(bodBottomMessage)}<br>` : ''}
          ${cardType === 'revolution' ? `<strong>Minimální částka:</strong> ${Number(revolutionBonusMin||0)} Kč<br>` : ''}
          ${levelsHtml}
          ${stripSectionHtml}
          ${(cardType === 'razitkova' && stampMode === 'standard') ? `<br><strong>Razítka:</strong> ${stampTotal} ks, velikost ${stampSize}px, rozestup ${stampGap}px, průhlednost ${Math.round(stampOpacity*100)}%<br>` : ''}
          ${(cardType === 'razitkova' && stampMode === 'standard') ? (`<strong>Ohraničení razítek:</strong> ` + (stampBorderEnabled ? `${(stampBorderShape === 'icon' ? 'silueta razítka' : stampBorderShape === 'outline' ? 'obrys' : stampBorderShape)}, tloušťka ${stampBorderSize}px, vzdálenost ${stampBorderOffset}px, <span style=\"display:inline-block; width:12px; height:12px; background:${stampBorderColor}; border:1px solid #e5e7eb; vertical-align:middle;\"></span> ${stampBorderColor}, ${stampBorderOpacity}%` : 'Nezobrazovat')) : ''}
        `;
        // Prepare Advanced Data JSON preview on enter
        try {
          const advPre = document.getElementById('advancedDataPre');
          if (advPre) {
            advPre.textContent = JSON.stringify(buildAdvancedDataSnapshot(), null, 2);
          }
          const tBtn = document.getElementById('toggleAdvancedBtn');
          if (tBtn) tBtn.textContent = 'Zobrazit pokročilá data';
          const advPanel = document.getElementById('advancedDataPanel');
          if (advPanel) advPanel.style.display = 'none';
        } catch(_) {}
      }
    }

    function getCurrentNextBtn() {
        const el = getStepEl(currentStep);
        return el ? el.querySelector('.btn-next') : null;
    }

    function getCurrentBackBtn() {
      const el = getStepEl(currentStep);
      return el ? el.querySelector('.btn-back') : null;
    }
    
    // --- Design Choice Handler ---
function pickDesignChoice(choice, el, targetCardType) {
    designChoice = choice;
    
    // Determine which section we're in based on targetCardType parameter
    const sectionId = `step-4-5-${targetCardType}`;
    const currentSection = document.getElementById(sectionId);
    
    if (!currentSection) {
        console.warn(`Section not found: ${sectionId}`);
        return;
    }
    
    // Clear selection in current section only
    currentSection.querySelectorAll('.option').forEach(o => o.classList.remove('selected'));
    if (el) el.classList.add('selected');

    const nextBtn = currentSection.querySelector('.btn-next');
    const messagePanel = document.getElementById(`presetMessagePanel-${targetCardType}`);
    const presetPanel = document.getElementById(`presetSelectionPanel-${targetCardType}`);

    if (choice === 'preset') {
        if (messagePanel) messagePanel.style.display = 'block';
        if (presetPanel) presetPanel.style.display = 'block';
        
        // Zakážeme "Pokračovat", dokud si uživatel nevybere konkrétní preset
        if (nextBtn) nextBtn.disabled = true; 
        // Sync "Současná barva" swatch with current pickedColor and select it
        try {
          const cur = document.getElementById(`currentColorSwatch-${targetCardType}`);
          if (cur) {
            const colorToUse = pickedColor || '#ffffff';
            cur.style.background = colorToUse;
            const container = document.getElementById(`keepColorSection-${targetCardType}`);
            if (container) {
              container.querySelectorAll('.swatch').forEach(s => s.classList.remove('selected'));
              cur.classList.add('selected');
            }
            const inp = document.getElementById(`customColorAfter45-${targetCardType}`);
            if (inp) { try { inp.value = toHex(colorToUse); } catch(_) { inp.value = colorToUse; } }
          }
        } catch(_) {}
        // Render Revolution presets in 5x2 grid with pagination
        if (targetCardType === 'revolution') {
          try { initRevolutionPresetPaging(); } catch(_) {}
        }
        // Render Razítková presets in 5x2 grid with pagination
        if (targetCardType === 'razitkova') {
          try { initRazitkovaPresetPaging(); } catch(_) {}
          // Prepare manual state switcher immediately
          try { initRazitkovaStateUI(); } catch(_) {}
        }
  } else { // 'custom'
        // Pokud se v Razítkové části přepíná na Vlastní návrh, zastavíme animaci
        if (targetCardType === 'razitkova') {
          try { stopRazitkovaAnimation(); } catch(_) {}
        }
        // Pokud existuje záloha (tzn. uživatel předtím zkoušel presety), obnovíme ji
        if (cardStateBeforePreset) {
            console.log('Obnovuji původní stav karty (přepnuto na Vlastní návrh).');
            
            Object.keys(cardStateBeforePreset).forEach(key => {
                window[key] = cardStateBeforePreset[key];
            });

            (async () => {
                const snap = JSON.parse(JSON.stringify(cardStateBeforePreset));
                await setCardColor(pickedColor, { skipAutoTextColor: true });
                await setTextColor(textColor);
                await applyCardType(cardType);
                // Po applyCardType znovu nastavíme strip hodnoty ze zálohy, aby se nepřepsaly defaulty
                try {
                  if (snap) {
                    showStrip = snap.showStrip;
                    stripText = snap.stripText;
                    stripTextPos = snap.stripTextPos;
                    stripTextSize = snap.stripTextSize;
                    stripTextColor = snap.stripTextColor;
                    stripTextUserEdited = snap.stripTextUserEdited;
                    selectedStripUrl = snap.selectedStripUrl;
                    customStripObjectUrl = snap.customStripObjectUrl;
                  }
                } catch(_) {}
                // Re-render Revolution úrovní a obnovíme náhled podle zálohy (kvůli barvám úrovní)
                try { if (snap && snap.cardType === 'revolution') { renderRevolutionLevels(); setRevolutionPreview(snap.revolutionPreviewIndex || 0); } } catch(_) {}
                await renderLogoSlot();
                // Dodatkové UI synchronizace po obnovení
                try { updateNapisUI(); setTopModePreviewSrc(); } catch (_) {}
                try { positionStrip(); setStripBackground(); renderStrip(); updateStripMiniUI(); } catch (_) {}
                // Sync vstupů s obnovenými hodnotami
                try { const si = document.getElementById('stripInput'); if (si) si.value = stripText; } catch(_) {}
                try { const ta = document.getElementById('napisTextarea'); if (ta) ta.value = napisText; } catch(_) {}
            })();

            presetApplied = false;
            // Zálohu zatím NEMAŽEME, uživatel se může vrátit k presetům
        }
        
        if (messagePanel) messagePanel.style.display = 'none';
      if (presetPanel) presetPanel.style.display = 'none';
      if (nextBtn) nextBtn.disabled = false;
      // Sync "Současná barva" swatch with current pickedColor and select it
      try {
        const cur = document.getElementById(`currentColorSwatch-${targetCardType}`);
        if (cur) {
          const colorToUse = pickedColor || '#ffffff';
          cur.style.background = colorToUse;
          const container = document.getElementById(`keepColorSection-${targetCardType}`);
          if (container) {
            container.querySelectorAll('.swatch').forEach(s => s.classList.remove('selected'));
            cur.classList.add('selected');
          }
          const inp = document.getElementById(`customColorAfter45-${targetCardType}`);
          if (inp) { try { inp.value = toHex(colorToUse); } catch(_) { inp.value = colorToUse; } }
        }
      } catch(_) {}
  }
}
    
    // --- Revolution karta handlers ---
    function pickRevolutionMode(mode, el) {
      revolutionMode = mode;
      document.querySelectorAll('#step-5b .option').forEach(o => o.classList.remove('selected'));
      if (el) el.classList.add('selected');

      const presetPanel = document.getElementById('revolutionPresetPanel');
      const customPanel = document.getElementById('revolutionCustomPanel');
      const nextBtn = document.querySelector('#step-5b .btn-next');

      if (mode === 'preset') {
        presetPanel.style.display = 'block';
        customPanel.style.display = 'none';
        nextBtn.disabled = true; // Uživatel musí vybrat design, aby mohl dál
      } else if (mode === 'custom') {
        presetPanel.style.display = 'none';
        customPanel.style.display = 'none'; // Skryjeme i custom panel - budeme konfigurovat až později
        nextBtn.disabled = false; // Povolíme pokračování na standardní kroky
        
        // NEBUDEME předkonfigurovat Revolution nastavení - to se udělá až později v průběhu
        // renderRevolutionLevels(); // Zrušeno
        // setRevolutionPreview(0);   // Zrušeno
      }
    }

    function pickRevolutionProgress(show, el) {
        revolutionShowProgress = !!show;
        // Označení aktivního tlačítka (Ano/Ne)
        document.querySelectorAll('#step-5c .options-row .option').forEach(o => o.classList.remove('selected'));
        if (el) el.classList.add('selected');

        // Zobrazení/skrytí panelu pro nahrávání grafiky
        const withProgressPanel = document.getElementById('revolutionWithProgressPanel');
        if (withProgressPanel) {
            withProgressPanel.style.display = show ? 'block' : 'none';
        }

        // Pokud je zvolena Dynamická grafika, skryjeme výběr Předpřipravené/Vlastní a vynutíme Vlastní grafiku
        if (show) {
            const gfxModeRow = document.querySelector('#revolutionWithProgressPanel .options-row');
            if (gfxModeRow) gfxModeRow.style.display = 'none';
            try {
              pickRevolutionGfxMode('custom');
            } catch(_) {
              // Fallback: ručně zobrazíme custom panel
              const presetNote = document.getElementById('revolutionGfxPresetNote');
              const customPanel = document.getElementById('revolutionGfxCustomPanel');
              if (presetNote) presetNote.style.display = 'none';
              if (customPanel) customPanel.style.display = 'block';
              revolutionGfxMode = 'custom';
              if (typeof setupRevolutionGfxUploads === 'function') setupRevolutionGfxUploads();
            }
        }

        // Aktivace tlačítka "Pokračovat"
        const nextBtn = document.querySelector('#step-5c .btn-next');
        if (nextBtn) {
            nextBtn.disabled = false;
        }
    }

    function pickRevolutionGfxMode(mode, el) {
        revolutionGfxMode = mode;
        document.querySelectorAll('#revolutionWithProgressPanel .options-row .option').forEach(o => o.classList.remove('selected'));
        if (el) el.classList.add('selected');

        const presetNote = document.getElementById('revolutionGfxPresetNote');
        const customPanel = document.getElementById('revolutionGfxCustomPanel');

        if (mode === 'preset') {
            presetNote.style.display = 'block';
            customPanel.style.display = 'none';
        } else if (mode === 'custom') {
            presetNote.style.display = 'none';
            customPanel.style.display = 'block';
            // Připneme posluchače na vstupy, aby se UI přestavělo při změně
            const minInp = document.getElementById('revBonusMinAmount');
            const milInp = document.getElementById('revMilestoneCount');
            [minInp, milInp].forEach(inp => {
              if (!inp) return;
              inp.oninput = setupRevolutionGfxUploads;
              inp.onchange = setupRevolutionGfxUploads;
            });
            setupRevolutionGfxUploads();
        }
    }

    function setupRevolutionGfxUploads() {
        const minAmountInput = document.getElementById('revBonusMinAmount');
        const milestonesInput = document.getElementById('revMilestoneCount');
        
        revolutionBonusMin = parseInt(minAmountInput.value, 10) || 500;
        revolutionMilestones = parseInt(milestonesInput.value, 10) || 11;

        const calcElem = document.getElementById('revMilestoneCalc');
        const uploadsContainer = document.getElementById('revGfxUploads');
        const selectElem = document.getElementById('revMilestoneStepSelect');
        
        if (revolutionMilestones > 1) {
            const step = revolutionBonusMin / (revolutionMilestones - 1);
            calcElem.textContent = `Grafika se změní po nasbírání každých ${step.toFixed(2).replace('.', ',')} Kč.`;

            uploadsContainer.innerHTML = '';
            selectElem.innerHTML = '';
            for (let i = 0; i < revolutionMilestones; i++) {
                const labelText = i === 0 ? 'Stav 0 (výchozí)' : `Stav ${i} (${(step * i).toFixed(0)} Kč)`;
                const uploaderHTML = `
                  <div style="display:flex; flex-direction:column; gap:6px;">
                    <label style="font-size:13px; color:#374151; font-weight:600;">${labelText}</label>
                    <input type="file" accept="image/*" onchange="onRevolutionGfxUploadChange(${i}, this)" style="padding:8px; border:1px solid #e5e7eb; border-radius:8px;">
                  </div>`;
                uploadsContainer.innerHTML += uploaderHTML;

                const option = document.createElement('option');
                option.value = i;
                option.textContent = `Stav ${i}`;
                selectElem.appendChild(option);
            }
            revolutionGfxUrls.length = revolutionMilestones;
            if (revolutionGfxSelectedStep >= revolutionMilestones) {
                revolutionGfxSelectedStep = 0;
            }
            selectElem.value = revolutionGfxSelectedStep;
            updateRevolutionGfxPreview();

        } else {
            calcElem.textContent = 'Počet milníků musí být alespoň 2.';
            uploadsContainer.innerHTML = '';
            selectElem.innerHTML = '';
        }
    }
    
    // Funkce pro změnu vybraného stavu v dropdownu
    function onRevolutionGfxStepChange(select) {
        try {
            // Manuální změna stavu – zastavíme animaci
            try { revolutionAnimPausedByUser = true; } catch(_) {}
            try { stopRevolutionAnimation(); } catch(_) {}
            revolutionGfxSelectedStep = parseInt(select.value, 10) || 0;
            updateRevolutionGfxPreview();
        } catch(e) { console.error("Chyba při změně stavu:", e); }
    }

    function onRevolutionLevelChange(index, field, value) {
        if (!revolutionLevels[index]) return;

        if (field === 'name' || field === 'color') {
            revolutionLevels[index][field] = value;
        } else {
            const numValue = parseInt(value, 10);
            if (!isNaN(numValue) && numValue >= 0) {
                revolutionLevels[index][field] = numValue;
            }
        }
        
        // Přepneme náhled na upravovanou úroveň
        setRevolutionPreview(index);
    }

    function setRevolutionPreview(index) {
        revolutionPreviewIndex = index;
        // Aktualizujeme pouze zvýraznění řádků bez kompletního překreslení
        const rows = document.querySelectorAll('#revolutionLevelsContainer tr');
        rows.forEach((row, i) => {
            row.classList.toggle('preview-active', i === index);
        });
        updateFakeCardRevolutionLevel();
    }
    
    function renderRevolutionLevels() {
        const container = document.getElementById('revolutionLevelsContainer');
        if (!container) return;

        container.innerHTML = '';
        
        revolutionLevels.forEach((level, index) => {
            const tr = document.createElement('tr');
            tr.onclick = () => setRevolutionPreview(index);
            if (index === revolutionPreviewIndex) {
                tr.classList.add('preview-active');
            }

            const isLast = index === revolutionLevels.length - 1;
            const fromThreshold = (index === 0) ? 0 : (revolutionLevels[index - 1].threshold);

            // Sloupec 1: Úroveň
            const tdLevel = document.createElement('td');
            tdLevel.className = 'level-index';
            tdLevel.textContent = index + 1;
            tr.appendChild(tdLevel);

            // Sloupec 2: Název statusu
            const tdName = document.createElement('td');
            const nameInput = document.createElement('input');
            nameInput.type = 'text';
            nameInput.value = level.name;
            nameInput.onchange = (e) => onRevolutionLevelChange(index, 'name', e.target.value);
            nameInput.onclick = (e) => e.stopPropagation();
            tdName.appendChild(nameInput);
            tr.appendChild(tdName);

            // Sloupec 3: Sleva (%)
            const tdDiscount = document.createElement('td');
            const discountInput = document.createElement('input');
            discountInput.type = 'number';
            discountInput.min = '0';
            discountInput.value = level.discount;
            discountInput.onchange = (e) => onRevolutionLevelChange(index, 'discount', e.target.value);
            discountInput.onclick = (e) => e.stopPropagation();
            tdDiscount.appendChild(discountInput);
            tr.appendChild(tdDiscount);

            // Sloupec 4: Cílová částka
            const tdThreshold = document.createElement('td');
            if (isLast) {
                tdThreshold.innerHTML = `<input type="text" value="a více" disabled style="background:#f9fafb; border-style:dashed;">`;
            } else {
                const thresholdInput = document.createElement('input');
                thresholdInput.type = 'number';
                thresholdInput.min = fromThreshold + 1;
                thresholdInput.value = level.threshold;
                thresholdInput.onchange = (e) => onRevolutionLevelChange(index, 'threshold', e.target.value);
                thresholdInput.onclick = (e) => e.stopPropagation();
                tdThreshold.appendChild(thresholdInput);
            }
            tr.appendChild(tdThreshold);

            // Sloupec 5: Barva karty
            const tdColor = document.createElement('td');
            if (index === 0) {
                tdColor.innerHTML = `<span>(Hlavní barva)</span>`;
            } else {
                // Jednoduché jedno pole pro barvu (bez palety tlačítek)
                const colorInput = document.createElement('input');
                colorInput.type = 'color';
                colorInput.value = level.color || pickedColor || '#ffffff';
                colorInput.onchange = (e) => onRevolutionLevelChange(index, 'color', e.target.value);
                colorInput.onclick = (e) => e.stopPropagation();
                tdColor.appendChild(colorInput);
            }
            tr.appendChild(tdColor);
            
            container.appendChild(tr);
        });

        // Povolit/zakázat tlačítko pro odebrání
        const removeBtn = document.getElementById('removeRevolutionLevelBtn');
        if (removeBtn) {
            removeBtn.disabled = revolutionLevels.length <= 1;
        }
    }
    
    function updateFakeCardRevolutionLevel() {
        if (cardType !== 'revolution') return;
        const level = revolutionLevels[revolutionPreviewIndex] || revolutionLevels[0];
        if (!level) return;

        // Najdeme elementy
        const discountLabel1 = document.getElementById('discountLabel1');
        const discountLabel2 = document.getElementById('discountLabel2');
        const statusVal = document.getElementById('statusVal');
        const discountVal = document.getElementById('discountVal');
        const savedVal = document.getElementById('savedVal');
        const fakeCard = document.getElementById('fakeCard');
        const minAmountInput = document.getElementById('revBonusMinAmount');

        // KROK 1: Nastavíme správné popisky pro Revolution kartu
        if (discountLabel1) discountLabel1.textContent = 'SLEVA';
        if (discountLabel2) discountLabel2.textContent = 'MIN.';
        
        // KROK 2: Nastavíme správné hodnoty
        if (statusVal) statusVal.textContent = `${level.discount}% ${level.name}`;
        if (discountVal) {
            const minAmount = minAmountInput ? minAmountInput.value : '500';
            discountVal.textContent = minAmount;
        }
        
        // KROK 2: Aplikujeme přesné posunutí a resetujeme posunutí z Procentní karty
        if (discountLabel1) {
            discountLabel1.style.position = 'relative';
            discountLabel1.style.left = '50px'; // Posun "SLEVA"
        }
        if (statusVal) {
            statusVal.style.position = 'relative';
            statusVal.style.left = '27px'; // Posun "10% GOLD"
        }

        // Nastavení "NASPOŘENO" a barvy karty
        if (savedVal) {
            if (revolutionPreviewIndex === 0) { savedVal.textContent = '378 Kč'; } 
            else if (revolutionPreviewIndex === 1) { savedVal.textContent = '2500 Kč'; } 
            else { savedVal.textContent = '7150 Kč'; }
        }
        if (fakeCard) {
            const colorToShow = level.color || pickedColor || '#ffffff';
            fakeCard.style.backgroundColor = colorToShow;
        }
    }

    // Revolution – color helper (klikací swatche)
    function setRevolutionLevelColor(index, color) {
      try {
        if (!revolutionLevels[index]) return;
        revolutionLevels[index].color = color;
        setRevolutionPreview(index);
      } catch (_) {}
    }

    // --- Procentní karta – persistence, validation & color helpers ---
    function saveProcentniToStorage() {
      try {
        localStorage.setItem('vernostni_procentni_levels', JSON.stringify(procentniLevels));
        localStorage.setItem('vernostni_procentni_preview', String(procentniPreviewIndex));
      } catch (_) {}
    }

    function loadProcentniFromStorage() {
      try {
        const raw = localStorage.getItem('vernostni_procentni_levels');
        const idxRaw = localStorage.getItem('vernostni_procentni_preview');
        if (raw) {
          const arr = JSON.parse(raw);
          if (Array.isArray(arr) && arr.length > 0) {
            procentniLevels = arr.map((l) => ({
              name: (l && typeof l.name === 'string') ? l.name : 'LEVEL',
              discount: clampNumber(l && l.discount, 0, 100),
              spend: normalizeSpend(l && l.spend),
              color: (l && l.color) || null
            }));
            // Ujistíme se, že poslední úroveň má nekonečný rozsah
            procentniLevels[procentniLevels.length - 1].spend = Infinity;
          }
        }
        if (idxRaw !== null) {
          const idx = parseInt(idxRaw, 10);
          if (!isNaN(idx) && idx >= 0 && idx < procentniLevels.length) {
            procentniPreviewIndex = idx;
          }
        }
      } catch (_) {}
    }

    function clampNumber(n, min, max) {
      const v = parseInt(n, 10);
      if (isNaN(v)) return min;
      return Math.max(min, Math.min(max, v));
    }

    function normalizeSpend(v) {
      if (v === Infinity) return Infinity;
      const n = parseInt(v, 10);
      if (isNaN(n) || n < 0) return 0;
      return n;
    }

    function validateProcentniLevels() {
      const warnings = [];
      // Sleva v rozsahu 0–100
      procentniLevels.forEach((lvl, i) => {
        if (typeof lvl.discount !== 'number' || lvl.discount < 0 || lvl.discount > 100) {
          warnings.push(`Úroveň ${i + 1}: Sleva musí být v rozmezí 0–100 %.`);
        }
      });
      // Monotónní nárůst hranic útrat (žádné překryvy)
      for (let i = 1; i < procentniLevels.length; i++) {
        const prev = procentniLevels[i - 1].spend;
        const curr = procentniLevels[i].spend;
        if (prev !== Infinity && curr !== Infinity && curr <= prev) {
          warnings.push(`Úroveň ${i + 1}: Hranice útraty musí být větší než předchozí (${prev}).`);
        }
      }
      // První úroveň začíná od 0 a poslední je "a více"
      if (procentniLevels.length > 0) {
        if (procentniLevels[0].spend === 0) {
          // OK – první má "0 až ..."
        }
        const last = procentniLevels[procentniLevels.length - 1];
        if (last.spend !== Infinity) {
          warnings.push('Poslední úroveň musí být "a více" (nekonečný rozsah).');
        }
      }
      return warnings;
    }

    function showProcentniWarnings() {
      try {
        const el = document.getElementById('procentniWarnings');
        if (!el) return;
        const warnings = validateProcentniLevels();
        if (!warnings || warnings.length === 0) {
          el.style.display = 'none';
          el.innerHTML = '';
          return;
        }
        const list = warnings.map(w => `<div style="display:flex;gap:6px;align-items:flex-start;"><span style="color:#d97706;">⚠️</span><span>${escapeHtml(w)}</span></div>`).join('');
        el.innerHTML = list;
        el.style.display = 'block';
      } catch (_) {}
    }

    function setProcentniLevelColor(index, color) {
      try {
        if (!procentniLevels[index]) return;
        procentniLevels[index].color = color;
        setProcentniPreview(index);
        if (typeof saveProcentniToStorage === 'function') saveProcentniToStorage();
      } catch (_) {}
    }
    
    function initializeDefaultRevolutionLevels() {
        // Resetujeme Revolution úrovně na výchozí hodnoty
        revolutionLevels = [
            { name: 'GOLD', discount: 10, threshold: 2000, color: null },
            { name: 'DIA', discount: 15, threshold: 6000, color: null },
            { name: 'VIP', discount: 20, threshold: Infinity, color: null }
        ];
        
        // Přidáme event listenery na nová políčka, pokud ještě nebyly přidány
        const minAmountInput = document.getElementById('revBonusMinAmount');
        const milestonesInput = document.getElementById('revMilestoneCount');
        if (minAmountInput && !minAmountInput.dataset.listenerAttached) {
            // Při změně minima zároveň aktualizujeme náhled karty a re-inicializujeme milníky
            minAmountInput.addEventListener('input', () => {
                try { updateFakeCardRevolutionLevel(); } catch(_) {}
                try { setupRevolutionGfxUploads(); } catch(_) {}
            });
            minAmountInput.dataset.listenerAttached = 'true';
        }
        if(milestonesInput && !milestonesInput.dataset.listenerAttached) {
            milestonesInput.addEventListener('input', setupRevolutionGfxUploads);
            milestonesInput.dataset.listenerAttached = 'true';
        }
    }
    
    function addRevolutionLevel() {
        const lastLevel = revolutionLevels[revolutionLevels.length - 1];
        // Pokud poslední úroveň má nekonečný práh, dáme jí konkrétní hodnotu
        if (lastLevel.threshold === Infinity) {
            const previousThreshold = (revolutionLevels.length > 1) ? revolutionLevels[revolutionLevels.length - 2].threshold : 0;
            lastLevel.threshold = previousThreshold + 4000;
        }
        
        revolutionLevels.push({
            name: 'Nová úroveň',
            discount: (lastLevel.discount || 0) + 3,
            threshold: Infinity, // Nová poslední úroveň je "a více"
            color: null // Nastavíme null, aby se použila hlavní barva karty
        });

        renderRevolutionLevels();
        setRevolutionPreview(revolutionLevels.length - 1); // Zobrazíme náhled nově přidané úrovně
    }
    
    function removeRevolutionLevel() {
        if (revolutionLevels.length > 1) {
            revolutionLevels.pop();
            // Zajistíme, že nová poslední úroveň má nekonečný práh
            if (revolutionLevels.length > 0) {
                revolutionLevels[revolutionLevels.length - 1].threshold = Infinity;
            }
            
            // Pokud jsme smazali zobrazenou úroveň, přepneme na poslední
            if (revolutionPreviewIndex >= revolutionLevels.length) {
                setRevolutionPreview(revolutionLevels.length - 1);
            } else {
                // Jinak jen překreslení
                renderRevolutionLevels();
                updateFakeCardRevolutionLevel();
            }
        }
    }

    function onRevolutionGfxUploadChange(index, input) {
        try {
            const file = input && input.files && input.files[0];
            if (!file) return;
            if (revolutionGfxUrls[index]) {
                try { URL.revokeObjectURL(revolutionGfxUrls[index]); } catch(_) {}
            }
            const url = URL.createObjectURL(file);
            revolutionGfxUrls[index] = url;

            // --- PŘIDANÁ LOGIKA ---
            // Automaticky přepneme na právě nahraný stav
            revolutionGfxSelectedStep = index;
            const selectElem = document.getElementById('revMilestoneStepSelect'); // Opraveno, bylo revGfxStepSelect
            if (selectElem) selectElem.value = index;

            // Aktualizujeme náhled i kartu
            updateRevolutionGfxPreview();
            // --- KONEC PŘIDANÉ LOGIKY ---

        } catch(e) { console.error("Chyba při nahrání obrázku:", e); }
    }

    function onRevolutionGfxStepChange(sel) {
        // Manuální změna stavu – zastavíme animaci
        try { revolutionAnimPausedByUser = true; } catch(_) {}
        try { stopRevolutionAnimation(); } catch(_) {}
        const v = parseInt(sel && sel.value, 10);
        revolutionGfxSelectedStep = isNaN(v) ? 0 : Math.max(0, Math.min(revolutionMilestones - 1, v));
        updateRevolutionGfxPreview();
    }

    function updateRevolutionGfxPreview() {
        try {
            const topPrev = document.getElementById('revGfxTopPreview');
            const dlBtn = document.getElementById('revGfxDownloadBtn');
            const url = revolutionGfxUrls[revolutionGfxSelectedStep] || selectedStripUrl || '';
            
            if (topPrev) {
                topPrev.src = url;
                topPrev.style.display = url ? 'block' : 'none';
            }
            if (dlBtn) dlBtn.href = url;
            
            // --- PŘIDANÝ ŘÁDEK ---
            // Vždy aktualizujeme strip na hlavní kartě, aby odpovídal náhledu
            // Synchronizujeme také hodnoty přepínačů stavů (4.5 a 5.6)
            try { const sel = document.getElementById('revolutionStateSelect'); if (sel) sel.value = String(revolutionGfxSelectedStep); } catch(_) {}
            try { const sel2 = document.getElementById('revMilestoneStepSelect'); if (sel2) sel2.value = String(revolutionGfxSelectedStep); } catch(_) {}
            setStripBackground();
            // --- KONEC PŘIDANÉHO ŘÁDKU ---

        } catch (e) { console.error("Chyba při aktualizaci náhledu:", e); }
    }
    
    // Funkce pro výpočet aktuálního kroku na základě utraty
    function getCurrentRevolutionStep() {
        try {
            // Získáme aktuální utratu z UI nebo použijeme výchozí hodnotu
            const spendInput = document.getElementById('aktualniUtrataInput');
            const currentSpend = spendInput ? parseFloat(spendInput.value) || 0 : 0;
            
            // Pokud není nastavený minimální bonus nebo počet milníků, vrátíme 0
            if (!revolutionBonusMin || revolutionMilestones <= 1) return 0;
            
            // Vypočítáme krok na základě utraty a minimálního bonusu
            const step = revolutionBonusMin / (revolutionMilestones - 1);
            const calculatedStep = Math.floor(currentSpend / step);
            
            // Omezíme na rozsah 0 až revolutionMilestones - 1
            return Math.max(0, Math.min(revolutionMilestones - 1, calculatedStep));
        } catch (e) {
            console.error("Chyba při výpočtu aktuálního kroku:", e);
            return 0;
        }
    }

    function onRevolutionGfxDownloadClick(e) {
        e.preventDefault();
        const url = e.target.href;
        if (!url || url.endsWith('#') || !url.startsWith('blob:')) {
            alert('Nejprve nahrajte obrázek pro tento stav.');
            return false;
        }
        const a = document.createElement('a');
        a.href = url;
        a.download = `progress_stav_${revolutionGfxSelectedStep}.png`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        return false;
    }

    function updateNavState() {
      const back = getCurrentBackBtn();
      if (back) back.disabled = currentStep === 1;
    }

    // --- Nová pomocná funkce pro detekci tmavé barvy ---
    function isColorDark(hexColor) {
        if (!hexColor) return false;
        hexColor = hexColor.replace('#', '');
        if (hexColor.length === 3) {
            hexColor = hexColor.split('').map(char => char + char).join('');
        }
        const r = parseInt(hexColor.substring(0, 2), 16);
        const g = parseInt(hexColor.substring(2, 4), 16);
        const b = parseInt(hexColor.substring(4, 6), 16);
        // Vypočet jasu (luminance) - hodnota pod 128 je považována za tmavou
        const luminance = (0.299 * r + 0.587 * g + 0.114 * b);
        return luminance < 128;
    }

    function clearSelected() {
      document.querySelectorAll('.swatch').forEach(s => s.classList.remove('selected'));
    }

    function setCardColor(color, options = {}) {
      const card = document.getElementById('fakeCard');
      if (card) card.style.backgroundColor = color;
      pickedColor = color;
      const next = getCurrentNextBtn();
      if (next) next.disabled = false;

      // Udržuj zobrazení "Současná barva" ve shodě s aktuální barvou
      try { const curRev = document.getElementById('currentColorSwatch-revolution'); if (curRev) curRev.style.background = color; } catch(_) {}
      try { const curRaz = document.getElementById('currentColorSwatch-razitkova'); if (curRaz) curRaz.style.background = color; } catch(_) {}

      // Automatické nastavení barvy textu může být výslovně vypnuto parametrem.
      const skipAuto = (options && options.skipAutoTextColor);
      if (!skipAuto) {
        const newTextColor = isColorDark(color) ? '#FFFFFF' : '#000000';
        textColor = newTextColor; // Aktualizujeme globální proměnnou
        setTextColor(newTextColor); // Aplikujeme změnu na náhled karty

        // Synchronizujeme i input pro výběr barvy v kroku 9, aby byla hodnota připravená
        const customTextColorInput = document.getElementById('customTextColor');
        if (customTextColorInput) {
            customTextColorInput.value = newTextColor;
        }
      }
    }

    // Razítková – handlers
    function pickStampMode(mode, el) {
      // Odstraněna podpora pro 'preset' režim
      stampMode = (mode === 'standard' || mode === 'perStamp') ? mode : null;
      const next = getCurrentNextBtn();
      if (next) next.disabled = !stampMode;
      // Poznámka k preset režimu skryta/odstraněna
      const preNote = document.getElementById('stampPresetNote');
      if (preNote) preNote.style.display = 'none';
      const perNote = document.getElementById('stampPerNote');
      if (perNote) perNote.style.display = (stampMode === 'perStamp') ? 'block' : 'none';
      const pr = document.getElementById('stampModePresetBtn');
      const sb = document.getElementById('stampModeStandardBtn');
      const pb = document.getElementById('stampModePerBtn');
      if (pr) pr.classList.remove('selected');
      if (sb) sb.classList.toggle('selected', stampMode === 'standard');
      if (pb) pb.classList.toggle('selected', stampMode === 'perStamp');
    }

    function onStampTotalChange(input) {
      const v = parseInt(input && input.value, 10);
      const n = isNaN(v) ? stampTotal : Math.max(1, Math.min(20, v));
      stampTotal = n;
      try {
        const val = document.getElementById('stampVal');
        if (val) val.textContent = `${stampTotal} / ${stampTotal}`;
      } catch (_) {}
      // Only render strip if we're in razitkova mode
      if (cardType === 'razitkova') {
        renderStrip();
      }
    }

    function pickStampIcon(url, el) {
      try {
        if (stampCustomObjectUrl) { try { URL.revokeObjectURL(stampCustomObjectUrl); } catch(_) {} stampCustomObjectUrl = null; }
      } catch(_) {}
      stampIconUrl = url || defaultStampUrl;
      try {
        // Update selection for stamp-option elements
        const allOptions = document.querySelectorAll('.stamp-option');
        allOptions.forEach(opt => opt.removeAttribute('data-selected'));
        if (el && el.classList.contains('stamp-option')) {
          el.setAttribute('data-selected', 'true');
        }
      } catch(_) {}
      // Only render strip if we're in razitkova mode
      if (cardType === 'razitkova') {
        renderStrip();
      }
    }

    function onStampCustomIconChange(input) {
      try {
        const file = input && input.files && input.files[0];
        if (!file) return;
        if (stampCustomObjectUrl) { try { URL.revokeObjectURL(stampCustomObjectUrl); } catch(_) {} }
        const objUrl = URL.createObjectURL(file);
        stampCustomObjectUrl = objUrl;
        stampIconUrl = objUrl;
        try {
          // Update selection for custom upload
          const allOptions = document.querySelectorAll('.stamp-option');
          allOptions.forEach(opt => opt.removeAttribute('data-selected'));
          const customOption = input.closest('.stamp-option');
          if (customOption) customOption.setAttribute('data-selected', 'true');
        } catch(_) {}
        // Only render strip if we're in razitkova mode
        if (cardType === 'razitkova') {
          renderStrip();
        }
      } catch(_) {}
    }

    function onStampSizeChange(input) {
      const v = parseInt(input && input.value, 10);
      const size = isNaN(v) ? 100 : Math.max(1, v);
      stampSize = size;
      try {
        const label = document.getElementById('stampSizeVal');
        if (label) label.textContent = size + 'px';
      } catch(_) {}
      // Only render strip if we're in razitkova mode
      if (cardType === 'razitkova') {
        renderStrip();
      }
    }

    function onStampOpacityChange(input) {
      const v = parseInt(input && input.value, 10);
      const pct = isNaN(v) ? 100 : Math.max(0, Math.min(100, v));
      stampOpacity = pct / 100;
      try {
        const l = document.getElementById('stampOpacityVal');
        if (l) l.textContent = `${pct}%`;
      } catch(_) {}
      // Only render strip if we're in razitkova mode
      if (cardType === 'razitkova') {
        renderStrip();
      }
    }

    function onStampGapChange(input) {
      const v = parseInt(input && input.value, 10);
      stampGap = isNaN(v) ? 2 : Math.max(2, Math.min(30, v));
      // Only render strip if we're in razitkova mode
      if (cardType === 'razitkova') {
        renderStrip();
      }
    }

    // --- Stamp border handlers ---
    function pickStampBorderEnabled(enabled, el) {
      stampBorderEnabled = !!enabled;
      try {
        document.querySelectorAll('#step-7 .option').forEach(btn => btn.classList.remove('selected'));
        if (el) el.classList.add('selected');
      } catch(_) {}

      // Okamžitě přerenderujeme strip, aby se ohraničení skrylo/zobrazilo hned
      if (cardType === 'razitkova') {
        try {
          renderStrip();
        } catch (e) {
          console.warn('Chyba při renderStrip v pickStampBorderEnabled:', e);
        }
      }

      // Povolíme navigační tlačítko "Další"
      try {
        const next = getCurrentNextBtn();
        if (next) next.disabled = false;
      } catch(_) {}
    }

    function onStampBorderFileChange(input) {
      try {
        const file = input && input.files && input.files[0];
        if (!file) return;
        if (stampBorderCustomUrl) {
          try { URL.revokeObjectURL(stampBorderCustomUrl); } catch(_) {}
        }
        const objUrl = URL.createObjectURL(file);
        stampBorderCustomUrl = objUrl;
        if (cardType === 'razitkova') {
          renderStrip();
        }
      } catch(e) {
        console.error("Error handling custom border file:", e);
      }
    }

    function pickStampBorderShape(shape, el) {
      const allowed = ['circle', 'rounded', 'icon', 'square', 'custom', 'outline'];
      if (!allowed.includes(shape)) return;

      stampBorderShape = shape;
      const borderSettingsPanel = document.getElementById('stampBorderPanel');

      if (shape === 'custom') {
        if (borderSettingsPanel) borderSettingsPanel.style.display = 'none';
        document.getElementById('stampBorderFileInput').click();
      } else {
        if (borderSettingsPanel) borderSettingsPanel.style.display = 'block';
        
        if (shape === 'outline') {
            stampBorderSize = 2;
            stampBorderOpacity = 100;
            stampBorderOffset = -2;
            stampBorderColor = '#000000';
        } else if (shape === 'icon') {
          stampBorderSize = 1;
          stampBorderOpacity = 50;
          stampBorderOffset = 1;
          stampBorderColor = '#374151';
        } else { // Pro kruh, čtverec atd.
          stampBorderSize = 3;
          stampBorderOpacity = 100;
          stampBorderOffset = -3;
          stampBorderColor = '#374151';
        }

        try {
          document.getElementById('stampBorderSizeInput').value = stampBorderSize;
          document.getElementById('stampBorderOpacityInput').value = stampBorderOpacity;
          document.getElementById('stampBorderColorInput').value = stampBorderColor;
          document.getElementById('stampBorderOffsetInput').value = stampBorderOffset;
        } catch(_) {}
      }

      try {
        document.querySelectorAll('#step-7b #stampBorderPanel .options-row .option').forEach(btn => btn.classList.remove('selected'));
        if(el) el.classList.add('selected');
      } catch(_) {}

      // OCHRANA: Zajistíme, že navigace zůstane funkční i po renderStrip
      if (cardType === 'razitkova') { 
        try {
          renderStrip(); 
        } catch(e) {
          console.warn('Chyba při renderStrip v pickStampBorderShape:', e);
        }
        // Po renderStrip znovu zajistíme funkční navigaci
        setTimeout(() => {
          const next = getCurrentNextBtn();
          const back = getCurrentBackBtn();
          if (next) {
            next.disabled = false;
            next.style.pointerEvents = 'auto';
          }
          if (back) {
            back.disabled = false;
            back.style.pointerEvents = 'auto';
          }
        }, 100);
      }
    }

    function setStampPreviewMode(mode, el) {
      stampPreviewMode = mode; // 'partial', 'none', 'all'
      try {
        document.querySelectorAll('#step-7b .options-row .option').forEach(btn => btn.classList.remove('selected'));
        if (el) el.classList.add('selected');
      } catch (_) {}
      
      // OCHRANA: Zajistíme, že navigace zůstane funkční i po renderStrip
      if (cardType === 'razitkova') { 
        try {
          renderStrip(); 
        } catch(e) {
          console.warn('Chyba při renderStrip v setStampPreviewMode:', e);
        }
        // Po renderStrip znovu zajistíme funkční navigaci
        setTimeout(() => {
          const next = getCurrentNextBtn();
          const back = getCurrentBackBtn();
          if (next) {
            next.disabled = false;
            next.style.pointerEvents = 'auto';
          }
          if (back) {
            back.disabled = false;
            back.style.pointerEvents = 'auto';
          }
        }, 100);
      }
    }

    function onStampBorderSizeChange(input) {
      const v = parseInt(input && input.value, 10);
      stampBorderSize = isNaN(v) ? stampBorderSize : Math.max(1, Math.min(12, v));
      if (cardType === 'razitkova') { renderStrip(); }
    }

    function onStampBorderColorChange(input) {
      const v = input && input.value;
      if (typeof v === 'string' && v.trim()) {
        stampBorderColor = v.trim();
        if (cardType === 'razitkova') { renderStrip(); }
      }
    }

    function onStampBorderOpacityChange(input) {
      const v = parseInt(input && input.value, 10);
      const pct = isNaN(v) ? stampBorderOpacity : Math.max(0, Math.min(100, v));
      stampBorderOpacity = pct;
      if (cardType === 'razitkova') { renderStrip(); }
    }

    function onStampBorderOffsetChange(input) {
      const v = parseInt(input && input.value, 10);
      // allow negative (inside) and positive (outside) offsets
      stampBorderOffset = isNaN(v) ? 0 : Math.max(-20, Math.min(40, v));
      if (cardType === 'razitkova') { renderStrip(); }
    }

    // --- Per-stamp (custom for each) handlers ---
    function onPerStampTotalChange(input) {
      const v = parseInt(input && input.value, 10);
      const n = isNaN(v) ? perStampTotal : Math.max(1, Math.min(20, v));
      perStampTotal = n;
      // Ensure arrays cover 0..n
      if (perStripUrls.length < n + 1) perStripUrls.length = n + 1;
      if (perStripSelectedStep > n) perStripSelectedStep = n;
      buildPerStripUI();
      updatePerStripPreviewAndDownload();
    }

    function onPerStripUploadChange(index, input) {
      try {
        const file = input && input.files && input.files[0];
        if (!file) return;
        if (perStripUrls[index]) {
          try { URL.revokeObjectURL(perStripUrls[index]); } catch(_) {}
        }
        const url = URL.createObjectURL(file);
        perStripUrls[index] = url;

        // --- PŘIDANÁ LOGIKA ---
        // Nastavíme právě nahraný stav jako aktivní
        perStripSelectedStep = index;
        const sel = document.getElementById('perStripStepSelect');
        if (sel) sel.value = index;

        // Vždy aktualizujeme náhled
        updatePerStripPreviewAndDownload();
        // --- KONEC PŘIDANÉ LOGIKY ---

      } catch(_) {}
    }

    function onPerStripStepChange(sel) {
      const v = parseInt(sel && sel.value, 10);
      perStripSelectedStep = isNaN(v) ? 0 : Math.max(0, Math.min(perStampTotal, v));
      updatePerStripPreviewAndDownload();
    }

    function buildPerStripUI() {
      try {
        const sel = document.getElementById('perStripStepSelect');
        const grid = document.getElementById('perStripUploads');
        if (sel) {
          sel.innerHTML = '';
          for (let i = 0; i <= perStampTotal; i++) {
            const opt = document.createElement('option');
            opt.value = String(i);
            opt.textContent = 'Stav ' + i;
            sel.appendChild(opt);
          }
          sel.value = String(Math.max(0, Math.min(perStampTotal, perStripSelectedStep)));
        }
        if (grid) {
          let html = '';
          for (let i = 0; i <= perStampTotal; i++) {
            html += `
              <div style="display:flex; flex-direction:column; gap:6px;">
                <label style="font-size:13px; color:#374151; font-weight:600;">Stav ${i}</label>
                <input type="file" accept="image/*" onchange="onPerStripUploadChange(${i}, this)" style="padding:8px; border:1px solid #e5e7eb; border-radius:8px;">
              </div>`;
          }
          grid.innerHTML = html;
        }
      } catch(_) {}
    }

    function updatePerStripPreviewAndDownload() {
      try {
        const topPrev = document.getElementById('perStripTopPreview');
        const dl = document.getElementById('perStripDownloadBtn');
        const img = document.getElementById('stripResultImg');
        const cv = document.getElementById('stripCanvas');
        const fallback = (selectedStripUrl && selectedStripUrl.trim())
          ? selectedStripUrl
          : 'https://static.wixstatic.com/media/1cf87e_3ae4f6a9c66a44ef9aa950f489356001~mv2.png';
        const url = perStripUrls[perStripSelectedStep] || fallback;
        if (topPrev) topPrev.src = url;
        if (dl) {
          dl.href = url;
          // Prefer real download for local blob/data URLs; otherwise open in new tab
          const isLocal = url.startsWith('blob:') || url.startsWith('data:');
          if (isLocal) {
            dl.removeAttribute('target');
            dl.download = `strip_step_${perStripSelectedStep}.png`;
          } else {
            dl.removeAttribute('download');
            dl.setAttribute('target', '_blank');
            dl.setAttribute('rel', 'noopener');
          }
        }
        // In per-stamp mode, on step 4.5 follow the animated state; outside 4.5 freeze to max state
        if (img && (cardType === 'razitkova' && stampMode === 'perStamp')) {
          const hasArray = Array.isArray(perStripUrls) && perStripUrls.length > 0;
          const maxState = hasArray ? Math.max(0, perStripUrls.length - 1) : Math.max(0, perStampTotal);
          if (currentStep === 4.5) {
            img.src = url;
          } else {
            const frozenUrl = (hasArray ? perStripUrls[maxState] : null) || fallback;
            img.src = frozenUrl;
          }
          img.style.display = 'block';
          if (cv) cv.style.display = 'none';
        }
      } catch(_) {}
    }

    function onPerStripDownloadClick(e) {
      try { e.preventDefault(); e.stopPropagation(); } catch(_) {}
      const fallback = (selectedStripUrl && selectedStripUrl.trim())
        ? selectedStripUrl
        : 'https://static.wixstatic.com/media/1cf87e_3ae4f6a9c66a44ef9aa950f489356001~mv2.png';
      const url = perStripUrls[perStripSelectedStep] || fallback;
      // For blob/data URLs trigger real download without leaving the page
      if (url.startsWith('blob:') || url.startsWith('data:')) {
        const a = document.createElement('a');
        a.href = url;
        a.download = `strip_step_${perStripSelectedStep}.png`;
        document.body.appendChild(a);
        a.click();
        setTimeout(() => { try { document.body.removeChild(a); } catch(_) {} }, 0);
        return false;
      }
      // Cross-origin URLs: open in new tab so UI is not blocked
      try { window.open(url, '_blank', 'noopener,noreferrer'); } catch(_) {}
      return false;
    }

    // --- Razítková animation & manual controls ---
    function syncRazitkovaStateUI() {
      try {
        const sel = document.getElementById('razitkovaStateSelect');
        if (!sel) return;
        const maxState = (Array.isArray(perStripUrls) && perStripUrls.length > 0)
          ? Math.max(0, perStripUrls.length - 1)
          : Math.max(0, perStampTotal);
        // Rebuild options if counts mismatch
        if (sel.options.length !== (maxState + 1)) {
          sel.innerHTML = '';
          for (let i = 0; i <= maxState; i++) {
            const opt = document.createElement('option');
            opt.value = String(i);
            opt.textContent = 'Stav ' + i;
            sel.appendChild(opt);
          }
        }
        sel.value = String(Math.max(0, Math.min(maxState, perStripSelectedStep)));
      } catch(_) {}
    }

    function initRazitkovaStateUI() {
      razitkovaAnimPausedByUser = false;
      syncRazitkovaStateUI();
      try { updateRazitkovaAnimToggleLabel(); } catch(_) {}
    }

    function stopRazitkovaAnimation() {
      if (razitkovaAnimTimer) {
        try { clearInterval(razitkovaAnimTimer); } catch(_) {}
        razitkovaAnimTimer = null;
      }
      try { updateRazitkovaAnimToggleLabel(); } catch(_) {}
    }

    function startRazitkovaAnimation(opts) {
      stopRazitkovaAnimation();
      // Only animate for Razítková and when per-strip URLs available or perStampTotal defined
      if (cardType !== 'razitkova') { try { updateRazitkovaAnimToggleLabel(); } catch(_) {} return; }
      const total = (Array.isArray(perStripUrls) && perStripUrls.length > 0)
        ? Math.max(0, perStripUrls.length - 1)
        : Math.max(0, perStampTotal);
      if (total <= 0) { try { updateRazitkovaAnimToggleLabel(); } catch(_) {} return; }
      // Begin from the lowest state unless reset is disabled
      const reset = !opts || opts.reset !== false;
      if (reset) perStripSelectedStep = 0;
      updatePerStripPreviewAndDownload();
      syncRazitkovaStateUI();
      if (razitkovaAnimPausedByUser) { try { updateRazitkovaAnimToggleLabel(); } catch(_) {} return; }
      razitkovaAnimTimer = setInterval(() => {
        try {
          const max = (Array.isArray(perStripUrls) && perStripUrls.length > 0)
            ? Math.max(0, perStripUrls.length - 1)
            : Math.max(0, perStampTotal);
          if (max <= 0) return;
          perStripSelectedStep = (perStripSelectedStep + 1) % (max + 1);
          updatePerStripPreviewAndDownload();
          const sel = document.getElementById('razitkovaStateSelect');
          if (sel) sel.value = String(perStripSelectedStep);
        } catch(_) {}
      }, 1000);
      try { updateRazitkovaAnimToggleLabel(); } catch(_) {}
    }

    function onRazitkovaStateSelect(sel) {
      razitkovaAnimPausedByUser = true;
      stopRazitkovaAnimation();
      const v = parseInt(sel && sel.value, 10);
      const max = (Array.isArray(perStripUrls) && perStripUrls.length > 0)
        ? Math.max(0, perStripUrls.length - 1)
        : Math.max(0, perStampTotal);
      perStripSelectedStep = isNaN(v) ? 0 : Math.max(0, Math.min(max, v));
      updatePerStripPreviewAndDownload();
      syncRazitkovaStateUI();
      try { updateRazitkovaAnimToggleLabel(); } catch(_) {}
    }

    function razitkovaNextState() {
      razitkovaAnimPausedByUser = true;
      stopRazitkovaAnimation();
      const max = (Array.isArray(perStripUrls) && perStripUrls.length > 0)
        ? Math.max(0, perStripUrls.length - 1)
        : Math.max(0, perStampTotal);
      if (max <= 0) return;
      perStripSelectedStep = (perStripSelectedStep + 1) % (max + 1);
      updatePerStripPreviewAndDownload();
      syncRazitkovaStateUI();
      try { updateRazitkovaAnimToggleLabel(); } catch(_) {}
    }

    function razitkovaPrevState() {
      razitkovaAnimPausedByUser = true;
      stopRazitkovaAnimation();
      const max = (Array.isArray(perStripUrls) && perStripUrls.length > 0)
        ? Math.max(0, perStripUrls.length - 1)
        : Math.max(0, perStampTotal);
      if (max <= 0) return;
      perStripSelectedStep = (perStripSelectedStep - 1 + (max + 1)) % (max + 1);
      updatePerStripPreviewAndDownload();
      syncRazitkovaStateUI();
      try { updateRazitkovaAnimToggleLabel(); } catch(_) {}
    }

    function isRazitkovaAnimating() { return !!razitkovaAnimTimer; }

    function updateRazitkovaAnimToggleLabel() {
      try {
        const btn = document.getElementById('razitkovaAnimToggleBtn');
        if (!btn) return;
        btn.textContent = isRazitkovaAnimating() ? 'Zastavit animaci' : 'Spustit animaci';
      } catch(_) {}
    }

    function razitkovaToggleAnimation() {
      try {
        if (isRazitkovaAnimating()) {
          razitkovaAnimPausedByUser = true;
          stopRazitkovaAnimation();
        } else {
          razitkovaAnimPausedByUser = false;
          startRazitkovaAnimation({ reset: false });
        }
        updateRazitkovaAnimToggleLabel();
      } catch(_) {}
    }

    function pickPresetColor(color, el) {
      clearSelected();
      if (el) el.classList.add('selected');
      setCardColor(color);
      // User explicitly picked a color
      colorExplicitlyPicked = true;
      // reset custom picker to match chosen
      const cc = document.getElementById('customColor');
      try { if (cc) cc.value = toHex(color); } catch(e) {}
      const cc2 = document.getElementById('customColorLate');
      try { if (cc2) cc2.value = toHex(color); } catch(e) {}
      
      // Zastavení animace karet
      stopExampleSlideshow();
      document.getElementById('examplePreview').style.display = 'none';
      document.getElementById('fakeCard').style.display = 'block';
    }

    function pickCustomColor(color) {
      clearSelected();
      setCardColor(color);
      // User explicitly picked a color
      colorExplicitlyPicked = true;
      
      // Zastavení animace karet
      stopExampleSlideshow();
      document.getElementById('examplePreview').style.display = 'none';
      document.getElementById('fakeCard').style.display = 'block';
    }

    // Zachovat současnou barvu – neovlivnit textColor z presetů
    function chooseCurrentColor(sectionId, el) {
      try {
        const container = document.getElementById(sectionId);
        if (container) container.querySelectorAll('.swatch').forEach(s => s.classList.remove('selected'));
        if (el) el.classList.add('selected');
      } catch(_) {}
      // Zachovat textColor nastavenou presetem
      setCardColor(pickedColor, { skipAutoTextColor: true });
    }

    // Render a centered pictogram (SVG) indicating collapsed/expanded state
    function getCollapseIconHTML(expanded) {
      // Uses currentColor for strokes so parent style can set color
      if (expanded) {
        return (
          '<svg width="20" height="20" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="none">'
          + '<circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="1.25" fill="none" />'
          + '<path d="M8 13l4-4 4 4" stroke="currentColor" stroke-width="1.25" stroke-linecap="round" stroke-linejoin="round" />'
          + '</svg>'
        );
      }
      return (
        '<svg width="20" height="20" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="none">'
        + '<circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="1.25" fill="none" />'
        + '<path d="M8 11l4 4 4-4" stroke="currentColor" stroke-width="1.25" stroke-linecap="round" stroke-linejoin="round" />'
        + '</svg>'
      );
    }

    // Toggle visibility of the "Změnit barvu na" collapsible section in step 4.6
    function toggleChangeColor(cardType) {
      try {
        const cont = document.getElementById(`changeColorContainer-${cardType}`);
        const icon = document.getElementById(`changeColorToggleIcon-${cardType}`);
        if (!cont) return;
        const isHidden = (cont.style.display === 'none' || cont.style.display === '');
        cont.style.display = isHidden ? 'block' : 'none';
        if (icon) icon.innerHTML = getCollapseIconHTML(!isHidden);
      } catch (_) {}
    }

    // Ensure the collapsible starts in collapsed state when entering step 4.6
    function resetChangeColorCollapse(cardType) {
      try {
        const cont = document.getElementById(`changeColorContainer-${cardType}`);
        const icon = document.getElementById(`changeColorToggleIcon-${cardType}`);
        if (cont) cont.style.display = 'none';
        if (icon) icon.innerHTML = getCollapseIconHTML(false);
      } catch (_) {}
    }

    function pickTopMode(mode, el) {
      topMode = mode; // 'napis' | 'logo'
      document.querySelectorAll('#step-2 .option').forEach(o => o.classList.remove('selected'));
      if (el) el.classList.add('selected');
      // pokud jsme ve kroku 2, ihned zobrazit správné ovládací prvky a náhled + validovat
      if (currentStep === 2) {
        const napisWrap = document.getElementById('napisWrapper');
        const logoWrap = document.getElementById('logoWrapper');
        const next = getCurrentNextBtn();
        if (topMode === 'napis') {
          if (napisWrap) napisWrap.style.display = 'flex';
          if (logoWrap) logoWrap.style.display = 'none';
          const fSel = document.getElementById('napisFont');
          if (fSel) fSel.value = napisFont;
          const cInp = document.getElementById('napisColor');
          if (cInp) cInp.value = napisColor;
          updateNapisUI();
          renderLogoSlot();
          const first = (napisText || '').split('\n')[0].trim();
          if (next) next.disabled = (first.length === 0);
        } else {
          if (napisWrap) napisWrap.style.display = 'none';
          if (logoWrap) logoWrap.style.display = 'flex';
          // re-render slot so any previously typed text disappears when switching to logo
          renderLogoSlot();
          if (next) next.disabled = (logoUrl.trim().length === 0);
        }
        setTopModePreviewSrc();
      }
    }

    function pickCardType(type, el) {
      // Pokud byl aktivní preset a máme zálohu, před přepnutím typu obnovíme původní stav
      if (presetApplied && cardStateBeforePreset) {
        console.log('Switching card type while preset is active – restoring original state first.');
        Object.keys(cardStateBeforePreset).forEach(key => {
          window[key] = cardStateBeforePreset[key];
        });
        (async () => {
          await setCardColor(pickedColor, { skipAutoTextColor: true });
          await setTextColor(textColor);
          await renderLogoSlot();
          // Plná synchronizace UI po obnovení
          try { updateNapisUI(); setTopModePreviewSrc(); } catch (_) {}
          try { positionStrip(); setStripBackground(); renderStrip(); updateStripMiniUI(); } catch (_) {}
          // Sync vstupů s obnovenými hodnotami
          try { const si = document.getElementById('stripInput'); if (si) si.value = stripText; } catch(_) {}
          try { const ta = document.getElementById('napisTextarea'); if (ta) ta.value = napisText; } catch(_) {}
        })();
        presetApplied = false;
        cardStateBeforePreset = null;
      }
      // Odebrána automatická volba 'Předpřipravené' pro razítkovou kartu – uživatel zvolí režim ručně ve kroku 5

      cardType = type;

      document.querySelectorAll('#step-4 .type-card').forEach(b => b.classList.remove('selected'));
      if (el) el.classList.add('selected');
      const next = getCurrentNextBtn();
      if (next) next.disabled = false;
      applyCardType(type);
      if (type === 'razitkova') {
        setTimeout(() => {
          positionStrip();
          setStripBackground();
          renderStrip();
        }, 10);
      }
      updateTypeDescription(type);
      const panel = document.getElementById('typeDescPanel');
      if (panel) panel.style.display = 'block';
    }

    // --- Step 4: Dynamic type descriptions ---
    const COPY = {
      razitkova: {
        short: 'Zákazník sbírá razítka za každou návštěvu (1 střih = 1 razítko). Po nasbírání plného počtu dostane odměnu.',
        pros: [
          { main: 'Maximálně jednoduché', detail: '– každý zákazník hned chápe, jak se dostat k odměně.' },
          { main: 'Silná motivace dokončit', detail: '– lidé se vrátí, aby zaplnili poslední políčka.' }
        ],
        cons: [
          { main: 'Neodměňuje vyšší útratu', detail: '– za službu za 500 Kč i 1500 Kč je stále jen jedno razítko.' }
        ]
      },
      bodova: {
        short: 'Zákazník sbírá body podle toho, kolik utratí (např. 1 Kč = 1 bod). Body pak mění za služby nebo slevy.',
        pros: [
          { main: 'Odměňuje velké útraty', detail: '– motivuje zákazníky k nákupu dražších služeb a produktů.' },
          { main: 'Flexibilní odměny', detail: '– sami si určíte hodnotu služeb v bodech a chráníte si marži.' }
        ],
        cons: [
          { main: 'Oddálený cíl', detail: '- zákazník může využít body až po nasbírání určitého množství.' }
        ]
      },
      procentni: {
        short: 'Zákazník dostane okamžitě zpět část peněz z každé útraty (např. 5 %) jako kredit na další nákup.',
        pros: [
          { main: 'Nejatraktivnější pro zákazníka', detail: '– peníze zpět jsou jasné a silné lákadlo.' },
          { main: 'Podporuje okamžitý návrat', detail: '– motivuje k využití kreditu hned při další návštěvě.' }
        ],
        cons: [
          { main: 'Chybí snaha dosáhnout většího cíle.', detail: '' }
        ]
      },
      revolution: {
        short: 'Zákazník získává procenta z každé útraty (např. 10%), ale může je použít až po dosažení stanovené částky. Vidí svůj pokrok a našetřené peníze průběžně.',
        pros: [
          { main: 'Chrání vaši marži', detail: '– odměnu dáváte až po překročení určité hranice (například si můžete nastavit, že ji získá až nad 500 Kč).' },
          { main: 'Maximálně motivuje k větší útratě', detail: '– kombinuje hodnotu peněz (cashback) a jasný vizuální cíl (jako razítka). Tím si zákazníka skutečně "zaháčkujete".' },
          { main: 'Motivuje k častějšímu navštěvování', detail: '- zákazník má pocit, že má peníze na kartě, které by měl utratit.' },
          { main: 'Snižuje chuť přejít ke konkurenci', detail: '' }
        ],
        cons: []
      }
    };

    function updateTypeDescription(type) {
      const shortEl = document.getElementById('typeDescShort');
      const moreEl = document.getElementById('typeDescMore');
      const toggle = document.getElementById('typeDescToggle');
      if (!shortEl || !moreEl || !toggle) return;

      const data = COPY[type] || COPY['revolution'];

      shortEl.innerHTML = data.short;

      let moreHtml = '<ul class="pros-cons-list">';
      if (data.pros && data.pros.length > 0) {
        data.pros.forEach(item => {
          moreHtml += `<li class="pro"><span class="main-point">${item.main}</span> ${item.detail || ''}</li>`;
        });
      }
      if (data.cons && data.cons.length > 0) {
        data.cons.forEach(item => {
          moreHtml += `<li class="con"><span class="main-point">${item.main}</span> ${item.detail || ''}</li>`;
        });
      }
      moreHtml += '</ul>';

      moreEl.innerHTML = moreHtml;

      // Always show expanded
      moreEl.style.display = 'block';
      if (toggle) toggle.style.display = 'none'; // Hide the toggle button
    }

    function toggleTypeDesc() {
      const moreEl = document.getElementById('typeDescMore');
      const toggle = document.getElementById('typeDescToggle');
      if (!moreEl || !toggle) return;
      const isHidden = (moreEl.style.display === 'none' || moreEl.style.display === '');
      moreEl.style.display = isHidden ? 'block' : 'none';
      toggle.textContent = isHidden ? 'Méně informací' : 'Více informací';
    }

    function onNapisInput() {
      const ta = document.getElementById('napisTextarea');
      let v = (ta?.value || '').replace(/\r/g, '');
      // Omezení na 2 řádky
      const parts = v.split('\n');
      if (parts.length > 2) {
        v = parts.slice(0, 2).join('\n');
        if (ta) ta.value = v;
      }
      napisText = v;

      // Odložíme volání o 50ms, aby se stihl připravit layout a font
      setTimeout(renderLogoSlot, 50);

      setTopModePreviewSrc(); // Skryje placeholder obrázek
      const next = getCurrentNextBtn();
      const first = v.split('\n')[0].trim();
      if (next) next.disabled = (first.length === 0);
    }

    // Prevent more than one Enter (so there are at most 2 lines)
    function napisKeyDown(e) {
      try {
        if (e.key === 'Enter') {
          const ta = e.target;
          const value = (ta?.value || '').replace(/\r/g, '');
          if (value.includes('\n')) {
            e.preventDefault();
            return false;
          }
        }
      } catch (_) {}
    }

    function onNapisInput2() {
      const v = document.getElementById('napisInput2').value || '';
      napisText2 = v;
      renderLogoSlot();
      const next = getCurrentNextBtn();
      // pro dvojřádek stačí, aby 1. řádek nebyl prázdný
      if (next) next.disabled = (napisLayout === 'single') ? (napisText.trim().length === 0) : (napisText.trim().length === 0);
    }

    // Nastaví/vypne dočasný náhled v kroku 2 podle topMode
    function hideTopModePreview() {
      const img = document.getElementById('topModePreview');
      if (!img) return;
      img.style.display = 'none';
    }

    // Layout a zarovnání nápisu (krok 2)
    function pickNapisLayout(layout, el) {
      napisLayout = layout === 'double' ? 'double' : 'single';
      updateNapisUI();
      renderLogoSlot();
      const next = getCurrentNextBtn();
      if (next) next.disabled = (napisLayout === 'single') ? (napisText.trim().length === 0) : (napisText.trim().length === 0);
    }

    function updateNapisUI() {
      const ta = document.getElementById('napisTextarea');
      if (ta) ta.value = napisText || '';
      updateAlignUI();
    }

    function pickNapisAlign(align, el) {
      napisAlign = (align === 'center' || align === 'right') ? align : 'left';
      updateAlignUI();
      renderLogoSlot();
    }

    function updateAlignUI() {
      const left = document.getElementById('alignLeftBtn');
      const center = document.getElementById('alignCenterBtn');
      const right = document.getElementById('alignRightBtn');
      [left, center, right].forEach(b => b && b.classList.remove('selected'));
      if (napisAlign === 'left' && left) left.classList.add('selected');
      if (napisAlign === 'center' && center) center.classList.add('selected');
      if (napisAlign === 'right' && right) right.classList.add('selected');
    }

    function setTopModePreviewSrc() {
      const img = document.getElementById('topModePreview');
      if (!img) return;
      if (currentStep !== 2) { img.style.display = 'none'; return; }
      // Show sample only if there is no real input yet
      if (topMode === 'napis') {
        if (napisText && napisText.trim().length > 0) { img.style.display = 'none'; return; }
      } else if (topMode === 'logo') {
        if (logoUrl && logoUrl.trim().length > 0) { img.style.display = 'none'; return; }
      }
      const napisUrl = 'https://static.wixstatic.com/media/1cf87e_3461a98c2ad64e1e96caf24c3d6c0f32~mv2.png';
      const logoUrlSample = 'https://static.wixstatic.com/media/1cf87e_cba3a7fc225c4665a9be53443b3c9ee7~mv2.png';
      img.src = (topMode === 'napis') ? napisUrl : logoUrlSample;
      img.style.display = 'block';
    }

    function onNapisFontChange() {
      const sel = document.getElementById('napisFont');
      if (sel) {
        napisFont = sel.value || 'Arial';
        renderLogoSlot();
      }
    }

    // NAHRAĎTE PŪVODNÍ onNapisManualSizeChange TOUTO VERZÍ
    function onNapisManualSizeChange(input) {
        napisSizeMode = 'manual'; // Automaticky přepne na manuální režim
        const size = parseInt(input.value, 10);
        if (!isNaN(size) && size >= 8 && size <= 50) {
            napisManualSize = size;
            renderLogoSlot();
        }
        // Zobrazí tlačítko pro reset
        const resetBtn = document.getElementById('napisResetSizeBtn');
        if (resetBtn) resetBtn.style.display = 'inline-block';
    }

    // PŘIDEJTE TUTO NOVOU FUNKCI
    function resetNapisSizeToAuto() {
        napisSizeMode = 'auto';
        // Skryje tlačítko pro reset
        const resetBtn = document.getElementById('napisResetSizeBtn');
        if (resetBtn) resetBtn.style.display = 'none';
        
        // Znovu vykresli slot, který teď použije automatickou velikost
        renderLogoSlot();
    }

    function onNapisColorChange() {
      napisColorUserEdited = true; // Označení, že uživatel ručně změnil barvu
      const inp = document.getElementById('napisColor');
      if (inp) {
        napisColor = inp.value || '#ff0000';
        renderLogoSlot();
      }
    }

    // Toggle palette visibility for text color
    function toggleTextPalette() {
      const p = document.getElementById('textColorPalette');
      if (!p) return;
      p.style.display = (p.style.display === 'none' || p.style.display === '') ? 'block' : 'none';
    }

    // Ensure clicking the small color square opens the palette (not native picker)
    function openTextPaletteFromColor(e) {
      try { e.preventDefault(); e.stopPropagation(); } catch (_) {}
      const p = document.getElementById('textColorPalette');
      if (!p) return false;
      p.style.display = 'block';
      return false;
    }

    function clearTextSelected() {
      document.querySelectorAll('#textColorPalette .text-swatch').forEach(s => s.classList.remove('selected'));
    }

    function pickTextPresetColor(color, el) {
      napisColorUserEdited = true; // Označení, že uživatel ručně změnil barvu
      clearTextSelected();
      if (el) el.classList.add('selected');
      napisColor = color;
      // sync the tiny color input next to the button
      const c = document.getElementById('napisColor');
      try { if (c) c.value = toHex(color); } catch(e) {}
      // sync the custom input inside palette too
      const tc = document.getElementById('textCustomColor');
      try { if (tc) tc.value = toHex(color); } catch(e) {}
      renderLogoSlot();
      // auto-close palette after pick
      const p = document.getElementById('textColorPalette');
      if (p) p.style.display = 'none';
    }

    function pickTextCustomColor(color) {
      napisColorUserEdited = true; // Označení, že uživatel ručně změnil barvu
      clearTextSelected();
      napisColor = color;
      const c = document.getElementById('napisColor');
      if (c) c.value = color;
      renderLogoSlot();
      const p = document.getElementById('textColorPalette');
      if (p) p.style.display = 'none';
    }

    function onLogoUrlInput() {
      const v = document.getElementById('logoUrlInput').value || '';
      logoUrl = v;
      renderLogoSlot();
      setTopModePreviewSrc();
      const next = getCurrentNextBtn();
      if (next) next.disabled = v.trim().length === 0;
    }

    function onLogoFileChange(input) {
      try {
        const file = input && input.files && input.files[0];
        // revoke previous
        if (logoObjectUrl) { try { URL.revokeObjectURL(logoObjectUrl); } catch(_) {} logoObjectUrl = null; }
        if (!file) {
          logoUrl = '';
          renderLogoSlot();
          setTopModePreviewSrc();
          const next = getCurrentNextBtn();
          if (next) next.disabled = true;
          return;
        }
        const objUrl = URL.createObjectURL(file);
        logoObjectUrl = objUrl;
        logoUrl = objUrl;
        renderLogoSlot();
        setTopModePreviewSrc(); // hide sample overlay when real logo selected
        const next = getCurrentNextBtn();
        if (next) next.disabled = false;
      } catch (_) {}
    }

    // NAHRAĎTE CELOU PŪVODNÍ FUNKCI renderLogoSlot TOUTO VERZÍ
    async function renderLogoSlot() {
        const slot = document.getElementById('logoSlot');
        if (!slot) return;

        const fontSelect = document.getElementById('napisFont');
        const correctFontName = fontSelect ? fontSelect.value : 'tan-nimbus-2-webfont';

        try {
            await document.fonts.load(`1em '${correctFontName}'`);
        } catch (e) {
            console.error('Font se nepodařilo načíst:', e);
        }
        
        slot.innerHTML = '';
        
        if (topMode === 'napis' && (napisText || '').trim()) {
            const text = (napisText || '').replace(/\r/g, '');
            const parts = text.split('\n');
            const maxW = slot?.clientWidth || 120;
            
            const baseStyle = (el) => {
                el.style.fontFamily = correctFontName || 'Arial';
                el.style.color = napisColor || '#000000';
                el.style.lineHeight = 'normal';
                el.style.width = '100%';
                el.style.fontWeight = 'bold';
                el.style.margin = '0';
                el.style.padding = '0';
                el.style.overflow = 'hidden';
                el.style.whiteSpace = 'nowrap';
                el.style.textAlign = napisAlign;
            };
            
            if (parts.length === 1) {
                const el = document.createElement('div');
                baseStyle(el);
                el.textContent = parts[0];
                slot.appendChild(el);

                if (napisSizeMode === 'auto') {
                    autoSizeTextSingleLine(el, maxW, 45);
                } else {
                    el.style.fontSize = napisManualSize + 'px';
                    el.style.lineHeight = (napisManualSize * 1.2) + 'px';
                }
            } else {
                const wrap = document.createElement('div');
                baseStyle(wrap);
                wrap.style.display = 'flex';
                wrap.style.flexDirection = 'column';

                const l1 = document.createElement('div');
                const l2 = document.createElement('div');
                [l1, l2].forEach(el => baseStyle(el));
                
                l1.textContent = parts[0];
                l2.textContent = parts[1] || '';
                wrap.appendChild(l1);
                wrap.appendChild(l2);
                slot.appendChild(wrap);

                if (napisSizeMode === 'auto') {
                    autoSizeTwoLines(wrap, maxW, 56);
                } else {
                    wrap.querySelectorAll('div').forEach(lineEl => {
                        lineEl.style.fontSize = napisManualSize + 'px';
                        lineEl.style.lineHeight = (napisManualSize * 1.2) + 'px';
                    });
                }
            }
        } else if (topMode === 'logo' && logoUrl.trim()) {
            const img = document.createElement('img');
            img.className = 'logo-img';
            img.src = logoUrl.trim();
            img.alt = 'Logo';
            slot.appendChild(img);
        }
            
        try {
            positionStrip();
            setStripBackground();
            renderStrip();
        } catch (_) {}
    }

    // Autofit helpers for Wix-like behavior (no wrapping for single line)
    function autoSizeTextSingleLine(el, maxW, maxH) {
      try {
        let size = 24;
        el.style.fontSize = size + 'px';
        el.style.lineHeight = (size * 1.2) + 'px';
        el.style.whiteSpace = 'nowrap';
        for (let i = 0; i < 30; i++) {
          if (el.scrollWidth <= maxW && el.scrollHeight <= maxH) break;
          size -= 1;
          if (size < 8) break;
          el.style.fontSize = size + 'px';
          el.style.lineHeight = (size * 1.2) + 'px';
        }
      } catch (_) {}
    }

    function autoSizeTwoLines(wrap, maxW, maxH) {
      try {
        const lines = Array.from(wrap.children);
        let size = 18;
        lines.forEach(el => {
          el.style.fontSize = size + 'px';
          el.style.lineHeight = (size * 1.2) + 'px';
        });
        for (let i = 0; i < 30; i++) {
          const tooWide = lines.some(el => el.scrollWidth > maxW);
          const tooTall = wrap.scrollHeight > maxH;
          if (!tooWide && !tooTall) break;
          size -= 1;
          if (size < 8) break;
          lines.forEach(el => {
            el.style.fontSize = size + 'px';
            el.style.lineHeight = (size * 1.2) + 'px';
          });
        }
      } catch (_) {}
    }

    // Simple auto-size to make text fit within given box (width x height)
    function autoSizeText(el, maxW, maxH) {
      try {
        let size = 24; // starting font size
        el.style.whiteSpace = 'pre-wrap';
        el.style.wordBreak = 'break-word';
        el.style.fontSize = size + 'px';
        // ensure layout is updated before measuring
        const parent = el.parentElement;
        if (!parent) return;
        const maxWidth = Math.max(0, maxW);
        const maxHeight = Math.max(0, maxH);
        for (let i = 0; i < 30; i++) {
          // if fits, break; else decrease size
          if (el.scrollWidth <= maxWidth && el.scrollHeight <= maxHeight) break;
          size -= 1;
          if (size < 8) { size = 8; break; }
          el.style.fontSize = size + 'px';
        }
      } catch (_) {}
    }

    function pickShowCustomer(val, el) {
      showCustomer = !!val;
      document.querySelectorAll('#step-4 .option').forEach(o => o.classList.remove('selected'));
      if (el) el.classList.add('selected');
      const next = getCurrentNextBtn();
      if (next) next.disabled = false;
      renderCustomer();
    }

    function onCustomerNameInput() {
      const v = document.getElementById('customerNameInput').value || '';
      customerName = v;
      renderCustomer();
      const next = getCurrentNextBtn();
      if (next) next.disabled = v.trim().length === 0;
    }

    function renderCustomer() {
      const ci = document.getElementById('customerInfo');
      const cn = document.getElementById('custName');
      if (showCustomer) {
        ci.style.display = 'block';
        cn.textContent = customerName && customerName.trim() ? customerName.trim() : 'Jan Novák';
      } else {
        ci.style.display = 'none';
      }
    }

    function pickShowStrip(val, el) {
      showStrip = !!val;
      stripVisibilityUserEdited = true;
      try {
        const container = el && el.closest('.question-panel');
        const scope = container || document.getElementById('step-6') || document;
        scope.querySelectorAll('.option').forEach(o => o.classList.remove('selected'));
        if (el) el.classList.add('selected');
      } catch(_) {}
      const next = getCurrentNextBtn();
      if (next) next.disabled = false;
      positionStrip();
      setStripBackground();
      renderStrip();
    }

    function onStripTextInput() {
      const v = document.getElementById('stripInput').value || '';
      stripText = v;
      stripTextUserEdited = true;
      renderStrip();
      const next = getCurrentNextBtn();
      if (next) next.disabled = v.trim().length === 0;
    }

    // --- Mini controls for strip text (position, color, size) ---
    function updateStripMiniUI() {
      // Position buttons
      const posMap = {
        top: document.getElementById('posTopBtn'),
        center: document.getElementById('posCenterBtn'),
        bottom: document.getElementById('posBottomBtn')
      };
      Object.keys(posMap).forEach(k => {
        const b = posMap[k];
        if (b) b.classList.toggle('selected', stripTextPos === k);
      });
      // Size buttons
      const sizeButtons = (document.getElementById('stripSizeGroup') || {}).querySelectorAll ? document.getElementById('stripSizeGroup').querySelectorAll('.mini-btn') : [];
      sizeButtons && sizeButtons.forEach(btn => {
        const val = btn.textContent && btn.textContent.trim();
        btn.classList.toggle('selected', val === stripTextSize);
      });
      // Color input (sync both the tiny square and custom input in palette)
      const ci = document.getElementById('stripColor');
      if (ci && stripTextColor) {
        try { ci.value = toHex(stripTextColor); } catch(e) { ci.value = stripTextColor; }
      }
      const sc = document.getElementById('stripCustomColor');
      if (sc && stripTextColor) {
        try { sc.value = toHex(stripTextColor); } catch(e) { sc.value = stripTextColor; }
      }
    }

    function pickStripPos(pos, el) {
      stripTextPos = pos;
      updateStripMiniUI();
      renderStrip();
    }

    function pickStripSize(sz, el) {
      stripTextSize = sz;
      updateStripMiniUI();
      renderStrip();
    }

    function onStripFontChange() {
      const sel = document.getElementById('stripFont');
      if (sel) {
          stripTextFont = sel.value || 'Arial';
          renderStrip();
      }
    }

    function pickStripBorder(enabled, el) {
      stripTextBorder = !!enabled;
      // Zvýraznění aktivního tlačítka
      try {
        const group = document.getElementById('stripBorderGroup');
        group.querySelectorAll('.mini-btn').forEach(b => b.classList.remove('selected'));
        if (el) el.classList.add('selected');
      } catch(_) {}
      renderStrip();
    }

    function onStripBorderSizeChange(input) {
      const v = parseInt(input.value, 10);
      stripTextBorderSize = isNaN(v) ? 1 : Math.max(1, Math.min(5, v));
      renderStrip();
    }

    function onStripColorChange() {
      const ci = document.getElementById('stripColor');
      const val = ci && ci.value ? ci.value : '#000000';
      stripTextColor = val;
      renderStrip();
    }

    // --- Strip color palette handlers (mirror of step 2 text palette) ---
    function toggleStripPalette() {
      const p = document.getElementById('stripColorPalette');
      if (!p) return;
      p.style.display = (p.style.display === 'none' || p.style.display === '') ? 'block' : 'none';
    }

    function openStripPaletteFromColor(e) {
      try { e.preventDefault(); e.stopPropagation(); } catch (_) {}
      const p = document.getElementById('stripColorPalette');
      if (!p) return false;
      p.style.display = 'block';
      return false;
    }

    function clearStripSelected() {
      document.querySelectorAll('#stripColorPalette .strip-swatch').forEach(s => s.classList.remove('selected'));
    }

    function pickStripPresetColor(color, el) {
      clearStripSelected();
      if (el) el.classList.add('selected');
      stripTextColor = color;
      // sync mini square and custom input
      const sq = document.getElementById('stripColor');
      try { if (sq) sq.value = toHex(color); } catch(e) { if (sq) sq.value = color; }
      const cc = document.getElementById('stripCustomColor');
      try { if (cc) cc.value = toHex(color); } catch(e) { if (cc) cc.value = color; }
      renderStrip();
      const p = document.getElementById('stripColorPalette');
      if (p) p.style.display = 'none';
    }

    function pickStripCustomColor(color) {
      clearStripSelected();
      stripTextColor = color;
      const sq = document.getElementById('stripColor');
      if (sq) sq.value = color;
      renderStrip();
      const p = document.getElementById('stripColorPalette');
      if (p) p.style.display = 'none';
    }

    function renderStrip() {
      const st = document.getElementById('stripTextElem');
      const img = document.getElementById('stripResultImg');
      // Image (strip background) is always visible; toggle only the text overlay
      if (img) img.style.display = 'block';
      
      // Render stamps on canvas if we're in razitkova mode (matching WIX.txt logic)
      if (cardType === 'razitkova' && stampMode !== 'perStamp') {
        const stripUrl = img ? img.src : null;
        if (stripUrl) {
          renderStripOnCanvas(stripUrl);
        }
      } else {
        // Clear canvas when not in razitkova mode
        const cv = document.getElementById('stripCanvas');
        if (cv) {
          const ctx = cv.getContext('2d');
          ctx.clearRect(0, 0, cv.width, cv.height);
        }
      }
      
      if (!st) return;
      if (showStrip) {
        st.style.display = 'flex';
        st.textContent = stripText && stripText.trim() ? stripText.trim() : '';
        // Apply position
        if (stripTextPos === 'top') {
          st.style.alignItems = 'flex-start';
          st.style.padding = '6px 10px 0';
        } else if (stripTextPos === 'center') {
          st.style.alignItems = 'center';
          st.style.padding = '0 10px 0';
        } else { // bottom
          st.style.alignItems = 'flex-end';
          st.style.padding = '0 10px 6px';
        }
        // Apply color and size
        st.style.color = stripTextColor || '#000000';
        st.style.fontWeight = '700';
        const sizePx = (stripTextSize === 'XS') ? 12 : (stripTextSize === 'S') ? 14 : (stripTextSize === 'L') ? 22 : 18;
        st.style.fontSize = sizePx + 'px';

        // --- ZDE JE NOVÁ LOGIKA PRO FONT A OHRANIČENÍ ---
        st.style.fontFamily = stripTextFont;
        st.style.textShadow = 'none'; // Nejprve resetujeme

        if (stripTextBorder && stripTextBorderSize > 0) {
            const size = stripTextBorderSize;
            // Automaticky vybereme kontrastní barvu pro ohraničení
            const borderColor = isColorDark(stripTextColor) ? '#FFFFFF' : '#000000';
            st.style.textShadow = `-${size}px -${size}px 0 ${borderColor}, ${size}px -${size}px 0 ${borderColor}, -${size}px ${size}px 0 ${borderColor}, ${size}px ${size}px 0 ${borderColor}, -${size}px 0px 0 ${borderColor}, ${size}px 0px 0 ${borderColor}, 0px -${size}px 0 ${borderColor}, 0px ${size}px 0 ${borderColor}`;
        }
        // --- KONEC NOVÉ LOGIKY ---

      } else {
        st.style.display = 'none';
        st.textContent = '';
      }
    }

    // Dynamicky spočítá pozici a výšku pásu (stripu) mezi logem a spodní zónou (razítka/Ušetřil/Body)
    function positionStrip() {
      const img = document.getElementById('stripResultImg');
      const st  = document.getElementById('stripTextElem');
      const card = document.getElementById('fakeCard');
      const logo = document.getElementById('logoSlot');
      if (!img || !st || !card) return;

      // Spodní zóna začíná na 170px (viz CSS: top: 170px u razítek/Ušetřil/Body)
      const bottomAreaTop = 170;
      const gapTop = 6;    // mezera pod logem
      const gapBottom = 8; // mezera nad spodní zónou

      const topBase = logo ? (logo.offsetTop + logo.offsetHeight) : 61;
      let top = Math.round(topBase + gapTop);
      // Výška pásu musí přesně vyplnit prostor nad spodní zónou, nesmí ji překrývat
      const available = bottomAreaTop - top - gapBottom;
      // Keep the strip image at its natural aspect ratio (5:2 => 246/624)
      const desired = Math.round(card.clientWidth * (246 / 624));
      let h = Math.max(0, Math.min(available, desired));

      // Omezit výšku, aby nepřesahovala kartu
      const maxH = Math.max(20, card.clientHeight - top - 10);
      if (h > maxH) h = maxH;

      // Aplikovat styly
      img.style.top = top + 'px';
      img.style.height = h + 'px';
      st.style.top = top + 'px';
      st.style.height = h + 'px';
      // Use flex alignment in CSS; keep normal line-height
      st.style.lineHeight = 'normal';

      // Uložit výšku pro generování pozadí
      stripBandHeight = h;
      // Apply same geometry to canvas overlay
      const cv = document.getElementById('stripCanvas');
      if (cv) {
        cv.style.top = top + 'px';
        cv.style.height = h + 'px';
      }
      // strip background will be re-rendered after this via setStripBackground()
    }

    // Canvas helpers for strip composition (pattern + razítka)
    function loadImage(url) {
      return new Promise((resolve, reject) => {
        const im = new Image();
        im.onload = () => resolve(im);
        im.onerror = reject;
        im.src = url;
      });
    }

    async function renderStripOnCanvas(patternUrl) {
      if (stampBorderShape === 'custom' && stampBorderCustomUrl) {
        try {
          currentCustomBorderImg = await loadImage(stampBorderCustomUrl);
        } catch(e) {
          console.error("Failed to load custom border image:", e);
          currentCustomBorderImg = null;
        }
      } else {
        currentCustomBorderImg = null;
      }

      const card = document.getElementById('fakeCard');
      const cv = document.getElementById('stripCanvas');
      if (!cv || !card) return;
      const w = card.clientWidth;
      const h = stripBandHeight > 0 ? stripBandHeight : Math.round(w * (246/624));
      cv.width = w;
      cv.height = h;
      const ctx = cv.getContext('2d');
      ctx.clearRect(0, 0, w, h);

      if (cardType === 'razitkova') {
        try {
          const iconUrl = stampIconUrl || defaultStampUrl;
          const stampImg = await loadImage(iconUrl);
          currentStampImg = stampImg;
          
          try {
            const iconPrev = document.getElementById('borderShapeIconImg');
            if (iconPrev) iconPrev.src = iconUrl;
          } catch(_) {}
          
          const n = stampTotal;
          let stampsToDraw = n;
          let shouldDrawBorder = stampBorderEnabled && currentStep >= 7;

          if (currentStep === 7.5) {
            if (stampPreviewMode === 'none') stampsToDraw = 0;
            else if (stampPreviewMode === 'partial') stampsToDraw = Math.ceil(n / 2);
          }

          const totalRow1Count = Math.ceil(n / 2);
          const totalRow2Count = n - totalRow1Count;
          const actualSize = Math.max(1, stampSize);
          const gap = Math.max(2, stampGap);
          
          ctx.save();
          ctx.globalAlpha = Math.max(0, Math.min(1, stampOpacity));
          
          if (totalRow1Count > 0) {
            const row1W = totalRow1Count * actualSize + (totalRow1Count - 1) * gap;
            const row1StartX = Math.floor((w - row1W) / 2);
            const row1Y = Math.floor((h / 2) - (actualSize + gap / 2));
            for (let i = 0; i < totalRow1Count; i++) {
              const x = row1StartX + i * (actualSize + gap);
              if (shouldDrawBorder) {
                drawStampBorder(ctx, x, row1Y, actualSize);
              }
              const currentStampIndex = i;
              if (currentStampIndex < stampsToDraw) {
                ctx.drawImage(stampImg, x, row1Y, actualSize, actualSize);
              }
            }
          }
          
          if (totalRow2Count > 0) {
            const row2W = totalRow2Count * actualSize + (totalRow2Count - 1) * gap;
            const row2StartX = Math.floor((w - row2W) / 2);
            const row2Y = Math.floor((h / 2) + (gap / 2));
            for (let i = 0; i < totalRow2Count; i++) {
              const x = row2StartX + i * (actualSize + gap);
              if (shouldDrawBorder) {
                drawStampBorder(ctx, x, row2Y, actualSize);
              }
              const currentStampIndex = totalRow1Count + i;
              if (currentStampIndex < stampsToDraw) {
                ctx.drawImage(stampImg, x, row2Y, actualSize, actualSize);
              }
            }
          }
          ctx.restore();
          
        } catch (e) {
          console.error("Chyba při vykreslování razítek:", e);
        }
      }
    }

    // PŘIDEJTE TUTO NOVOU FUNKCI
    function updateTextColorSelectionUI() {
      const swatches = document.querySelectorAll('#step-2-5 .swatch');
      const customColorContainer = document.querySelector('#step-2-5 .custom-color');
      let presetFound = false;

      // Zrušíme všechny předchozí výběry
      swatches.forEach(s => s.classList.remove('selected'));
      if (customColorContainer) customColorContainer.classList.remove('selected');

      // Zkusíme najít shodu v předvolených barvách
      swatches.forEach(swatch => {
        try {
          const swatchColor = toHex(swatch.style.backgroundColor).toLowerCase();
          const targetColor = toHex(textColor).toLowerCase();
          if (swatchColor === targetColor) {
            swatch.classList.add('selected');
            presetFound = true;
          }
        } catch (e) { /* Ignorovat chyby při porovnávání */ }
      });

      // Pokud shoda není, označíme jako vybranou vlastní barvu
      if (!presetFound && customColorContainer) {
        customColorContainer.classList.add('selected');
      }
    }

    // NAHRAĎTE PŪVODNÍ FUNKCE TĚMITO DVĚMA
    function pickTextColor(color, el) {
      textColor = color;
      setTextColor(color);
      const cc = document.getElementById('customTextColor');
      try { cc.value = toHex(color); } catch(e) {}
      
      updateTextColorSelectionUI(); // Přidáno pro sjednocení UI

      const next = getCurrentNextBtn();
      if (next) next.disabled = false;
    }

    function pickCustomTextColor(color) {
      textColor = color;
      document.querySelectorAll('#step-8 .swatch').forEach(s => s.classList.remove('selected'));
      setTextColor(color);
      const next = getCurrentNextBtn();
      if (next) next.disabled = false;
    }

    function setTextColor(color) {
      // applies to elements using var(--discountColor)
      const card = document.getElementById('fakeCard');
      if (card) card.style.setProperty('--discountColor', color);
    }

    function toHex(c) {
      // accepts #RRGGBB or rgb(a) strings, returns #RRGGBB (best effort)
      if (c.startsWith('#') && (c.length === 7 || c.length === 4)) return c.length === 7 ? c : shortToFullHex(c);
      if (c.startsWith('rgb')) {
        const m = c.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/i);
        if (m) {
          const [r,g,b] = m.slice(1,4).map(n => Number(n));
          return '#' + [r,g,b].map(v => v.toString(16).padStart(2,'0')).join('');
        }
      }
      return '#ffffff';
    }
    function shortToFullHex(s) {
      // #abc -> #aabbcc
      return '#' + s.slice(1).split('').map(ch => ch + ch).join('');
    }

function nextStepNum() {
    switch (currentStep) {
        case 1: return 4;
        case 4:
            // Bodová/Procentní: pokud uživatel na začátku výslovně nevybral barvu,
            // vložíme mezi kroky 4 a 2 dodatečný krok 4.2 pro výběr barvy.
            if (cardType === 'bodova' || cardType === 'procentni') {
                return (!colorExplicitlyPicked) ? 4.2 : 2;
            }
            // Ostatní typy jdou přes krok 4.5 (výběr předpřipraveného designu / vlastní návrh)
            return 4.5;
        case 4.2:
            // Po dodatečném výběru barvy pokračujeme na krok 2
            return 2;
        case 4.5:
            if (cardType === 'revolution' || cardType === 'razitkova') {
                return 4.6;
            }
            return 2;
        case 4.6: return 2;
        case 2: return 2.5;
        case 2.5:
            // Revolution: výběr stripu odkládáme až po kroku 5.6 (pokud zvolí Statická grafika)
            if (cardType === 'revolution') {
                return 5.5; // pokračujeme na Revolution nastavení úrovní
            }
            // Razítková: strip vybereme až PO kroku 5 (po volbě režimu)
            if (cardType === 'razitkova') {
                // Pokud je aktivní preset, přeskočíme krok 5 ("Razítka – vyberte způsob")
                // a navíc přeskočíme i výběr vzhledu stripu (krok 3) -> rovnou na Shrnutí (10)
                return (presetApplied ? 10 : 5);
            }
            // Ostatní typy: standardně bychom šli na krok 3 ("Vyberte vzhled stripu"),
            // pokud je ale aktivní preset, krok 3 vynecháme a pokračujeme na nastavení typu karty (krok 5)
            return (presetApplied ? 5 : 3);
        case 3:
            if (cardType === 'revolution') {
                // Po výběru stripu u Revolution již text neřešíme
                return 10;
            }
            if (cardType === 'razitkova') {
                // Po výběru stripu u Razítkové pokračujeme na nastavení razítek
                return 6;
            }
            return 5;
        case 5:
            // Razítková: Standardní -> nejdříve výběr vzhledu stripu (3), poté 6; Vlastní pro každé -> přímo na 6
            if (cardType === 'razitkova') {
                return (stampMode === 'standard') ? 3 : 6;
            }
            // U ostatních typů po kroku 5 již text na stripu nenabízíme
            return 10;
        case 5.5:
            // POKUD byl aplikován preset, přeskočíme krok 5.6 (Vizuální progres)
            if (presetApplied) {
                // A zároveň přeskočíme i "Zobrazovat text na stripu?" a "Text na stripu"
                return 10; // Jdeme rovnou na Shrnutí
            }
            return 5.6; // Jinak pokračujeme na nastavení Vizuálního progresu
        case 5.6:
            // Revolution: pokud zvolí Statická grafika, vložíme dodatečně krok 3 (výběr stripu)
            if (cardType === 'revolution' && !revolutionShowProgress) {
                return 3;
            }
            // Po 5.6 již dotaz na text neřešíme
            return 10;
        case 6:
            // Krok 6 nyní slouží pouze pro detailní nastavení razítek u Razítkové karty
            if (cardType === 'razitkova') {
                return 7;
            }
            return 10;
        case 7:
            // Pokud u Razítkové nezobrazujeme ohraničení, krok 7.5 (Vzhled ohraničení) přeskočíme
            if (cardType === 'razitkova' && stampBorderEnabled === false) {
                return 10;
            }
            return 7.5;
        case 7.5:
            // Po vzhledu ohraničení již text na stripu neřešíme
            return 10;
        default: return 10;
    }
}

function prevStepNum() {
  if (stepHistory.length > 0) {
    return stepHistory.pop();
  }
  // Fallback, pokud by historie byla prázdná
  switch (currentStep) {
    case 4: return 1;
    case 4.2: return 4;
    case 4.5: return 4;
    case 2:
      // Revolution a Razítková: vracíme se nejprve na 4.6 (nový krok zachování barvy)
      if (cardType === 'revolution' || cardType === 'razitkova') {
        return 4.6;
      }
      // Bodová a Procentní: vracíme se přímo na krok 4 (výběr typu karty)
      if (cardType === 'bodova' || cardType === 'procentni') {
        return 4;
      }
      // Ostatní typy: vracíme se na 4.5 (volba preset/vlastní)
      return 4.5;
    case 4.6: return 4.5;
    case 2.5: return 2;
    case 3: return 2.5;
    case 5: return 3;
    case 5.5: return 3;
    case 7.5: return 7;
    case 7: return 6;
    case 6:
      // Pokud jsme v Razítkové: návrat podle zvoleného režimu razítek
      if (cardType === 'razitkova') {
        return (stampMode === 'standard') ? 3 : 5;
      }
      // Ostatní typy by se do 6 neměly dostat, vraťme se bezpečně na 5
      return 5;
    default: return 1;
  }
}

    function goNext() {
      // validation per step
      if (currentStep === 1 && !pickedColor) return;
      if (currentStep === 2) {
        if (!topMode) return;
        if (topMode === 'napis' && !napisText.trim()) return;
        if (topMode === 'logo' && !logoUrl.trim()) return;
      }
      if (currentStep === 4 && !cardType) return;
      // Bodová: validace kroku 5
      if (currentStep === 5 && cardType === 'bodova') {
        if (!isBodovaValid()) return;
      }
      // Procentní: validace kroku 5
      if (currentStep === 5 && cardType === 'procentni') {
        if (!procentniLevels || procentniLevels.length === 0) return;
        // Kontrola, že všechny úrovně mají vyplněné názvy a slevy
        for (let level of procentniLevels) {
          if (!level.name || level.name.trim() === '' || level.discount == null || level.discount < 0) return;
        }
      }

      // Revolution: validace kroku 5.6
      if (currentStep === 5.6) {
        if (revolutionShowProgress == null) return;
        // Pokud je zapnutý progres a custom režim, kontrolujeme povinná pole
        if (revolutionShowProgress && revolutionGfxMode === 'custom') {
          if (!revolutionBonusMin || revolutionBonusMin <= 0) return;
          if (!revolutionMilestones || revolutionMilestones <= 1) return;
        }
      }
    
    stepHistory.push(currentStep); // PŘIDANÝ ŘÁDEK
      showStep(nextStepNum());
    }

    function goBack() {
        // ZJISTÍME, ZDA ODCHÁZÍME Z KROKU VÝBĚRU PRESETU
        const isReturningFromPresetStep = (currentStep === 4.5);

        // POKUD ODCHÁZÍME A MÁME ZÁLOHU, OBNOVÍME JI
        if (isReturningFromPresetStep && cardStateBeforePreset) {
            console.log('Obnovuji původní stav karty (přes tlačítko Zpět).');
            
            // Obnovíme všechny hodnoty ze zálohy
            Object.keys(cardStateBeforePreset).forEach(key => {
                window[key] = cardStateBeforePreset[key];
            });

            // Vynutíme překreslení karty do původního stavu
            (async () => {
                const snap = JSON.parse(JSON.stringify(cardStateBeforePreset));
                await setCardColor(pickedColor, { skipAutoTextColor: true });
                await setTextColor(textColor);
                await applyCardType(cardType);
                // Po applyCardType znovu nastavíme strip hodnoty ze zálohy, aby se nepřepsaly defaulty
                try {
                  if (snap) {
                    showStrip = snap.showStrip;
                    stripText = snap.stripText;
                    stripTextPos = snap.stripTextPos;
                    stripTextSize = snap.stripTextSize;
                    stripTextColor = snap.stripTextColor;
                    stripTextUserEdited = snap.stripTextUserEdited;
                    selectedStripUrl = snap.selectedStripUrl;
                    customStripObjectUrl = snap.customStripObjectUrl;
                  }
                } catch(_) {}
                // Re-render Revolution úrovní a obnovíme náhled podle zálohy (kvůli barvám úrovní)
                try { if (snap && snap.cardType === 'revolution') { renderRevolutionLevels(); setRevolutionPreview(snap.revolutionPreviewIndex || 0); } } catch(_) {}
                await renderLogoSlot();
                // Plná synchronizace UI po obnovení (náhled nápisu + strip)
                try { updateNapisUI(); setTopModePreviewSrc(); } catch (_) {}
                try { positionStrip(); setStripBackground(); renderStrip(); updateStripMiniUI(); } catch (_) {}
                // Sync vstupů s obnovenými hodnotami
                try { const si = document.getElementById('stripInput'); if (si) si.value = stripText; } catch(_) {}
                try { const ta = document.getElementById('napisTextarea'); if (ta) ta.value = napisText; } catch(_) {}
            })();

            // Resetujeme příznaky a smažeme zálohu
            presetApplied = false;
            cardStateBeforePreset = null;
        }

        // Původní logika pro navigaci zpět
        if (stepHistory.length > 0) {
            const lastStep = stepHistory.pop();
            showStep(lastStep);
        } else {
            showStep(1); // Fallback
        }
    }

    function finishWizard() {
      alert('Hotovo! Výběry byly použity na náhledu karty.');
    }

    // utilities
    function escapeHtml(str) {
      return str.replace(/[&<>"']/g, function(m) {
        return ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[m]);
      });
    }

    // Vytvoří náhledový obrázek loga pro Shrnutí:
    // - pokud je nápis, vykreslí text na canvas a vrátí data URL
    // - pokud je nahrané logo, vrátí přímo jeho URL
    // - jinak vrátí prázdný řetězec
    function getLogoSummaryImageUrl() {
      try {
        if (topMode === 'logo' && logoUrl && logoUrl.trim()) {
          return logoUrl.trim();
        }
        if (topMode === 'napis' && napisText && napisText.trim()) {
          const text = (napisText || '').replace(/\r/g, '');
          const parts = text.split('\n');
          const W = 300;
          const H = 120;
          const canvas = document.createElement('canvas');
          canvas.width = W;
          canvas.height = H;
          const ctx = canvas.getContext('2d');
          // transparent background
          ctx.clearRect(0, 0, W, H);
          const fontSelect = document.getElementById('napisFont');
          const fontName = fontSelect ? fontSelect.value : (typeof napisFont === 'string' ? napisFont : 'Arial');
          let size = (napisSizeMode === 'auto') ? 28 : (parseInt(napisManualSize, 10) || 16);
          const maxW = W - 24; // padding
          const lines = parts.length > 1 ? [parts[0], parts[1]] : [parts[0]];
          const lineGap = 6;
          const align = (napisAlign === 'center') ? 'center' : (napisAlign === 'right') ? 'right' : 'left';
          ctx.textAlign = align;
          ctx.textBaseline = 'top';

          // Fit font size so that the longest line fits width and total height fits box
          if (napisSizeMode === 'auto') {
            for (let i = 0; i < 30; i++) {
              ctx.font = `bold ${size}px ${fontName}`;
              const heights = lines.length * (size * 1.2) + (lines.length > 1 ? lineGap : 0);
              const tooTall = heights > (H - 16);
              const tooWide = lines.some(t => ctx.measureText(t || '').width > maxW);
              if (!tooTall && !tooWide) break;
              size -= 1; if (size < 8) { size = 8; break; }
            }
          } else {
            ctx.font = `bold ${size}px ${fontName}`;
          }

          ctx.fillStyle = napisColor || '#000000';
          const totalHeight = lines.length * (size * 1.2) + (lines.length > 1 ? lineGap : 0);
          const startY = Math.max(4, Math.round((H - totalHeight) / 2));
          const x = align === 'center' ? Math.round(W/2) : (align === 'right' ? (W - 12) : 12);
          lines.forEach((t, idx) => {
            const y = startY + idx * (size * 1.2 + (idx === 0 ? 0 : 0)) + (idx === 1 ? lineGap : 0);
            ctx.fillText(t || '', x, y);
          });
          return canvas.toDataURL('image/png');
        }
      } catch(_) {}
      return '';
    }
    
    // Advanced data: build complete snapshot of current configuration
    function buildAdvancedDataSnapshot() {
      try {
        const snapshot = {
          core: {
            cardType: cardType || '',
            designChoice: designChoice || '',
            pickedColor: pickedColor || null,
            textColor: textColor || '#000000'
          },
          top: {
            topMode: topMode || null,
            napisText: (typeof napisText === 'string' ? napisText : ''),
            napisFont: napisFont || '',
            napisColor: napisColor || '#000000',
            napisColorUserEdited: !!napisColorUserEdited,
            napisAlign: napisAlign || 'left',
            napisSizeMode: napisSizeMode || 'auto',
            napisManualSize: typeof napisManualSize === 'number' ? napisManualSize : parseInt(napisManualSize,10) || 16,
            logoUrl: logoUrl || ''
          },
          strip: {
            showStrip: !!showStrip,
            selectedStripUrl: selectedStripUrl || '',
            customStripObjectUrl: customStripObjectUrl || null,
            revolutionShowProgress: !!revolutionShowProgress,
            revolutionGfxMode: revolutionGfxMode || null,
            revolutionGfxUrls: Array.isArray(revolutionGfxUrls) ? [...revolutionGfxUrls] : [],
            revolutionGfxSelectedStep: typeof revolutionGfxSelectedStep === 'number' ? revolutionGfxSelectedStep : 0,
            perStripUrls: Array.isArray(perStripUrls) ? [...perStripUrls] : [],
            perStripSelectedStep: typeof perStripSelectedStep === 'number' ? perStripSelectedStep : 0
          },
          revolution: {
            revolutionMode: revolutionMode || null,
            revolutionLevels: Array.isArray(revolutionLevels) ? JSON.parse(JSON.stringify(revolutionLevels)) : [],
            revolutionPreviewIndex: typeof revolutionPreviewIndex === 'number' ? revolutionPreviewIndex : 0,
            revolutionBonusMin: typeof revolutionBonusMin === 'number' ? revolutionBonusMin : 0,
            revolutionMilestones: typeof revolutionMilestones === 'number' ? revolutionMilestones : 0
          },
          razitkova: {
            stampMode: stampMode || null,
            stampTotal: typeof stampTotal === 'number' ? stampTotal : 0,
            stampOpacity: typeof stampOpacity === 'number' ? stampOpacity : 1,
            stampSize: typeof stampSize === 'number' ? stampSize : 0,
            stampGap: typeof stampGap === 'number' ? stampGap : 0,
            stampIconUrl: stampIconUrl || '',
            stampCustomObjectUrl: stampCustomObjectUrl || null,
            stampBorderEnabled: !!stampBorderEnabled,
            stampBorderSize: typeof stampBorderSize === 'number' ? stampBorderSize : 0,
            stampBorderOffset: typeof stampBorderOffset === 'number' ? stampBorderOffset : 0,
            stampBorderOpacity: typeof stampBorderOpacity === 'number' ? stampBorderOpacity : 0,
            stampBorderColor: stampBorderColor || '#000000',
            stampBorderShape: stampBorderShape || '',
            stampPreviewMode: stampPreviewMode || '',
            stampBorderCustomUrl: stampBorderCustomUrl || null,
            perStampTotal: typeof perStampTotal === 'number' ? perStampTotal : 0
          },
          bodova: {
            bodRate: typeof bodRate === 'number' ? bodRate : 0,
            bodPoints: typeof bodPoints === 'number' ? bodPoints : 0,
            bodTopMessage: bodTopMessage || '',
            bodBottomMessage: bodBottomMessage || '',
            bodTopUserEdited: !!bodTopUserEdited,
            bodBottomUserEdited: !!bodBottomUserEdited
          },
          procentni: {
            procentniLevels: Array.isArray(procentniLevels) ? JSON.parse(JSON.stringify(procentniLevels)) : []
          },
          preset: {
            presetApplied: !!presetApplied
          }
        };
        return snapshot;
      } catch (e) {
        try { console.warn('buildAdvancedDataSnapshot failed', e); } catch(_) {}
        return {};
      }
    }

    function toggleAdvancedData() {
      try {
        const panel = document.getElementById('advancedDataPanel');
        const btn = document.getElementById('toggleAdvancedBtn');
        const pre = document.getElementById('advancedDataPre');
        if (!panel || !btn || !pre) return;
        if (panel.style.display === 'none' || panel.style.display === '') {
          // Opening: rebuild snapshot
          pre.textContent = JSON.stringify(buildAdvancedDataSnapshot(), null, 2);
          panel.style.display = 'block';
          btn.textContent = 'Skrýt pokročilá data';
        } else {
          panel.style.display = 'none';
          btn.textContent = 'Zobrazit pokročilá data';
        }
      } catch(_) {}
    }

    function copyAdvancedDataToClipboard() {
      try {
        const pre = document.getElementById('advancedDataPre');
        const text = pre ? pre.textContent : '';
        if (!text) return;
        if (navigator.clipboard && navigator.clipboard.writeText) {
          navigator.clipboard.writeText(text).catch(() => {
            // Fallback
            const ta = document.createElement('textarea');
            ta.value = text; document.body.appendChild(ta); ta.select(); document.execCommand('copy'); document.body.removeChild(ta);
          });
        } else {
          const ta = document.createElement('textarea');
          ta.value = text; document.body.appendChild(ta); ta.select(); document.execCommand('copy'); document.body.removeChild(ta);
        }
      } catch(_) {}
    }

    function downloadAdvancedData() {
      try {
        const json = JSON.stringify(buildAdvancedDataSnapshot(), null, 2);
        const blob = new Blob([json], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'vernostni-karta.json';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      } catch(_) {}
    }

    // Intro preview slideshow
    function startExampleSlideshow() {
      const img = document.getElementById('examplePreview');
      if (!img) return;
      if (previewTimer) { clearInterval(previewTimer); previewTimer = null; }
      previewIndex = 0;
      img.src = previewUrls[previewIndex];
      previewTimer = setInterval(() => {
        previewIndex = (previewIndex + 1) % previewUrls.length;
        img.src = previewUrls[previewIndex];
      }, 1700);
    }

    function stopExampleSlideshow() {
      if (previewTimer) { clearInterval(previewTimer); previewTimer = null; }
    }
    
    // Nová proměnná pro sledování stavu wizardů
    let wizardStarted = false; // Sledujeme, zda proces již začal

    function startIntro() {
        // Zobrazí se úvodí animace karet
        document.getElementById('examplePreview').style.display = 'block';
        document.getElementById('fakeCard').style.display = 'none';
        startExampleSlideshow();
        
        // Nastavíme, že průvodce již běží
        wizardStarted = true;
        
        // Zobrazíme první krok (výběr barvy)
        showStep(1);
    }

    // Global scaling: auto-fit to viewport width, with optional manual override via ?scale=0.8
    function getManualScaleFromQuery() {
      try {
        const params = new URLSearchParams(location.search);
        const s = params.get('scale');
        if (!s) return null;
        const f = parseFloat(s);
        if (isFinite(f) && f > 0) return Math.max(0.3, Math.min(2, f));
      } catch (_) {}
      return null;
    }

    function applyScale(s) {
      document.documentElement.style.setProperty('--ui-scale', String(s));
      const inp = document.getElementById('scaleInput');
      if (inp && document.activeElement !== inp) {
        try { inp.value = Number(s).toFixed(2); } catch(_) {}
      }
    }

    function autoScale() {
      if (manualScale !== null) { applyScale(manualScale); return; }
      const manual = getManualScaleFromQuery();
      if (manual) { applyScale(manual); return; }
      const base = 340; // base width of builder
      const horizontalPadding = 32; // body padding: 16 left + 16 right
      const avail = Math.max(0, Math.min(window.innerWidth, document.documentElement.clientWidth) - horizontalPadding);
      const s = Math.min(1, Math.max(0.5, avail / base));
      applyScale(s);
    }

    window.addEventListener('resize', autoScale);
    window.addEventListener('orientationchange', autoScale);

    // init
    (function initScale() {
      const qp = getManualScaleFromQuery();
      if (qp !== null) { manualScale = qp; applyScale(manualScale); }
      else { autoScale(); }
      const si = document.getElementById('scaleInput');
      if (si) {
        const handle = (e) => {
          const val = parseFloat(e.target.value);
          if (isFinite(val)) {
            manualScale = Math.max(0.3, Math.min(2, val));
            applyScale(manualScale);
          }
        };
        si.addEventListener('input', handle);
        si.addEventListener('change', handle);
      }
    })();
    startIntro();

function applyCardType(type) {
    cardType = type;
    
    const allDisplays = [
        document.getElementById('discountLevelDisplay'),
        document.getElementById('savedAmountDisplay'),
        document.getElementById('stampCounterDisplay'),
        document.getElementById('bodyLevelDisplay'),
        document.getElementById('bodyBottomDisplay')
    ];
    allDisplays.forEach(el => { if (el) el.style.display = 'none'; });

    let defaultStripText = 'Zde může být váš text';
    
    if (type === 'procentni') {
        document.getElementById('discountLevelDisplay').style.display = 'block';
        document.getElementById('savedAmountDisplay').style.display = 'block';
        document.querySelector('#savedAmountDisplay .saved-label').textContent = 'Ušetřil';
        document.getElementById('savedVal').textContent = '0 Kč'; // Výchozí hodnota
        updateProcentniPreview();
    } else if (type === 'revolution') {
        document.getElementById('discountLevelDisplay').style.display = 'block';
        document.getElementById('savedAmountDisplay').style.display = 'block';
        document.querySelector('#savedAmountDisplay .saved-label').textContent = 'NASPOŘENO';
        document.getElementById('savedVal').textContent = '378 Kč'; // Ukázková hodnota jen zde
        updateFakeCardRevolutionLevel();
        defaultStripText = 'Naspořené peníze lze uplatnit nad ...';
    } else if (type === 'razitkova') {
        document.getElementById('stampCounterDisplay').style.display = 'block';
        document.getElementById('stampVal').textContent = `0 / ${stampTotal}`; // Výchozí hodnota
    } else if (type === 'bodova') {
        document.getElementById('bodyLevelDisplay').style.display = 'block';
        document.getElementById('bodyBottomDisplay').style.display = 'block';
        document.getElementById('bodyVal').textContent = '0'; // Výchozí hodnota
    }

    if (!stripTextUserEdited) {
        stripText = defaultStripText;
        const si = document.getElementById('stripInput');
        if (si) si.value = stripText;
    }

    positionStrip();
    setStripBackground();
    renderStrip();
}

    // --- Bodová – handlers & helpers ---
    function isBodovaValid() {
      const pointsOk = Number.isFinite(Number(bodPoints)) && Number(bodPoints) > 0;
      const rateOk = Number.isFinite(Number(bodRate)) && Number(bodRate) > 0;
      const topOk = (bodTopMessage || '').trim().length > 0;
      const botOk = (bodBottomMessage || '').trim().length > 0;
      return pointsOk && rateOk && topOk && botOk;
    }

    function updateBodovaNextEnabled() {
      const next = getCurrentNextBtn();
      if (next) next.disabled = !isBodovaValid();
    }

    function onBodPointsChange(input) {
      const v = parseInt(input && input.value, 10);
      bodPoints = isNaN(v) ? bodPoints : Math.max(1, v);
      if (!bodBottomUserEdited) {
        bodBottomMessage = `${bodRate}Kč=${bodPoints}BOD`;
        try { const bi = document.getElementById('bodBottomTextInput'); if (bi) bi.value = bodBottomMessage; } catch(_) {}
      }
      updateBodovaPreview();
      updateBodovaNextEnabled();
    }

    function onBodRateChange(input) {
      const v = parseInt(input && input.value, 10);
      bodRate = isNaN(v) ? bodRate : Math.max(1, v);
      // Pokud uživatel neupravil spodní řádek ručně, přepiš ho dle kurzu
      if (!bodBottomUserEdited) {
        bodBottomMessage = `${bodRate}Kč=${bodPoints}BOD`;
        try { const bi = document.getElementById('bodBottomTextInput'); if (bi) bi.value = bodBottomMessage; } catch(_) {}
      }
      updateBodovaPreview();
      updateBodovaNextEnabled();
    }

    function onBodTopTextInput() {
      try {
        const ti = document.getElementById('bodTopTextInput');
        bodTopMessage = (ti && typeof ti.value === 'string') ? ti.value : bodTopMessage;
        bodTopUserEdited = true;
      } catch(_) {}
      updateBodovaPreview();
      updateBodovaNextEnabled();
    }

    function onBodBottomTextInput() {
      try {
        const bi = document.getElementById('bodBottomTextInput');
        bodBottomMessage = (bi && typeof bi.value === 'string') ? bi.value : bodBottomMessage;
        bodBottomUserEdited = true;
      } catch(_) {}
      updateBodovaPreview();
      updateBodovaNextEnabled();
    }

    function updateBodovaPreview() {
      try {
        const t = document.getElementById('bodyBottomTop');
        const b = document.getElementById('bodyBottomBot');
        if (t) t.textContent = (bodTopMessage || '').trim();
        if (b) b.textContent = (bodBottomMessage || '').trim();
      } catch(_) {}
    }

    function setStripBackground() {
      const img = document.getElementById('stripResultImg');
      const cv = document.getElementById('stripCanvas');
      if (!img) return;

      let finalUrl = '';
      let useProgressImage = cardType === 'revolution' && revolutionShowProgress && revolutionGfxMode === 'custom';
      let usePerStampImage = cardType === 'razitkova' && stampMode === 'perStamp';

      if (useProgressImage) {
        const maxIdx = (Array.isArray(revolutionGfxUrls) && revolutionGfxUrls.length > 0)
          ? Math.max(0, revolutionGfxUrls.length - 1)
          : Math.max(0, (revolutionMilestones || 1) - 1);
        // VŽDY zobrazuji aktuálně zvolený stav náhledu (revolutionGfxSelectedStep),
        // aby fake karta přesně odpovídala části "Náhled a stažení" bez ohledu na krok průvodce
        const idx = Math.max(0, Math.min(maxIdx, (typeof revolutionGfxSelectedStep === 'number' ? revolutionGfxSelectedStep : 0)));
        finalUrl = revolutionGfxUrls[idx] || selectedStripUrl || 'https://static.wixstatic.com/media/1cf87e_3ae4f6a9c66a44ef9aa950f489356001~mv2.png';
        img.src = finalUrl;
        img.style.display = 'block';
        if (cv) cv.style.display = 'none';
      } else if (usePerStampImage) {
        // Mimo sekci 4.5 se má vždy zobrazovat maximální stav (např. 8),
        // v samotné sekci 4.5 běží animace dle perStripSelectedStep
        const maxState = (Array.isArray(perStripUrls) && perStripUrls.length > 0)
          ? Math.max(0, perStripUrls.length - 1)
          : Math.max(0, perStampTotal);
        const idx = (currentStep === 4.5)
          ? Math.max(0, Math.min(maxState, perStripSelectedStep))
          : maxState;
        finalUrl = perStripUrls[idx] || selectedStripUrl || 'https://static.wixstatic.com/media/1cf87e_3ae4f6a9c66a44ef9aa950f489356001~mv2.png';
        img.src = finalUrl;
        img.style.display = 'block';
        if (cv) cv.style.display = 'none';
      } else {
        finalUrl = (selectedStripUrl && selectedStripUrl.trim()) ? selectedStripUrl : 'https://static.wixstatic.com/media/1cf87e_3ae4f6a9c66a44ef9aa950f489356001~mv2.png';
        img.src = finalUrl;
        img.style.display = 'block';
        if (cv) cv.style.display = (cardType === 'razitkova') ? 'block' : 'none';
        if (cardType === 'razitkova') {
          renderStripOnCanvas(finalUrl);
        }
      }
    }

    // --- Revolution animation & state controls ---
    function isRevolutionAnimating() { return !!revolutionAnimTimer; }

    function updateRevolutionAnimToggleLabel() {
      try {
        const btn = document.getElementById('revolutionAnimToggleBtn');
        if (!btn) return;
        btn.textContent = isRevolutionAnimating() ? 'Zastavit animaci' : 'Spustit animaci';
      } catch(_) {}
    }

    function stopRevolutionAnimation() {
      if (revolutionAnimTimer) {
        try { clearInterval(revolutionAnimTimer); } catch(_) {}
        revolutionAnimTimer = null;
      }
      try { updateRevolutionAnimToggleLabel(); } catch(_) {}
    }

    function startRevolutionAnimation(opts) {
      stopRevolutionAnimation();
      if (cardType !== 'revolution') { try { updateRevolutionAnimToggleLabel(); } catch(_) {} return; }
      const maxIdx = (Array.isArray(revolutionGfxUrls) && revolutionGfxUrls.length > 0)
        ? Math.max(0, revolutionGfxUrls.length - 1)
        : Math.max(0, (revolutionMilestones || 1) - 1);
      if (maxIdx <= 0) { try { updateRevolutionAnimToggleLabel(); } catch(_) {} return; }
      if (revolutionAnimPausedByUser) { try { updateRevolutionAnimToggleLabel(); } catch(_) {} return; }
      if (opts && opts.reset) {
        revolutionGfxSelectedStep = 0;
        try { updateRevolutionGfxPreview(); } catch(_) {}
      }
      revolutionAnimTimer = setInterval(() => {
        if (currentStep !== 4.5) { stopRevolutionAnimation(); return; }
        const next = (revolutionGfxSelectedStep + 1) % (maxIdx + 1);
        revolutionGfxSelectedStep = next;
        try { updateRevolutionGfxPreview(); } catch(_) {}
      }, 1000);
      try { updateRevolutionAnimToggleLabel(); } catch(_) {}
    }

    function revolutionToggleAnimation() {
      if (isRevolutionAnimating()) {
        revolutionAnimPausedByUser = true;
        stopRevolutionAnimation();
      } else {
        revolutionAnimPausedByUser = false;
        startRevolutionAnimation({ reset: false });
      }
      try { updateRevolutionAnimToggleLabel(); } catch(_) {}
    }

    function initRevolutionStateUI() {
      try {
        const sel = document.getElementById('revolutionStateSelect');
        if (!sel) return;
        const maxIdx = (Array.isArray(revolutionGfxUrls) && revolutionGfxUrls.length > 0)
          ? Math.max(0, revolutionGfxUrls.length - 1)
          : Math.max(0, (revolutionMilestones || 1) - 1);
        sel.innerHTML = '';
        for (let i = 0; i <= maxIdx; i++) {
          const opt = document.createElement('option');
          opt.value = String(i);
          opt.textContent = `Stav ${i}`;
          sel.appendChild(opt);
        }
        sel.value = String(Math.max(0, Math.min(maxIdx, revolutionGfxSelectedStep || 0)));
      } catch(_) {}
    }

    function onRevolutionStateSelect(select) {
      try {
        // Manuální změna stavu (v kroku 4.5) – zastavíme animaci
        try { revolutionAnimPausedByUser = true; } catch(_) {}
        try { stopRevolutionAnimation(); } catch(_) {}
        const v = parseInt(select && select.value, 10);
        const maxIdx = (Array.isArray(revolutionGfxUrls) && revolutionGfxUrls.length > 0)
          ? Math.max(0, revolutionGfxUrls.length - 1)
          : Math.max(0, (revolutionMilestones || 1) - 1);
        if (!isNaN(v)) {
          revolutionGfxSelectedStep = Math.max(0, Math.min(maxIdx, v));
          updateRevolutionGfxPreview();
        }
      } catch(_) {}
    }

    function revolutionPrevState() {
      try {
        const sel = document.getElementById('revolutionStateSelect');
        const v = Math.max(0, parseInt(sel && sel.value, 10) - 1 || 0);
        if (sel) sel.value = String(v);
        onRevolutionStateSelect(sel);
      } catch(_) {}
    }

    function revolutionNextState() {
      try {
        const sel = document.getElementById('revolutionStateSelect');
        const maxIdx = (Array.isArray(revolutionGfxUrls) && revolutionGfxUrls.length > 0)
          ? Math.max(0, revolutionGfxUrls.length - 1)
          : Math.max(0, (revolutionMilestones || 1) - 1);
        const curr = parseInt(sel && sel.value, 10) || 0;
        const v = Math.min(maxIdx, curr + 1);
        if (sel) sel.value = String(v);
        onRevolutionStateSelect(sel);
      } catch(_) {}
    }

    // --- Procentní karta – handlers & helpers ---
    function onProcentniLevelChange(index, field, value) {
      if (!procentniLevels[index]) return;

      if (field === 'name' || field === 'color') {
        procentniLevels[index][field] = value;
      } else {
        const numValue = parseInt(value, 10);
        if (!isNaN(numValue) && numValue >= 0) {
          if (field === 'discount') {
            // Clamp discount to 0–100
            procentniLevels[index][field] = Math.max(0, Math.min(100, numValue));
          } else {
            procentniLevels[index][field] = numValue;
          }
        }
      }
      
      // VŽDY přepneme náhled na upravovanou úroveň při jakékoliv změně
      setProcentniPreview(index);
      // Uložení a validace po změně
      if (typeof saveProcentniToStorage === 'function') saveProcentniToStorage();
      if (typeof showProcentniWarnings === 'function') showProcentniWarnings();
    }

    function addProcentniLevel() {
        const lastLevel = procentniLevels[procentniLevels.length - 1];
        if (lastLevel.spend === Infinity) {
            lastLevel.spend = (procentniLevels.length > 1 ? procentniLevels[procentniLevels.length - 2].spend : 0) + 4000;
        }
        
        // Náhodná barva pro novou úroveň pro inspiraci
        const randomColor = '#' + Math.floor(Math.random()*16777215).toString(16).padStart(6, '0');

        procentniLevels.push({
            name: 'UROVEN',
            discount: (lastLevel.discount || 0) + 2,
            spend: Infinity,
            color: randomColor
        });

        renderProcentniLevels();
        setProcentniPreview(procentniLevels.length - 1); // Zobrazíme náhled nově přidané úrovně
        if (typeof saveProcentniToStorage === 'function') saveProcentniToStorage();
        if (typeof showProcentniWarnings === 'function') showProcentniWarnings();
    }


    function removeProcentniLevel() {
      if (procentniLevels.length > 1) {
        procentniLevels.pop();
        if (procentniLevels.length > 0) {
          procentniLevels[procentniLevels.length - 1].spend = Infinity;
        }
        // Pokud jsme smazali zrovna zobrazenou úroveň, přepneme náhled na poslední existující
        if (procentniPreviewIndex >= procentniLevels.length) {
          setProcentniPreview(procentniLevels.length - 1);
        } else {
          renderProcentniLevels();
          updateProcentniPreview();
        }
        if (typeof saveProcentniToStorage === 'function') saveProcentniToStorage();
        if (typeof showProcentniWarnings === 'function') showProcentniWarnings();
      }
    }

    function setProcentniPreview(index) {
        procentniPreviewIndex = index;
        renderProcentniLevels(); // Překreslíme, aby se zvýraznil správný řádek
        updateProcentniPreview();
        if (typeof saveProcentniToStorage === 'function') saveProcentniToStorage();
    }

    function renderProcentniLevels() {
      const container = document.getElementById('procentniLevelsContainer');
      if (!container) return;

      container.innerHTML = '';
      procentniLevels.forEach((level, index) => {
        const isLast = index === procentniLevels.length - 1;
        const fromSpend = (index === 0) ? 0 : (procentniLevels[index - 1].spend);

        const row = document.createElement('tr');
        row.onclick = () => setProcentniPreview(index);
        if (index === procentniPreviewIndex) {
            row.classList.add('preview-active');
        }

        row.innerHTML = `
          <td class="level-index">${index + 1}</td>
          <td>
            <input type="text" value="${escapeHtml(level.name)}" onchange="onProcentniLevelChange(${index}, 'name', this.value)" onclick="event.stopPropagation()">
          </td>
          <td>
            <input type="number" value="${level.discount}" min="0" max="100" onchange="onProcentniLevelChange(${index}, 'discount', this.value)" onclick="event.stopPropagation()">
          </td>
          <td>
            <div class="procentni-spending-cell">
              ${index === 0 ? '<span>0 až</span>' : `<span>${(fromSpend + 1)} až</span>`}
              ${isLast ? 
                 `<input type="text" value="a více" disabled style="background:#f9fafb; border-style:dashed;">` :
                 `<input type="number" value="${level.spend}" min="${fromSpend + 1}" onchange="onProcentniLevelChange(${index}, 'spend', this.value)" onclick="event.stopPropagation()">`
              }
            </div>
          </td>
          <td>
          ${index === 0 ? '<span>(Hlavní barva)</span>' : 
            `<div class="procentni-level-color">
                <div class="current-color-only" style="display:flex; align-items:center; gap:8px;">
                  <div class="swatch" style="width:18px;height:18px;border-radius:4px;border:1px solid #e5e7eb; background:${level.color || pickedColor || '#ffffff'}" title="${level.color || pickedColor || '#ffffff'}" onclick="event.stopPropagation(); document.getElementById('colorPicker-${index}').click();"></div>
                  <input id="colorPicker-${index}" type="color" value="${level.color || pickedColor || '#ffffff'}" onchange="onProcentniLevelChange(${index}, 'color', this.value)" onclick="event.stopPropagation()" style="position:absolute; left:-9999px; width:0; height:0; opacity:0;">
                </div>
             </div>`
            }
          </td>
        `;
        container.appendChild(row);
      });
      
      const removeBtn = document.getElementById('removeProcentniLevelBtn');
      if (removeBtn) {
        removeBtn.disabled = procentniLevels.length <= 1;
      }
      if (typeof showProcentniWarnings === 'function') showProcentniWarnings();
    }

    function updateProcentniPreview() {
        const level = procentniLevels[procentniPreviewIndex];
        if (!level) return;

        // Najdeme všechny potřebné elementy
        const discountLabel1 = document.getElementById('discountLabel1');
        const statusVal = document.getElementById('statusVal');
        const discountLabel2 = document.getElementById('discountLabel2');
        const discountVal = document.getElementById('discountVal');
        const fakeCard = document.getElementById('fakeCard');

        // KROK 1: Obnovíme správné popisky
        if (discountLabel1) discountLabel1.textContent = 'STATUS';
        if (discountLabel2) discountLabel2.textContent = 'SLEVA';

        // KROK 2: Nastavíme správné hodnoty
        if (statusVal) statusVal.textContent = level.name;
        if (discountVal) discountVal.textContent = `${level.discount}%`;

        // KROK 3: Aplikujeme přesné posunutí
        if (discountLabel1) {
            discountLabel1.style.position = 'relative';
            discountLabel1.style.left = '42px';
        }
        if (statusVal) {
            statusVal.style.position = 'relative';
            statusVal.style.left = '45px';
        }
        
        // KROK 4: Nastavíme barvu karty
        if (fakeCard) {
            const colorToShow = level.color || pickedColor || '#ffffff';
            fakeCard.style.backgroundColor = colorToShow;
        }
    }

    // Reflow při změně velikosti okna/viewportu
    window.addEventListener('resize', () => {
      positionStrip();
      setStripBackground();
      renderStrip();
    });
  </script>
</body>
</html>